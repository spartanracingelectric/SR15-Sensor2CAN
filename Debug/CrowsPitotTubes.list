
CrowsPitotTubes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009550  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08009660  08009660  00019660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800972c  0800972c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800972c  0800972c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800972c  0800972c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800972c  0800972c  0001972c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009730  08009730  00019730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009734  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b0  200001e0  08009914  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001590  08009914  00021590  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d56c  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d56  00000000  00000000  0002d7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  00030510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000880  00000000  00000000  000310b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ead  00000000  00000000  00031930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe02  00000000  00000000  0004b7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a266  00000000  00000000  0005b5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000348c  00000000  00000000  000e5848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000e8cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009648 	.word	0x08009648

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009648 	.word	0x08009648

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7e:	f000 fa73 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a82:	f000 f8ad 	bl	8000be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a86:	f000 f945 	bl	8000d14 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000a8a:	f007 fb93 	bl	80081b4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000a8e:	f000 f903 	bl	8000c98 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  double velocity = 0;
 8000a92:	f04f 0200 	mov.w	r2, #0
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	e9c7 2300 	strd	r2, r3, [r7]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_ADC_Start(&hadc1);
 8000a9e:	4848      	ldr	r0, [pc, #288]	; (8000bc0 <main+0x148>)
 8000aa0:	f000 fbc0 	bl	8001224 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20);
 8000aa4:	2114      	movs	r1, #20
 8000aa6:	4846      	ldr	r0, [pc, #280]	; (8000bc0 <main+0x148>)
 8000aa8:	f000 fc6a 	bl	8001380 <HAL_ADC_PollForConversion>
	  Aout = HAL_ADC_GetValue(&hadc1);
 8000aac:	4844      	ldr	r0, [pc, #272]	; (8000bc0 <main+0x148>)
 8000aae:	f000 fd6d 	bl	800158c <HAL_ADC_GetValue>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	4b43      	ldr	r3, [pc, #268]	; (8000bc4 <main+0x14c>)
 8000ab8:	801a      	strh	r2, [r3, #0]
	  voltageOut = 0.0009 * Aout - 0.535;
 8000aba:	4b42      	ldr	r3, [pc, #264]	; (8000bc4 <main+0x14c>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fca0 	bl	8000404 <__aeabi_i2d>
 8000ac4:	a334      	add	r3, pc, #208	; (adr r3, 8000b98 <main+0x120>)
 8000ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aca:	f7ff fd05 	bl	80004d8 <__aeabi_dmul>
 8000ace:	4602      	mov	r2, r0
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	a332      	add	r3, pc, #200	; (adr r3, 8000ba0 <main+0x128>)
 8000ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000adc:	f7ff fb44 	bl	8000168 <__aeabi_dsub>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	4938      	ldr	r1, [pc, #224]	; (8000bc8 <main+0x150>)
 8000ae6:	e9c1 2300 	strd	r2, r3, [r1]
	  DP = (750*voltageOut)/5.25 - 150;
 8000aea:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <main+0x150>)
 8000aec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <main+0x154>)
 8000af6:	f7ff fcef 	bl	80004d8 <__aeabi_dmul>
 8000afa:	4602      	mov	r2, r0
 8000afc:	460b      	mov	r3, r1
 8000afe:	4610      	mov	r0, r2
 8000b00:	4619      	mov	r1, r3
 8000b02:	f04f 0200 	mov.w	r2, #0
 8000b06:	4b32      	ldr	r3, [pc, #200]	; (8000bd0 <main+0x158>)
 8000b08:	f7ff fe10 	bl	800072c <__aeabi_ddiv>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	460b      	mov	r3, r1
 8000b10:	4610      	mov	r0, r2
 8000b12:	4619      	mov	r1, r3
 8000b14:	a324      	add	r3, pc, #144	; (adr r3, 8000ba8 <main+0x130>)
 8000b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b1a:	f7ff fb25 	bl	8000168 <__aeabi_dsub>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	460b      	mov	r3, r1
 8000b22:	492c      	ldr	r1, [pc, #176]	; (8000bd4 <main+0x15c>)
 8000b24:	e9c1 2300 	strd	r2, r3, [r1]
	  velocity = sqrt((2*DP)/1.225) * 2.23694;
 8000b28:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <main+0x15c>)
 8000b2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b2e:	4602      	mov	r2, r0
 8000b30:	460b      	mov	r3, r1
 8000b32:	f7ff fb1b 	bl	800016c <__adddf3>
 8000b36:	4602      	mov	r2, r0
 8000b38:	460b      	mov	r3, r1
 8000b3a:	4610      	mov	r0, r2
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	a31c      	add	r3, pc, #112	; (adr r3, 8000bb0 <main+0x138>)
 8000b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b44:	f7ff fdf2 	bl	800072c <__aeabi_ddiv>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	4610      	mov	r0, r2
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f008 fc7d 	bl	800944e <sqrt>
 8000b54:	a318      	add	r3, pc, #96	; (adr r3, 8000bb8 <main+0x140>)
 8000b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b5a:	f7ff fcbd 	bl	80004d8 <__aeabi_dmul>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	460b      	mov	r3, r1
 8000b62:	e9c7 2300 	strd	r2, r3, [r7]

	  sprintf(msg, "Speed: %hu \r\n", (uint16_t) velocity);
 8000b66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b6a:	f7ff ff65 	bl	8000a38 <__aeabi_d2uiz>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	461a      	mov	r2, r3
 8000b74:	4918      	ldr	r1, [pc, #96]	; (8000bd8 <main+0x160>)
 8000b76:	4819      	ldr	r0, [pc, #100]	; (8000bdc <main+0x164>)
 8000b78:	f007 ffb8 	bl	8008aec <siprintf>
	  CDC_Transmit_FS((uint16_t*) msg, strlen(msg));
 8000b7c:	4817      	ldr	r0, [pc, #92]	; (8000bdc <main+0x164>)
 8000b7e:	f7ff fae7 	bl	8000150 <strlen>
 8000b82:	4603      	mov	r3, r0
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	4619      	mov	r1, r3
 8000b88:	4814      	ldr	r0, [pc, #80]	; (8000bdc <main+0x164>)
 8000b8a:	f007 fbd1 	bl	8008330 <CDC_Transmit_FS>
	  HAL_Delay(10);
 8000b8e:	200a      	movs	r0, #10
 8000b90:	f000 fa4c 	bl	800102c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000b94:	e783      	b.n	8000a9e <main+0x26>
 8000b96:	bf00      	nop
 8000b98:	487fcb92 	.word	0x487fcb92
 8000b9c:	3f4d7dbf 	.word	0x3f4d7dbf
 8000ba0:	51eb851f 	.word	0x51eb851f
 8000ba4:	3fe11eb8 	.word	0x3fe11eb8
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	4062c000 	.word	0x4062c000
 8000bb0:	9999999a 	.word	0x9999999a
 8000bb4:	3ff39999 	.word	0x3ff39999
 8000bb8:	cc78e9f7 	.word	0xcc78e9f7
 8000bbc:	4001e540 	.word	0x4001e540
 8000bc0:	200001fc 	.word	0x200001fc
 8000bc4:	2000022c 	.word	0x2000022c
 8000bc8:	20000230 	.word	0x20000230
 8000bcc:	40877000 	.word	0x40877000
 8000bd0:	40150000 	.word	0x40150000
 8000bd4:	20000238 	.word	0x20000238
 8000bd8:	08009660 	.word	0x08009660
 8000bdc:	20000240 	.word	0x20000240

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b094      	sub	sp, #80	; 0x50
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bea:	2228      	movs	r2, #40	; 0x28
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f007 ff9c 	bl	8008b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c10:	2301      	movs	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c2c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c36:	4618      	mov	r0, r3
 8000c38:	f002 fe48 	bl	80038cc <HAL_RCC_OscConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c42:	f000 f889 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c46:	230f      	movs	r3, #15
 8000c48:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2102      	movs	r1, #2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f003 f8b4 	bl	8003dd0 <HAL_RCC_ClockConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c6e:	f000 f873 	bl	8000d58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000c72:	2312      	movs	r3, #18
 8000c74:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4618      	mov	r0, r3
 8000c82:	f003 fa1f 	bl	80040c4 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c8c:	f000 f864 	bl	8000d58 <Error_Handler>
  }
}
 8000c90:	bf00      	nop
 8000c92:	3750      	adds	r7, #80	; 0x50
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000caa:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <MX_ADC1_Init+0x78>)
 8000cac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cc2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc8:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cd6:	f000 f9cd 	bl	8001074 <HAL_ADC_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ce0:	f000 f83a 	bl	8000d58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_ADC1_Init+0x74>)
 8000cf6:	f000 fc55 	bl	80015a4 <HAL_ADC_ConfigChannel>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d00:	f000 f82a 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3710      	adds	r7, #16
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200001fc 	.word	0x200001fc
 8000d10:	40012400 	.word	0x40012400

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_GPIO_Init+0x40>)
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <MX_GPIO_Init+0x40>)
 8000d20:	f043 0320 	orr.w	r3, r3, #32
 8000d24:	6193      	str	r3, [r2, #24]
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_GPIO_Init+0x40>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	f003 0320 	and.w	r3, r3, #32
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_GPIO_Init+0x40>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <MX_GPIO_Init+0x40>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <MX_GPIO_Init+0x40>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	40021000 	.word	0x40021000

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6193      	str	r3, [r2, #24]
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	61d3      	str	r3, [r2, #28]
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_MspInit+0x5c>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <HAL_MspInit+0x60>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <HAL_MspInit+0x60>)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010000 	.word	0x40010000

08000dc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <HAL_ADC_MspInit+0x6c>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d121      	bne.n	8000e2c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <HAL_ADC_MspInit+0x70>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <HAL_ADC_MspInit+0x70>)
 8000dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_ADC_MspInit+0x70>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_ADC_MspInit+0x70>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <HAL_ADC_MspInit+0x70>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_ADC_MspInit+0x70>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4619      	mov	r1, r3
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_ADC_MspInit+0x74>)
 8000e28:	f000 fe5e 	bl	8001ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3720      	adds	r7, #32
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40012400 	.word	0x40012400
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010800 	.word	0x40010800

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr

08000e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e86:	f000 f8b5 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e96:	f001 f8d0 	bl	800203a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000f38 	.word	0x20000f38

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f007 fe32 	bl	8008b3c <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20005000 	.word	0x20005000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	20000268 	.word	0x20000268
 8000f0c:	20001590 	.word	0x20001590

08000f10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f1c:	f7ff fff8 	bl	8000f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480b      	ldr	r0, [pc, #44]	; (8000f50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f22:	490c      	ldr	r1, [pc, #48]	; (8000f54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f24:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f38:	4c09      	ldr	r4, [pc, #36]	; (8000f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f46:	f007 fdff 	bl	8008b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f4a:	f7ff fd95 	bl	8000a78 <main>
  bx lr
 8000f4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f54:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000f58:	08009734 	.word	0x08009734
  ldr r2, =_sbss
 8000f5c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000f60:	20001590 	.word	0x20001590

08000f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f64:	e7fe      	b.n	8000f64 <ADC1_2_IRQHandler>
	...

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_Init+0x28>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_Init+0x28>)
 8000f72:	f043 0310 	orr.w	r3, r3, #16
 8000f76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 fd73 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	200f      	movs	r0, #15
 8000f80:	f000 f808 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff feee 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40022000 	.word	0x40022000

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x54>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fd8b 	bl	8001ace <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 fd53 	bl	8001a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_InitTick+0x5c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_IncTick+0x1c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <HAL_IncTick+0x20>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a03      	ldr	r2, [pc, #12]	; (8001014 <HAL_IncTick+0x20>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	20000008 	.word	0x20000008
 8001014:	2000026c 	.word	0x2000026c

08001018 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b02      	ldr	r3, [pc, #8]	; (8001028 <HAL_GetTick+0x10>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	2000026c 	.word	0x2000026c

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff fff0 	bl	8001018 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_Delay+0x44>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffe0 	bl	8001018 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008

08001074 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e0be      	b.n	8001214 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d109      	bne.n	80010b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff fe88 	bl	8000dc8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 fbc5 	bl	8001848 <ADC_ConversionStop_Disable>
 80010be:	4603      	mov	r3, r0
 80010c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f040 8099 	bne.w	8001202 <HAL_ADC_Init+0x18e>
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f040 8095 	bne.w	8001202 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010e0:	f023 0302 	bic.w	r3, r3, #2
 80010e4:	f043 0202 	orr.w	r2, r3, #2
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7b1b      	ldrb	r3, [r3, #12]
 80010fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	4313      	orrs	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800110c:	d003      	beq.n	8001116 <HAL_ADC_Init+0xa2>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d102      	bne.n	800111c <HAL_ADC_Init+0xa8>
 8001116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800111a:	e000      	b.n	800111e <HAL_ADC_Init+0xaa>
 800111c:	2300      	movs	r3, #0
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7d1b      	ldrb	r3, [r3, #20]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d119      	bne.n	8001160 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7b1b      	ldrb	r3, [r3, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d109      	bne.n	8001148 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	3b01      	subs	r3, #1
 800113a:	035a      	lsls	r2, r3, #13
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	e00b      	b.n	8001160 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	f043 0220 	orr.w	r2, r3, #32
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001158:	f043 0201 	orr.w	r2, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	430a      	orrs	r2, r1
 8001172:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <HAL_ADC_Init+0x1a8>)
 800117c:	4013      	ands	r3, r2
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	6812      	ldr	r2, [r2, #0]
 8001182:	68b9      	ldr	r1, [r7, #8]
 8001184:	430b      	orrs	r3, r1
 8001186:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001190:	d003      	beq.n	800119a <HAL_ADC_Init+0x126>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d104      	bne.n	80011a4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	3b01      	subs	r3, #1
 80011a0:	051b      	lsls	r3, r3, #20
 80011a2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011aa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_ADC_Init+0x1ac>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d10b      	bne.n	80011e0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d2:	f023 0303 	bic.w	r3, r3, #3
 80011d6:	f043 0201 	orr.w	r2, r3, #1
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011de:	e018      	b.n	8001212 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	f023 0312 	bic.w	r3, r3, #18
 80011e8:	f043 0210 	orr.w	r2, r3, #16
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001200:	e007      	b.n	8001212 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001206:	f043 0210 	orr.w	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001212:	7dfb      	ldrb	r3, [r7, #23]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	ffe1f7fd 	.word	0xffe1f7fd
 8001220:	ff1f0efe 	.word	0xff1f0efe

08001224 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <HAL_ADC_Start+0x1a>
 800123a:	2302      	movs	r3, #2
 800123c:	e098      	b.n	8001370 <HAL_ADC_Start+0x14c>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 faa4 	bl	8001794 <ADC_Enable>
 800124c:	4603      	mov	r3, r0
 800124e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f040 8087 	bne.w	8001366 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a41      	ldr	r2, [pc, #260]	; (8001378 <HAL_ADC_Start+0x154>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d105      	bne.n	8001282 <HAL_ADC_Start+0x5e>
 8001276:	4b41      	ldr	r3, [pc, #260]	; (800137c <HAL_ADC_Start+0x158>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d115      	bne.n	80012ae <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001286:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	2b00      	cmp	r3, #0
 800129a:	d026      	beq.n	80012ea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ac:	e01d      	b.n	80012ea <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a2f      	ldr	r2, [pc, #188]	; (800137c <HAL_ADC_Start+0x158>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d004      	beq.n	80012ce <HAL_ADC_Start+0xaa>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a2b      	ldr	r2, [pc, #172]	; (8001378 <HAL_ADC_Start+0x154>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10d      	bne.n	80012ea <HAL_ADC_Start+0xc6>
 80012ce:	4b2b      	ldr	r3, [pc, #172]	; (800137c <HAL_ADC_Start+0x158>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d007      	beq.n	80012ea <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	f023 0206 	bic.w	r2, r3, #6
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	62da      	str	r2, [r3, #44]	; 0x2c
 8001302:	e002      	b.n	800130a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f06f 0202 	mvn.w	r2, #2
 800131a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001326:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800132a:	d113      	bne.n	8001354 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001330:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_ADC_Start+0x154>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d105      	bne.n	8001342 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_ADC_Start+0x158>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800133e:	2b00      	cmp	r3, #0
 8001340:	d108      	bne.n	8001354 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	e00c      	b.n	800136e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	e003      	b.n	800136e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40012800 	.word	0x40012800
 800137c:	40012400 	.word	0x40012400

08001380 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001396:	f7ff fe3f 	bl	8001018 <HAL_GetTick>
 800139a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	f043 0220 	orr.w	r2, r3, #32
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e0d3      	b.n	800156a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d131      	bne.n	8001434 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d12a      	bne.n	8001434 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013de:	e021      	b.n	8001424 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e6:	d01d      	beq.n	8001424 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d007      	beq.n	80013fe <HAL_ADC_PollForConversion+0x7e>
 80013ee:	f7ff fe13 	bl	8001018 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d212      	bcs.n	8001424 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10b      	bne.n	8001424 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	f043 0204 	orr.w	r2, r3, #4
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e0a2      	b.n	800156a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0d6      	beq.n	80013e0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001432:	e070      	b.n	8001516 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001434:	4b4f      	ldr	r3, [pc, #316]	; (8001574 <HAL_ADC_PollForConversion+0x1f4>)
 8001436:	681c      	ldr	r4, [r3, #0]
 8001438:	2002      	movs	r0, #2
 800143a:	f002 fef9 	bl	8004230 <HAL_RCCEx_GetPeriphCLKFreq>
 800143e:	4603      	mov	r3, r0
 8001440:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6919      	ldr	r1, [r3, #16]
 800144a:	4b4b      	ldr	r3, [pc, #300]	; (8001578 <HAL_ADC_PollForConversion+0x1f8>)
 800144c:	400b      	ands	r3, r1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d118      	bne.n	8001484 <HAL_ADC_PollForConversion+0x104>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68d9      	ldr	r1, [r3, #12]
 8001458:	4b48      	ldr	r3, [pc, #288]	; (800157c <HAL_ADC_PollForConversion+0x1fc>)
 800145a:	400b      	ands	r3, r1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d111      	bne.n	8001484 <HAL_ADC_PollForConversion+0x104>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6919      	ldr	r1, [r3, #16]
 8001466:	4b46      	ldr	r3, [pc, #280]	; (8001580 <HAL_ADC_PollForConversion+0x200>)
 8001468:	400b      	ands	r3, r1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d108      	bne.n	8001480 <HAL_ADC_PollForConversion+0x100>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68d9      	ldr	r1, [r3, #12]
 8001474:	4b43      	ldr	r3, [pc, #268]	; (8001584 <HAL_ADC_PollForConversion+0x204>)
 8001476:	400b      	ands	r3, r1
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_ADC_PollForConversion+0x100>
 800147c:	2314      	movs	r3, #20
 800147e:	e020      	b.n	80014c2 <HAL_ADC_PollForConversion+0x142>
 8001480:	2329      	movs	r3, #41	; 0x29
 8001482:	e01e      	b.n	80014c2 <HAL_ADC_PollForConversion+0x142>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6919      	ldr	r1, [r3, #16]
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_ADC_PollForConversion+0x200>)
 800148c:	400b      	ands	r3, r1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d106      	bne.n	80014a0 <HAL_ADC_PollForConversion+0x120>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68d9      	ldr	r1, [r3, #12]
 8001498:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <HAL_ADC_PollForConversion+0x204>)
 800149a:	400b      	ands	r3, r1
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00d      	beq.n	80014bc <HAL_ADC_PollForConversion+0x13c>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6919      	ldr	r1, [r3, #16]
 80014a6:	4b38      	ldr	r3, [pc, #224]	; (8001588 <HAL_ADC_PollForConversion+0x208>)
 80014a8:	400b      	ands	r3, r1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d108      	bne.n	80014c0 <HAL_ADC_PollForConversion+0x140>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68d9      	ldr	r1, [r3, #12]
 80014b4:	4b34      	ldr	r3, [pc, #208]	; (8001588 <HAL_ADC_PollForConversion+0x208>)
 80014b6:	400b      	ands	r3, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_ADC_PollForConversion+0x140>
 80014bc:	2354      	movs	r3, #84	; 0x54
 80014be:	e000      	b.n	80014c2 <HAL_ADC_PollForConversion+0x142>
 80014c0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80014c8:	e021      	b.n	800150e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d01a      	beq.n	8001508 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <HAL_ADC_PollForConversion+0x168>
 80014d8:	f7ff fd9e 	bl	8001018 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d20f      	bcs.n	8001508 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d90b      	bls.n	8001508 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	f043 0204 	orr.w	r2, r3, #4
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e030      	b.n	800156a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	3301      	adds	r3, #1
 800150c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	429a      	cmp	r2, r3
 8001514:	d8d9      	bhi.n	80014ca <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f06f 0212 	mvn.w	r2, #18
 800151e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001524:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001536:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800153a:	d115      	bne.n	8001568 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001540:	2b00      	cmp	r3, #0
 8001542:	d111      	bne.n	8001568 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d105      	bne.n	8001568 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f043 0201 	orr.w	r2, r3, #1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	371c      	adds	r7, #28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	20000000 	.word	0x20000000
 8001578:	24924924 	.word	0x24924924
 800157c:	00924924 	.word	0x00924924
 8001580:	12492492 	.word	0x12492492
 8001584:	00492492 	.word	0x00492492
 8001588:	00249249 	.word	0x00249249

0800158c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x20>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e0dc      	b.n	800177e <HAL_ADC_ConfigChannel+0x1da>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b06      	cmp	r3, #6
 80015d2:	d81c      	bhi.n	800160e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	3b05      	subs	r3, #5
 80015e6:	221f      	movs	r2, #31
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4019      	ands	r1, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	3b05      	subs	r3, #5
 8001600:	fa00 f203 	lsl.w	r2, r0, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	635a      	str	r2, [r3, #52]	; 0x34
 800160c:	e03c      	b.n	8001688 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b0c      	cmp	r3, #12
 8001614:	d81c      	bhi.n	8001650 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	3b23      	subs	r3, #35	; 0x23
 8001628:	221f      	movs	r2, #31
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	4019      	ands	r1, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	3b23      	subs	r3, #35	; 0x23
 8001642:	fa00 f203 	lsl.w	r2, r0, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	631a      	str	r2, [r3, #48]	; 0x30
 800164e:	e01b      	b.n	8001688 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	3b41      	subs	r3, #65	; 0x41
 8001662:	221f      	movs	r2, #31
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	4019      	ands	r1, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	3b41      	subs	r3, #65	; 0x41
 800167c:	fa00 f203 	lsl.w	r2, r0, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b09      	cmp	r3, #9
 800168e:	d91c      	bls.n	80016ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68d9      	ldr	r1, [r3, #12]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	3b1e      	subs	r3, #30
 80016a2:	2207      	movs	r2, #7
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4019      	ands	r1, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	6898      	ldr	r0, [r3, #8]
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4613      	mov	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	4413      	add	r3, r2
 80016ba:	3b1e      	subs	r3, #30
 80016bc:	fa00 f203 	lsl.w	r2, r0, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	e019      	b.n	80016fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6919      	ldr	r1, [r3, #16]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4613      	mov	r3, r2
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4413      	add	r3, r2
 80016da:	2207      	movs	r2, #7
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	4019      	ands	r1, r3
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	6898      	ldr	r0, [r3, #8]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	fa00 f203 	lsl.w	r2, r0, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b10      	cmp	r3, #16
 8001704:	d003      	beq.n	800170e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800170a:	2b11      	cmp	r3, #17
 800170c:	d132      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a1d      	ldr	r2, [pc, #116]	; (8001788 <HAL_ADC_ConfigChannel+0x1e4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d125      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d126      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001734:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b10      	cmp	r3, #16
 800173c:	d11a      	bne.n	8001774 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <HAL_ADC_ConfigChannel+0x1e8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a13      	ldr	r2, [pc, #76]	; (8001790 <HAL_ADC_ConfigChannel+0x1ec>)
 8001744:	fba2 2303 	umull	r2, r3, r2, r3
 8001748:	0c9a      	lsrs	r2, r3, #18
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001754:	e002      	b.n	800175c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	3b01      	subs	r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f9      	bne.n	8001756 <HAL_ADC_ConfigChannel+0x1b2>
 8001762:	e007      	b.n	8001774 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	f043 0220 	orr.w	r2, r3, #32
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	40012400 	.word	0x40012400
 800178c:	20000000 	.word	0x20000000
 8001790:	431bde83 	.word	0x431bde83

08001794 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d040      	beq.n	8001834 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0201 	orr.w	r2, r2, #1
 80017c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017c2:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <ADC_Enable+0xac>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a1f      	ldr	r2, [pc, #124]	; (8001844 <ADC_Enable+0xb0>)
 80017c8:	fba2 2303 	umull	r2, r3, r2, r3
 80017cc:	0c9b      	lsrs	r3, r3, #18
 80017ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017d0:	e002      	b.n	80017d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f9      	bne.n	80017d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017de:	f7ff fc1b 	bl	8001018 <HAL_GetTick>
 80017e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017e4:	e01f      	b.n	8001826 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017e6:	f7ff fc17 	bl	8001018 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d918      	bls.n	8001826 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d011      	beq.n	8001826 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	f043 0210 	orr.w	r2, r3, #16
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	f043 0201 	orr.w	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e007      	b.n	8001836 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	d1d8      	bne.n	80017e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000000 	.word	0x20000000
 8001844:	431bde83 	.word	0x431bde83

08001848 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b01      	cmp	r3, #1
 8001860:	d12e      	bne.n	80018c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 0201 	bic.w	r2, r2, #1
 8001870:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001872:	f7ff fbd1 	bl	8001018 <HAL_GetTick>
 8001876:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001878:	e01b      	b.n	80018b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800187a:	f7ff fbcd 	bl	8001018 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d914      	bls.n	80018b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b01      	cmp	r3, #1
 8001894:	d10d      	bne.n	80018b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	f043 0210 	orr.w	r2, r3, #16
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	f043 0201 	orr.w	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e007      	b.n	80018c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d0dc      	beq.n	800187a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4906      	ldr	r1, [pc, #24]	; (8001964 <__NVIC_EnableIRQ+0x34>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	e000e100 	.word	0xe000e100

08001968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	db0a      	blt.n	8001992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2da      	uxtb	r2, r3
 8001980:	490c      	ldr	r1, [pc, #48]	; (80019b4 <__NVIC_SetPriority+0x4c>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	0112      	lsls	r2, r2, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	440b      	add	r3, r1
 800198c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001990:	e00a      	b.n	80019a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <__NVIC_SetPriority+0x50>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	3b04      	subs	r3, #4
 80019a0:	0112      	lsls	r2, r2, #4
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	440b      	add	r3, r1
 80019a6:	761a      	strb	r2, [r3, #24]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000e100 	.word	0xe000e100
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f1c3 0307 	rsb	r3, r3, #7
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	bf28      	it	cs
 80019da:	2304      	movcs	r3, #4
 80019dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3304      	adds	r3, #4
 80019e2:	2b06      	cmp	r3, #6
 80019e4:	d902      	bls.n	80019ec <NVIC_EncodePriority+0x30>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3b03      	subs	r3, #3
 80019ea:	e000      	b.n	80019ee <NVIC_EncodePriority+0x32>
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f0:	f04f 32ff 	mov.w	r2, #4294967295
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0e:	43d9      	mvns	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	4313      	orrs	r3, r2
         );
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f7ff ff90 	bl	8001968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff2d 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff42 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff90 	bl	80019bc <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff5f 	bl	8001968 <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff35 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffa2 	bl	8001a20 <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b08b      	sub	sp, #44	; 0x2c
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afa:	e169      	b.n	8001dd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001afc:	2201      	movs	r2, #1
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f040 8158 	bne.w	8001dca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a9a      	ldr	r2, [pc, #616]	; (8001d88 <HAL_GPIO_Init+0x2a0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d05e      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b24:	4a98      	ldr	r2, [pc, #608]	; (8001d88 <HAL_GPIO_Init+0x2a0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d875      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b2a:	4a98      	ldr	r2, [pc, #608]	; (8001d8c <HAL_GPIO_Init+0x2a4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d058      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b30:	4a96      	ldr	r2, [pc, #600]	; (8001d8c <HAL_GPIO_Init+0x2a4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d86f      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b36:	4a96      	ldr	r2, [pc, #600]	; (8001d90 <HAL_GPIO_Init+0x2a8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d052      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b3c:	4a94      	ldr	r2, [pc, #592]	; (8001d90 <HAL_GPIO_Init+0x2a8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d869      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b42:	4a94      	ldr	r2, [pc, #592]	; (8001d94 <HAL_GPIO_Init+0x2ac>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d04c      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b48:	4a92      	ldr	r2, [pc, #584]	; (8001d94 <HAL_GPIO_Init+0x2ac>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d863      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b4e:	4a92      	ldr	r2, [pc, #584]	; (8001d98 <HAL_GPIO_Init+0x2b0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d046      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
 8001b54:	4a90      	ldr	r2, [pc, #576]	; (8001d98 <HAL_GPIO_Init+0x2b0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d85d      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b5a:	2b12      	cmp	r3, #18
 8001b5c:	d82a      	bhi.n	8001bb4 <HAL_GPIO_Init+0xcc>
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d859      	bhi.n	8001c16 <HAL_GPIO_Init+0x12e>
 8001b62:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <HAL_GPIO_Init+0x80>)
 8001b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b68:	08001be3 	.word	0x08001be3
 8001b6c:	08001bbd 	.word	0x08001bbd
 8001b70:	08001bcf 	.word	0x08001bcf
 8001b74:	08001c11 	.word	0x08001c11
 8001b78:	08001c17 	.word	0x08001c17
 8001b7c:	08001c17 	.word	0x08001c17
 8001b80:	08001c17 	.word	0x08001c17
 8001b84:	08001c17 	.word	0x08001c17
 8001b88:	08001c17 	.word	0x08001c17
 8001b8c:	08001c17 	.word	0x08001c17
 8001b90:	08001c17 	.word	0x08001c17
 8001b94:	08001c17 	.word	0x08001c17
 8001b98:	08001c17 	.word	0x08001c17
 8001b9c:	08001c17 	.word	0x08001c17
 8001ba0:	08001c17 	.word	0x08001c17
 8001ba4:	08001c17 	.word	0x08001c17
 8001ba8:	08001c17 	.word	0x08001c17
 8001bac:	08001bc5 	.word	0x08001bc5
 8001bb0:	08001bd9 	.word	0x08001bd9
 8001bb4:	4a79      	ldr	r2, [pc, #484]	; (8001d9c <HAL_GPIO_Init+0x2b4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bba:	e02c      	b.n	8001c16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	623b      	str	r3, [r7, #32]
          break;
 8001bc2:	e029      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	3304      	adds	r3, #4
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e024      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	3308      	adds	r3, #8
 8001bd4:	623b      	str	r3, [r7, #32]
          break;
 8001bd6:	e01f      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	330c      	adds	r3, #12
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	e01a      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bea:	2304      	movs	r3, #4
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e013      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	611a      	str	r2, [r3, #16]
          break;
 8001c02:	e009      	b.n	8001c18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c04:	2308      	movs	r3, #8
 8001c06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	615a      	str	r2, [r3, #20]
          break;
 8001c0e:	e003      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c10:	2300      	movs	r3, #0
 8001c12:	623b      	str	r3, [r7, #32]
          break;
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x130>
          break;
 8001c16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2bff      	cmp	r3, #255	; 0xff
 8001c1c:	d801      	bhi.n	8001c22 <HAL_GPIO_Init+0x13a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	e001      	b.n	8001c26 <HAL_GPIO_Init+0x13e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3304      	adds	r3, #4
 8001c26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2bff      	cmp	r3, #255	; 0xff
 8001c2c:	d802      	bhi.n	8001c34 <HAL_GPIO_Init+0x14c>
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	e002      	b.n	8001c3a <HAL_GPIO_Init+0x152>
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	3b08      	subs	r3, #8
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	210f      	movs	r1, #15
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	6a39      	ldr	r1, [r7, #32]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	431a      	orrs	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80b1 	beq.w	8001dca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c68:	4b4d      	ldr	r3, [pc, #308]	; (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a4c      	ldr	r2, [pc, #304]	; (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b4a      	ldr	r3, [pc, #296]	; (8001da0 <HAL_GPIO_Init+0x2b8>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c80:	4a48      	ldr	r2, [pc, #288]	; (8001da4 <HAL_GPIO_Init+0x2bc>)
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a40      	ldr	r2, [pc, #256]	; (8001da8 <HAL_GPIO_Init+0x2c0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d013      	beq.n	8001cd4 <HAL_GPIO_Init+0x1ec>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a3f      	ldr	r2, [pc, #252]	; (8001dac <HAL_GPIO_Init+0x2c4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a3e      	ldr	r2, [pc, #248]	; (8001db0 <HAL_GPIO_Init+0x2c8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d007      	beq.n	8001ccc <HAL_GPIO_Init+0x1e4>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a3d      	ldr	r2, [pc, #244]	; (8001db4 <HAL_GPIO_Init+0x2cc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d101      	bne.n	8001cc8 <HAL_GPIO_Init+0x1e0>
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e006      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cc8:	2304      	movs	r3, #4
 8001cca:	e004      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e002      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <HAL_GPIO_Init+0x1ee>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd8:	f002 0203 	and.w	r2, r2, #3
 8001cdc:	0092      	lsls	r2, r2, #2
 8001cde:	4093      	lsls	r3, r2
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ce6:	492f      	ldr	r1, [pc, #188]	; (8001da4 <HAL_GPIO_Init+0x2bc>)
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d00:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	492c      	ldr	r1, [pc, #176]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	608b      	str	r3, [r1, #8]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4928      	ldr	r1, [pc, #160]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	4922      	ldr	r1, [pc, #136]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60cb      	str	r3, [r1, #12]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	491e      	ldr	r1, [pc, #120]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4918      	ldr	r1, [pc, #96]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4914      	ldr	r1, [pc, #80]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d021      	beq.n	8001dbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	490e      	ldr	r1, [pc, #56]	; (8001db8 <HAL_GPIO_Init+0x2d0>)
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]
 8001d84:	e021      	b.n	8001dca <HAL_GPIO_Init+0x2e2>
 8001d86:	bf00      	nop
 8001d88:	10320000 	.word	0x10320000
 8001d8c:	10310000 	.word	0x10310000
 8001d90:	10220000 	.word	0x10220000
 8001d94:	10210000 	.word	0x10210000
 8001d98:	10120000 	.word	0x10120000
 8001d9c:	10110000 	.word	0x10110000
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40010800 	.word	0x40010800
 8001dac:	40010c00 	.word	0x40010c00
 8001db0:	40011000 	.word	0x40011000
 8001db4:	40011400 	.word	0x40011400
 8001db8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	4909      	ldr	r1, [pc, #36]	; (8001dec <HAL_GPIO_Init+0x304>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	3301      	adds	r3, #1
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f47f ae8e 	bne.w	8001afc <HAL_GPIO_Init+0x14>
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	372c      	adds	r7, #44	; 0x2c
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df2:	b08b      	sub	sp, #44	; 0x2c
 8001df4:	af06      	add	r7, sp, #24
 8001df6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0f1      	b.n	8001fe6 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f006 fbbe 	bl	8008598 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2203      	movs	r2, #3
 8001e20:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fadd 	bl	80043e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	687e      	ldr	r6, [r7, #4]
 8001e36:	466d      	mov	r5, sp
 8001e38:	f106 0410 	add.w	r4, r6, #16
 8001e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	602b      	str	r3, [r5, #0]
 8001e44:	1d33      	adds	r3, r6, #4
 8001e46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e48:	6838      	ldr	r0, [r7, #0]
 8001e4a:	f002 faa7 	bl	800439c <USB_CoreInit>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0c2      	b.n	8001fe6 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f002 fad8 	bl	800441c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e040      	b.n	8001ef4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	3301      	adds	r3, #1
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	440b      	add	r3, r1
 8001eac:	3303      	adds	r3, #3
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3338      	adds	r3, #56	; 0x38
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	333c      	adds	r3, #60	; 0x3c
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3340      	adds	r3, #64	; 0x40
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d3b9      	bcc.n	8001e72 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	e044      	b.n	8001f8e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f72:	7bfa      	ldrb	r2, [r7, #15]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d3b5      	bcc.n	8001f04 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	687e      	ldr	r6, [r7, #4]
 8001fa0:	466d      	mov	r5, sp
 8001fa2:	f106 0410 	add.w	r4, r6, #16
 8001fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	602b      	str	r3, [r5, #0]
 8001fae:	1d33      	adds	r3, r6, #4
 8001fb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb2:	6838      	ldr	r0, [r7, #0]
 8001fb4:	f002 fa3e 	bl	8004434 <USB_DevInit>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d005      	beq.n	8001fca <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00d      	b.n	8001fe6 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 fcbf 	bl	8006962 <USB_DevDisconnect>

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_PCD_Start+0x16>
 8002000:	2302      	movs	r3, #2
 8002002:	e016      	b.n	8002032 <HAL_PCD_Start+0x44>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f002 f9d3 	bl	80043bc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002016:	2101      	movs	r1, #1
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f006 fd30 	bl	8008a7e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f004 fc93 	bl	800694e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b088      	sub	sp, #32
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f004 fc95 	bl	8006976 <USB_ReadInterrupts>
 800204c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fb1b 	bl	8002694 <PCD_EP_ISR_Handler>

    return;
 800205e:	e119      	b.n	8002294 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002066:	2b00      	cmp	r3, #0
 8002068:	d013      	beq.n	8002092 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002072:	b29a      	uxth	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800207c:	b292      	uxth	r2, r2
 800207e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f006 fb03 	bl	800868e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002088:	2100      	movs	r1, #0
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f905 	bl	800229a <HAL_PCD_SetAddress>

    return;
 8002090:	e100      	b.n	8002294 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00c      	beq.n	80020b6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020ae:	b292      	uxth	r2, r2
 80020b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020b4:	e0ee      	b.n	8002294 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00c      	beq.n	80020da <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020d2:	b292      	uxth	r2, r2
 80020d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80020d8:	e0dc      	b.n	8002294 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d027      	beq.n	8002134 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0204 	bic.w	r2, r2, #4
 80020f6:	b292      	uxth	r2, r2
 80020f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002104:	b29a      	uxth	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0208 	bic.w	r2, r2, #8
 800210e:	b292      	uxth	r2, r2
 8002110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f006 faf3 	bl	8008700 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002122:	b29a      	uxth	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800212c:	b292      	uxth	r2, r2
 800212e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002132:	e0af      	b.n	8002294 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8083 	beq.w	8002246 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002140:	2300      	movs	r3, #0
 8002142:	77fb      	strb	r3, [r7, #31]
 8002144:	e010      	b.n	8002168 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	7ffb      	ldrb	r3, [r7, #31]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	441a      	add	r2, r3
 8002152:	7ffb      	ldrb	r3, [r7, #31]
 8002154:	8812      	ldrh	r2, [r2, #0]
 8002156:	b292      	uxth	r2, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	3320      	adds	r3, #32
 800215c:	443b      	add	r3, r7
 800215e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002162:	7ffb      	ldrb	r3, [r7, #31]
 8002164:	3301      	adds	r3, #1
 8002166:	77fb      	strb	r3, [r7, #31]
 8002168:	7ffb      	ldrb	r3, [r7, #31]
 800216a:	2b07      	cmp	r3, #7
 800216c:	d9eb      	bls.n	8002146 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002176:	b29a      	uxth	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0201 	orr.w	r2, r2, #1
 8002180:	b292      	uxth	r2, r2
 8002182:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800218e:	b29a      	uxth	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	b292      	uxth	r2, r2
 800219a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800219e:	bf00      	nop
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f6      	beq.n	80021a0 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c4:	b292      	uxth	r2, r2
 80021c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80021ca:	2300      	movs	r3, #0
 80021cc:	77fb      	strb	r3, [r7, #31]
 80021ce:	e00f      	b.n	80021f0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80021d0:	7ffb      	ldrb	r3, [r7, #31]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	4611      	mov	r1, r2
 80021d8:	7ffa      	ldrb	r2, [r7, #31]
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	440a      	add	r2, r1
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	3320      	adds	r3, #32
 80021e2:	443b      	add	r3, r7
 80021e4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80021e8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80021ea:	7ffb      	ldrb	r3, [r7, #31]
 80021ec:	3301      	adds	r3, #1
 80021ee:	77fb      	strb	r3, [r7, #31]
 80021f0:	7ffb      	ldrb	r3, [r7, #31]
 80021f2:	2b07      	cmp	r3, #7
 80021f4:	d9ec      	bls.n	80021d0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021fe:	b29a      	uxth	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0208 	orr.w	r2, r2, #8
 8002208:	b292      	uxth	r2, r2
 800220a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002216:	b29a      	uxth	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002220:	b292      	uxth	r2, r2
 8002222:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800222e:	b29a      	uxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0204 	orr.w	r2, r2, #4
 8002238:	b292      	uxth	r2, r2
 800223a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f006 fa44 	bl	80086cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002244:	e026      	b.n	8002294 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00f      	beq.n	8002270 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002258:	b29a      	uxth	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002262:	b292      	uxth	r2, r2
 8002264:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f006 fa02 	bl	8008672 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800226e:	e011      	b.n	8002294 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00c      	beq.n	8002294 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002282:	b29a      	uxth	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800228c:	b292      	uxth	r2, r2
 800228e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002292:	bf00      	nop
  }
}
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_PCD_SetAddress+0x1a>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e013      	b.n	80022dc <HAL_PCD_SetAddress+0x42>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	4611      	mov	r1, r2
 80022cc:	4618      	mov	r0, r3
 80022ce:	f004 fb2b 	bl	8006928 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	4608      	mov	r0, r1
 80022ee:	4611      	mov	r1, r2
 80022f0:	461a      	mov	r2, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	70fb      	strb	r3, [r7, #3]
 80022f6:	460b      	mov	r3, r1
 80022f8:	803b      	strh	r3, [r7, #0]
 80022fa:	4613      	mov	r3, r2
 80022fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002302:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002306:	2b00      	cmp	r3, #0
 8002308:	da0e      	bge.n	8002328 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	705a      	strb	r2, [r3, #1]
 8002326:	e00e      	b.n	8002346 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	f003 0207 	and.w	r2, r3, #7
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	b2da      	uxtb	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002352:	883a      	ldrh	r2, [r7, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	78ba      	ldrb	r2, [r7, #2]
 800235c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800235e:	78bb      	ldrb	r3, [r7, #2]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d102      	bne.n	800236a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_PCD_EP_Open+0x94>
 8002374:	2302      	movs	r3, #2
 8002376:	e00e      	b.n	8002396 <HAL_PCD_EP_Open+0xb2>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68f9      	ldr	r1, [r7, #12]
 8002386:	4618      	mov	r0, r3
 8002388:	f002 f874 	bl	8004474 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002394:	7afb      	ldrb	r3, [r7, #11]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	460b      	mov	r3, r1
 80023a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	da0e      	bge.n	80023d0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2201      	movs	r2, #1
 80023cc:	705a      	strb	r2, [r3, #1]
 80023ce:	e00e      	b.n	80023ee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	f003 0207 	and.w	r2, r3, #7
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_PCD_EP_Close+0x6a>
 8002404:	2302      	movs	r3, #2
 8002406:	e00e      	b.n	8002426 <HAL_PCD_EP_Close+0x88>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68f9      	ldr	r1, [r7, #12]
 8002416:	4618      	mov	r0, r3
 8002418:	f002 fbec 	bl	8004bf4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	603b      	str	r3, [r7, #0]
 800243a:	460b      	mov	r3, r1
 800243c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800243e:	7afb      	ldrb	r3, [r7, #11]
 8002440:	f003 0207 	and.w	r2, r3, #7
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2200      	movs	r2, #0
 8002466:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2200      	movs	r2, #0
 800246c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800246e:	7afb      	ldrb	r3, [r7, #11]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	b2da      	uxtb	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6979      	ldr	r1, [r7, #20]
 8002480:	4618      	mov	r0, r3
 8002482:	f002 fda3 	bl	8004fcc <USB_EPStartXfer>

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	460b      	mov	r3, r1
 800249a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	f003 0207 	and.w	r2, r3, #7
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr

080024be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	460b      	mov	r3, r1
 80024cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ce:	7afb      	ldrb	r3, [r7, #11]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4413      	add	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2200      	movs	r2, #0
 8002502:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2201      	movs	r2, #1
 8002508:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800250a:	7afb      	ldrb	r3, [r7, #11]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	b2da      	uxtb	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6979      	ldr	r1, [r7, #20]
 800251c:	4618      	mov	r0, r3
 800251e:	f002 fd55 	bl	8004fcc <USB_EPStartXfer>

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	f003 0207 	and.w	r2, r3, #7
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	429a      	cmp	r2, r3
 8002544:	d901      	bls.n	800254a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e04c      	b.n	80025e4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800254a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800254e:	2b00      	cmp	r3, #0
 8002550:	da0e      	bge.n	8002570 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	705a      	strb	r2, [r3, #1]
 800256e:	e00c      	b.n	800258a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	b2da      	uxtb	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_PCD_EP_SetStall+0x7e>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e01c      	b.n	80025e4 <HAL_PCD_EP_SetStall+0xb8>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f004 f8b8 	bl	800672e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d108      	bne.n	80025da <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80025d2:	4619      	mov	r1, r3
 80025d4:	4610      	mov	r0, r2
 80025d6:	f004 f9dd 	bl	8006994 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	f003 020f 	and.w	r2, r3, #15
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	429a      	cmp	r2, r3
 8002604:	d901      	bls.n	800260a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e040      	b.n	800268c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800260a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800260e:	2b00      	cmp	r3, #0
 8002610:	da0e      	bge.n	8002630 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	4413      	add	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	705a      	strb	r2, [r3, #1]
 800262e:	e00e      	b.n	800264e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	f003 0207 	and.w	r2, r3, #7
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	b2da      	uxtb	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_PCD_EP_ClrStall+0x82>
 800266a:	2302      	movs	r3, #2
 800266c:	e00e      	b.n	800268c <HAL_PCD_EP_ClrStall+0xa0>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68f9      	ldr	r1, [r7, #12]
 800267c:	4618      	mov	r0, r3
 800267e:	f004 f8a6 	bl	80067ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b096      	sub	sp, #88	; 0x58
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800269c:	e3bf      	b.n	8002e1e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80026aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80026b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f040 8179 	bne.w	80029b4 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80026c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d152      	bne.n	8002774 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80026da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026de:	81fb      	strh	r3, [r7, #14]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	89fb      	ldrh	r3, [r7, #14]
 80026e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3328      	adds	r3, #40	; 0x28
 80026f6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	3302      	adds	r3, #2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	4413      	add	r3, r2
 8002716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002722:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	441a      	add	r2, r3
 800272e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002730:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002732:	2100      	movs	r1, #0
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f005 ff82 	bl	800863e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 836b 	beq.w	8002e1e <PCD_EP_ISR_Handler+0x78a>
 8002748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f040 8366 	bne.w	8002e1e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800275e:	b2da      	uxtb	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	b292      	uxth	r2, r2
 8002766:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002772:	e354      	b.n	8002e1e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800277a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002786:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800278a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800278e:	2b00      	cmp	r3, #0
 8002790:	d034      	beq.n	80027fc <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800279a:	b29b      	uxth	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	3306      	adds	r3, #6
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6812      	ldr	r2, [r2, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80027c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80027cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f004 f92f 	bl	8006a34 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29a      	uxth	r2, r3
 80027de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027e2:	4013      	ands	r3, r2
 80027e4:	823b      	strh	r3, [r7, #16]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	8a3a      	ldrh	r2, [r7, #16]
 80027ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027f0:	b292      	uxth	r2, r2
 80027f2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f005 fef5 	bl	80085e4 <HAL_PCD_SetupStageCallback>
 80027fa:	e310      	b.n	8002e1e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027fc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002800:	2b00      	cmp	r3, #0
 8002802:	f280 830c 	bge.w	8002e1e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29a      	uxth	r2, r3
 800280e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002812:	4013      	ands	r3, r2
 8002814:	83fb      	strh	r3, [r7, #30]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	8bfa      	ldrh	r2, [r7, #30]
 800281c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002820:	b292      	uxth	r2, r2
 8002822:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800282c:	b29b      	uxth	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	3306      	adds	r3, #6
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	4413      	add	r3, r2
 8002842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800284c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d019      	beq.n	800288c <PCD_EP_ISR_Handler+0x1f8>
 8002858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d015      	beq.n	800288c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002866:	6959      	ldr	r1, [r3, #20]
 8002868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800286c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002870:	b29b      	uxth	r3, r3
 8002872:	f004 f8df 	bl	8006a34 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	441a      	add	r2, r3
 8002880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002882:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002884:	2100      	movs	r1, #0
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f005 febe 	bl	8008608 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002896:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800289a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 82bd 	bne.w	8002e1e <PCD_EP_ISR_Handler+0x78a>
 80028a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80028a8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80028ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028b0:	f000 82b5 	beq.w	8002e1e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	61bb      	str	r3, [r7, #24]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	4413      	add	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028de:	b29a      	uxth	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	801a      	strh	r2, [r3, #0]
 80028e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b3e      	cmp	r3, #62	; 0x3e
 80028ea:	d91d      	bls.n	8002928 <PCD_EP_ISR_Handler+0x294>
 80028ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	647b      	str	r3, [r7, #68]	; 0x44
 80028f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <PCD_EP_ISR_Handler+0x272>
 8002900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002902:	3b01      	subs	r3, #1
 8002904:	647b      	str	r3, [r7, #68]	; 0x44
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29a      	uxth	r2, r3
 800290c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800290e:	b29b      	uxth	r3, r3
 8002910:	029b      	lsls	r3, r3, #10
 8002912:	b29b      	uxth	r3, r3
 8002914:	4313      	orrs	r3, r2
 8002916:	b29b      	uxth	r3, r3
 8002918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002920:	b29a      	uxth	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	801a      	strh	r2, [r3, #0]
 8002926:	e026      	b.n	8002976 <PCD_EP_ISR_Handler+0x2e2>
 8002928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <PCD_EP_ISR_Handler+0x2b2>
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800293a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800293e:	b29a      	uxth	r2, r3
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	801a      	strh	r2, [r3, #0]
 8002944:	e017      	b.n	8002976 <PCD_EP_ISR_Handler+0x2e2>
 8002946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	085b      	lsrs	r3, r3, #1
 800294c:	647b      	str	r3, [r7, #68]	; 0x44
 800294e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <PCD_EP_ISR_Handler+0x2cc>
 800295a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800295c:	3301      	adds	r3, #1
 800295e:	647b      	str	r3, [r7, #68]	; 0x44
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	b29a      	uxth	r2, r3
 8002966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002968:	b29b      	uxth	r3, r3
 800296a:	029b      	lsls	r3, r3, #10
 800296c:	b29b      	uxth	r3, r3
 800296e:	4313      	orrs	r3, r2
 8002970:	b29a      	uxth	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002986:	827b      	strh	r3, [r7, #18]
 8002988:	8a7b      	ldrh	r3, [r7, #18]
 800298a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800298e:	827b      	strh	r3, [r7, #18]
 8002990:	8a7b      	ldrh	r3, [r7, #18]
 8002992:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002996:	827b      	strh	r3, [r7, #18]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	8a7b      	ldrh	r3, [r7, #18]
 800299e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	8013      	strh	r3, [r2, #0]
 80029b2:	e234      	b.n	8002e1e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029c8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f280 80fc 	bge.w	8002bca <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029e8:	4013      	ands	r3, r2
 80029ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002a00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a04:	b292      	uxth	r2, r2
 8002a06:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a08:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a20:	7b1b      	ldrb	r3, [r3, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d125      	bne.n	8002a72 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3306      	adds	r3, #6
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a4e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002a52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8092 	beq.w	8002b80 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a62:	6959      	ldr	r1, [r3, #20]
 8002a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a66:	88da      	ldrh	r2, [r3, #6]
 8002a68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002a6c:	f003 ffe2 	bl	8006a34 <USB_ReadPMA>
 8002a70:	e086      	b.n	8002b80 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a74:	78db      	ldrb	r3, [r3, #3]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d10a      	bne.n	8002a90 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002a7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002a7e:	461a      	mov	r2, r3
 8002a80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f9d9 	bl	8002e3a <HAL_PCD_EP_DB_Receive>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002a8e:	e077      	b.n	8002b80 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	461a      	mov	r2, r3
 8002a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aaa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	441a      	add	r2, r3
 8002abc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002acc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d024      	beq.n	8002b38 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	4413      	add	r3, r2
 8002b02:	3302      	adds	r3, #2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b16:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002b1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d02e      	beq.n	8002b80 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b28:	6959      	ldr	r1, [r3, #20]
 8002b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2c:	891a      	ldrh	r2, [r3, #8]
 8002b2e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b32:	f003 ff7f 	bl	8006a34 <USB_ReadPMA>
 8002b36:	e023      	b.n	8002b80 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3306      	adds	r3, #6
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b60:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002b64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d009      	beq.n	8002b80 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b72:	6959      	ldr	r1, [r3, #20]
 8002b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b76:	895a      	ldrh	r2, [r3, #10]
 8002b78:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b7c:	f003 ff5a 	bl	8006a34 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b82:	69da      	ldr	r2, [r3, #28]
 8002b84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b88:	441a      	add	r2, r3
 8002b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002b96:	441a      	add	r2, r3
 8002b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <PCD_EP_ISR_Handler+0x51c>
 8002ba4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d206      	bcs.n	8002bbe <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f005 fd26 	bl	8008608 <HAL_PCD_DataOutStageCallback>
 8002bbc:	e005      	b.n	8002bca <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f002 fa01 	bl	8004fcc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002bca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8123 	beq.w	8002e1e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002bd8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	441a      	add	r2, r3
 8002c18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002c1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c2a:	78db      	ldrb	r3, [r3, #3]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 80a2 	bne.w	8002d76 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c34:	2200      	movs	r2, #0
 8002c36:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3a:	7b1b      	ldrb	r3, [r3, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8093 	beq.w	8002d68 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d046      	beq.n	8002cdc <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c50:	785b      	ldrb	r3, [r3, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d126      	bne.n	8002ca4 <PCD_EP_ISR_Handler+0x610>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	4413      	add	r3, r2
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	011a      	lsls	r2, r3, #4
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	4413      	add	r3, r2
 8002c78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c7c:	623b      	str	r3, [r7, #32]
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	801a      	strh	r2, [r3, #0]
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	801a      	strh	r2, [r3, #0]
 8002ca2:	e061      	b.n	8002d68 <PCD_EP_ISR_Handler+0x6d4>
 8002ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d15d      	bne.n	8002d68 <PCD_EP_ISR_Handler+0x6d4>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	4413      	add	r3, r2
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	011a      	lsls	r2, r3, #4
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	4413      	add	r3, r2
 8002cce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	801a      	strh	r2, [r3, #0]
 8002cda:	e045      	b.n	8002d68 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce4:	785b      	ldrb	r3, [r3, #1]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d126      	bne.n	8002d38 <PCD_EP_ISR_Handler+0x6a4>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfe:	4413      	add	r3, r2
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
 8002d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	011a      	lsls	r2, r3, #4
 8002d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d10:	633b      	str	r3, [r7, #48]	; 0x30
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	801a      	strh	r2, [r3, #0]
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	801a      	strh	r2, [r3, #0]
 8002d36:	e017      	b.n	8002d68 <PCD_EP_ISR_Handler+0x6d4>
 8002d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3a:	785b      	ldrb	r3, [r3, #1]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d113      	bne.n	8002d68 <PCD_EP_ISR_Handler+0x6d4>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4e:	4413      	add	r3, r2
 8002d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	011a      	lsls	r2, r3, #4
 8002d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d60:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d64:	2200      	movs	r2, #0
 8002d66:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f005 fc65 	bl	800863e <HAL_PCD_DataInStageCallback>
 8002d74:	e053      	b.n	8002e1e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002d76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d146      	bne.n	8002e10 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	3302      	adds	r3, #2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002daa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d907      	bls.n	8002dca <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002dc2:	1ad2      	subs	r2, r2, r3
 8002dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc6:	619a      	str	r2, [r3, #24]
 8002dc8:	e002      	b.n	8002dd0 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dcc:	2200      	movs	r2, #0
 8002dce:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f005 fc2d 	bl	800863e <HAL_PCD_DataInStageCallback>
 8002de4:	e01b      	b.n	8002e1e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002dee:	441a      	add	r2, r3
 8002df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002dfc:	441a      	add	r2, r3
 8002dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e00:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f002 f8df 	bl	8004fcc <USB_EPStartXfer>
 8002e0e:	e006      	b.n	8002e1e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e14:	461a      	mov	r2, r3
 8002e16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f91b 	bl	8003054 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	b21b      	sxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f6ff ac37 	blt.w	800269e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3758      	adds	r7, #88	; 0x58
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b088      	sub	sp, #32
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	4613      	mov	r3, r2
 8002e46:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d07e      	beq.n	8002f50 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	3302      	adds	r3, #2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e7a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	699a      	ldr	r2, [r3, #24]
 8002e80:	8b7b      	ldrh	r3, [r7, #26]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d306      	bcc.n	8002e94 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	8b7b      	ldrh	r3, [r7, #26]
 8002e8c:	1ad2      	subs	r2, r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	619a      	str	r2, [r3, #24]
 8002e92:	e002      	b.n	8002e9a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2200      	movs	r2, #0
 8002e98:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d123      	bne.n	8002eea <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebc:	833b      	strh	r3, [r7, #24]
 8002ebe:	8b3b      	ldrh	r3, [r7, #24]
 8002ec0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ec4:	833b      	strh	r3, [r7, #24]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	441a      	add	r2, r3
 8002ed4:	8b3b      	ldrh	r3, [r7, #24]
 8002ed6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d01f      	beq.n	8002f34 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0e:	82fb      	strh	r3, [r7, #22]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	8afb      	ldrh	r3, [r7, #22]
 8002f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f34:	8b7b      	ldrh	r3, [r7, #26]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8087 	beq.w	800304a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	6959      	ldr	r1, [r3, #20]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	891a      	ldrh	r2, [r3, #8]
 8002f48:	8b7b      	ldrh	r3, [r7, #26]
 8002f4a:	f003 fd73 	bl	8006a34 <USB_ReadPMA>
 8002f4e:	e07c      	b.n	800304a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4413      	add	r3, r2
 8002f64:	3306      	adds	r3, #6
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f78:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	8b7b      	ldrh	r3, [r7, #26]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d306      	bcc.n	8002f92 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	699a      	ldr	r2, [r3, #24]
 8002f88:	8b7b      	ldrh	r3, [r7, #26]
 8002f8a:	1ad2      	subs	r2, r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	619a      	str	r2, [r3, #24]
 8002f90:	e002      	b.n	8002f98 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2200      	movs	r2, #0
 8002f96:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d123      	bne.n	8002fe8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fba:	83fb      	strh	r3, [r7, #30]
 8002fbc:	8bfb      	ldrh	r3, [r7, #30]
 8002fbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fc2:	83fb      	strh	r3, [r7, #30]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	441a      	add	r2, r3
 8002fd2:	8bfb      	ldrh	r3, [r7, #30]
 8002fd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d11f      	bne.n	8003032 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300c:	83bb      	strh	r3, [r7, #28]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	441a      	add	r2, r3
 800301c:	8bbb      	ldrh	r3, [r7, #28]
 800301e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800302a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800302e:	b29b      	uxth	r3, r3
 8003030:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003032:	8b7b      	ldrh	r3, [r7, #26]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	6959      	ldr	r1, [r3, #20]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	895a      	ldrh	r2, [r3, #10]
 8003044:	8b7b      	ldrh	r3, [r7, #26]
 8003046:	f003 fcf5 	bl	8006a34 <USB_ReadPMA>
    }
  }

  return count;
 800304a:	8b7b      	ldrh	r3, [r7, #26]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3720      	adds	r7, #32
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b0a4      	sub	sp, #144	; 0x90
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	4613      	mov	r3, r2
 8003060:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 81dd 	beq.w	8003428 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003076:	b29b      	uxth	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	3302      	adds	r3, #2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	6812      	ldr	r2, [r2, #0]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003096:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d907      	bls.n	80030b6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030ae:	1ad2      	subs	r2, r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	619a      	str	r2, [r3, #24]
 80030b4:	e002      	b.n	80030bc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2200      	movs	r2, #0
 80030ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f040 80b9 	bne.w	8003238 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d126      	bne.n	800311c <HAL_PCD_EP_DB_Transmit+0xc8>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030dc:	b29b      	uxth	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e2:	4413      	add	r3, r2
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	011a      	lsls	r2, r3, #4
 80030ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ee:	4413      	add	r3, r2
 80030f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003100:	b29a      	uxth	r2, r3
 8003102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003104:	801a      	strh	r2, [r3, #0]
 8003106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003114:	b29a      	uxth	r2, r3
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	801a      	strh	r2, [r3, #0]
 800311a:	e01a      	b.n	8003152 <HAL_PCD_EP_DB_Transmit+0xfe>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	785b      	ldrb	r3, [r3, #1]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d116      	bne.n	8003152 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003132:	b29b      	uxth	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003138:	4413      	add	r3, r2
 800313a:	637b      	str	r3, [r7, #52]	; 0x34
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	011a      	lsls	r2, r3, #4
 8003142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003144:	4413      	add	r3, r2
 8003146:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800314a:	633b      	str	r3, [r7, #48]	; 0x30
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	2200      	movs	r2, #0
 8003150:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	785b      	ldrb	r3, [r3, #1]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d126      	bne.n	80031ae <HAL_PCD_EP_DB_Transmit+0x15a>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800316e:	b29b      	uxth	r3, r3
 8003170:	461a      	mov	r2, r3
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	4413      	add	r3, r2
 8003176:	61fb      	str	r3, [r7, #28]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	011a      	lsls	r2, r3, #4
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	4413      	add	r3, r2
 8003182:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003192:	b29a      	uxth	r2, r3
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	801a      	strh	r2, [r3, #0]
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	b29b      	uxth	r3, r3
 800319e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	801a      	strh	r2, [r3, #0]
 80031ac:	e017      	b.n	80031de <HAL_PCD_EP_DB_Transmit+0x18a>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	785b      	ldrb	r3, [r3, #1]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d113      	bne.n	80031de <HAL_PCD_EP_DB_Transmit+0x18a>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	4413      	add	r3, r2
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	011a      	lsls	r2, r3, #4
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	4413      	add	r3, r2
 80031d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031d6:	623b      	str	r3, [r7, #32]
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	2200      	movs	r2, #0
 80031dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	4619      	mov	r1, r3
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f005 fa2a 	bl	800863e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 82fc 	beq.w	80037ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800320c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003210:	82fb      	strh	r3, [r7, #22]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	441a      	add	r2, r3
 8003220:	8afb      	ldrh	r3, [r7, #22]
 8003222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800322a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800322e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003232:	b29b      	uxth	r3, r3
 8003234:	8013      	strh	r3, [r2, #0]
 8003236:	e2da      	b.n	80037ee <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d021      	beq.n	8003286 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	441a      	add	r2, r3
 800326e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800327a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800327e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003282:	b29b      	uxth	r3, r3
 8003284:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800328c:	2b01      	cmp	r3, #1
 800328e:	f040 82ae 	bne.w	80037ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800329a:	441a      	add	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032a8:	441a      	add	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	6a1a      	ldr	r2, [r3, #32]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d30b      	bcc.n	80032d2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	6a1a      	ldr	r2, [r3, #32]
 80032c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ca:	1ad2      	subs	r2, r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	621a      	str	r2, [r3, #32]
 80032d0:	e017      	b.n	8003302 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d108      	bne.n	80032ec <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80032da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80032de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032ea:	e00a      	b.n	8003302 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2200      	movs	r2, #0
 8003300:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	785b      	ldrb	r3, [r3, #1]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d165      	bne.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x382>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003318:	b29b      	uxth	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331e:	4413      	add	r3, r2
 8003320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	011a      	lsls	r2, r3, #4
 8003328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332a:	4413      	add	r3, r2
 800332c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003330:	63bb      	str	r3, [r7, #56]	; 0x38
 8003332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800333c:	b29a      	uxth	r2, r3
 800333e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003340:	801a      	strh	r2, [r3, #0]
 8003342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003346:	2b3e      	cmp	r3, #62	; 0x3e
 8003348:	d91d      	bls.n	8003386 <HAL_PCD_EP_DB_Transmit+0x332>
 800334a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	64bb      	str	r3, [r7, #72]	; 0x48
 8003352:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	2b00      	cmp	r3, #0
 800335c:	d102      	bne.n	8003364 <HAL_PCD_EP_DB_Transmit+0x310>
 800335e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003360:	3b01      	subs	r3, #1
 8003362:	64bb      	str	r3, [r7, #72]	; 0x48
 8003364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	b29a      	uxth	r2, r3
 800336a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800336c:	b29b      	uxth	r3, r3
 800336e:	029b      	lsls	r3, r3, #10
 8003370:	b29b      	uxth	r3, r3
 8003372:	4313      	orrs	r3, r2
 8003374:	b29b      	uxth	r3, r3
 8003376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800337a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800337e:	b29a      	uxth	r2, r3
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	801a      	strh	r2, [r3, #0]
 8003384:	e044      	b.n	8003410 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003386:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <HAL_PCD_EP_DB_Transmit+0x350>
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800339c:	b29a      	uxth	r2, r3
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	801a      	strh	r2, [r3, #0]
 80033a2:	e035      	b.n	8003410 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80033a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_PCD_EP_DB_Transmit+0x36a>
 80033b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ba:	3301      	adds	r3, #1
 80033bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	029b      	lsls	r3, r3, #10
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	4313      	orrs	r3, r2
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	e01c      	b.n	8003410 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	785b      	ldrb	r3, [r3, #1]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d118      	bne.n	8003410 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	647b      	str	r3, [r7, #68]	; 0x44
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	461a      	mov	r2, r3
 80033f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f2:	4413      	add	r3, r2
 80033f4:	647b      	str	r3, [r7, #68]	; 0x44
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	011a      	lsls	r2, r3, #4
 80033fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033fe:	4413      	add	r3, r2
 8003400:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003404:	643b      	str	r3, [r7, #64]	; 0x40
 8003406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800340a:	b29a      	uxth	r2, r3
 800340c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800340e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	6959      	ldr	r1, [r3, #20]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	891a      	ldrh	r2, [r3, #8]
 800341c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003420:	b29b      	uxth	r3, r3
 8003422:	f003 fac2 	bl	80069aa <USB_WritePMA>
 8003426:	e1e2      	b.n	80037ee <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003430:	b29b      	uxth	r3, r3
 8003432:	461a      	mov	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	3306      	adds	r3, #6
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003450:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	699a      	ldr	r2, [r3, #24]
 8003458:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800345c:	429a      	cmp	r2, r3
 800345e:	d307      	bcc.n	8003470 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	699a      	ldr	r2, [r3, #24]
 8003464:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003468:	1ad2      	subs	r2, r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	619a      	str	r2, [r3, #24]
 800346e:	e002      	b.n	8003476 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2200      	movs	r2, #0
 8003474:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	f040 80c0 	bne.w	8003600 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	785b      	ldrb	r3, [r3, #1]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d126      	bne.n	80034d6 <HAL_PCD_EP_DB_Transmit+0x482>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003496:	b29b      	uxth	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800349c:	4413      	add	r3, r2
 800349e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	011a      	lsls	r2, r3, #4
 80034a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034a8:	4413      	add	r3, r2
 80034aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80034ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80034b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034be:	801a      	strh	r2, [r3, #0]
 80034c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d2:	801a      	strh	r2, [r3, #0]
 80034d4:	e01a      	b.n	800350c <HAL_PCD_EP_DB_Transmit+0x4b8>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	785b      	ldrb	r3, [r3, #1]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d116      	bne.n	800350c <HAL_PCD_EP_DB_Transmit+0x4b8>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	667b      	str	r3, [r7, #100]	; 0x64
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034f2:	4413      	add	r3, r2
 80034f4:	667b      	str	r3, [r7, #100]	; 0x64
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	011a      	lsls	r2, r3, #4
 80034fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034fe:	4413      	add	r3, r2
 8003500:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003504:	663b      	str	r3, [r7, #96]	; 0x60
 8003506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003508:	2200      	movs	r2, #0
 800350a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	677b      	str	r3, [r7, #116]	; 0x74
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	785b      	ldrb	r3, [r3, #1]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d12b      	bne.n	8003572 <HAL_PCD_EP_DB_Transmit+0x51e>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003528:	b29b      	uxth	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352e:	4413      	add	r3, r2
 8003530:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	011a      	lsls	r2, r3, #4
 8003538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353a:	4413      	add	r3, r2
 800353c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003540:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003544:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003550:	b29a      	uxth	r2, r3
 8003552:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003556:	801a      	strh	r2, [r3, #0]
 8003558:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003568:	b29a      	uxth	r2, r3
 800356a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800356e:	801a      	strh	r2, [r3, #0]
 8003570:	e017      	b.n	80035a2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	785b      	ldrb	r3, [r3, #1]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d113      	bne.n	80035a2 <HAL_PCD_EP_DB_Transmit+0x54e>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003588:	4413      	add	r3, r2
 800358a:	677b      	str	r3, [r7, #116]	; 0x74
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	011a      	lsls	r2, r3, #4
 8003592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003594:	4413      	add	r3, r2
 8003596:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800359a:	673b      	str	r3, [r7, #112]	; 0x70
 800359c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800359e:	2200      	movs	r2, #0
 80035a0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	4619      	mov	r1, r3
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f005 f848 	bl	800863e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f040 811a 	bne.w	80037ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	461a      	mov	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	441a      	add	r2, r3
 80035e6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80035ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	8013      	strh	r3, [r2, #0]
 80035fe:	e0f6      	b.n	80037ee <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003600:	88fb      	ldrh	r3, [r7, #6]
 8003602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d121      	bne.n	800364e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003624:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	461a      	mov	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	441a      	add	r2, r3
 8003636:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800363a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800363e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800364a:	b29b      	uxth	r3, r3
 800364c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003654:	2b01      	cmp	r3, #1
 8003656:	f040 80ca 	bne.w	80037ee <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003662:	441a      	add	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003670:	441a      	add	r2, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	6a1a      	ldr	r2, [r3, #32]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	429a      	cmp	r2, r3
 8003680:	d30b      	bcc.n	800369a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	6a1a      	ldr	r2, [r3, #32]
 800368e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003692:	1ad2      	subs	r2, r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	621a      	str	r2, [r3, #32]
 8003698:	e017      	b.n	80036ca <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d108      	bne.n	80036b4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80036a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80036a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036b2:	e00a      	b.n	80036ca <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2200      	movs	r2, #0
 80036c0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	657b      	str	r3, [r7, #84]	; 0x54
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	785b      	ldrb	r3, [r3, #1]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d165      	bne.n	80037a4 <HAL_PCD_EP_DB_Transmit+0x750>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ec:	4413      	add	r3, r2
 80036ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	011a      	lsls	r2, r3, #4
 80036f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036f8:	4413      	add	r3, r2
 80036fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003700:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	b29b      	uxth	r3, r3
 8003706:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800370a:	b29a      	uxth	r2, r3
 800370c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800370e:	801a      	strh	r2, [r3, #0]
 8003710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003714:	2b3e      	cmp	r3, #62	; 0x3e
 8003716:	d91d      	bls.n	8003754 <HAL_PCD_EP_DB_Transmit+0x700>
 8003718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800371c:	095b      	lsrs	r3, r3, #5
 800371e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003720:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <HAL_PCD_EP_DB_Transmit+0x6de>
 800372c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800372e:	3b01      	subs	r3, #1
 8003730:	66bb      	str	r3, [r7, #104]	; 0x68
 8003732:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	b29a      	uxth	r2, r3
 8003738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800373a:	b29b      	uxth	r3, r3
 800373c:	029b      	lsls	r3, r3, #10
 800373e:	b29b      	uxth	r3, r3
 8003740:	4313      	orrs	r3, r2
 8003742:	b29b      	uxth	r3, r3
 8003744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800374c:	b29a      	uxth	r2, r3
 800374e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003750:	801a      	strh	r2, [r3, #0]
 8003752:	e041      	b.n	80037d8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003754:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <HAL_PCD_EP_DB_Transmit+0x71e>
 800375c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	b29b      	uxth	r3, r3
 8003762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800376a:	b29a      	uxth	r2, r3
 800376c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800376e:	801a      	strh	r2, [r3, #0]
 8003770:	e032      	b.n	80037d8 <HAL_PCD_EP_DB_Transmit+0x784>
 8003772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003776:	085b      	lsrs	r3, r3, #1
 8003778:	66bb      	str	r3, [r7, #104]	; 0x68
 800377a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_PCD_EP_DB_Transmit+0x738>
 8003786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003788:	3301      	adds	r3, #1
 800378a:	66bb      	str	r3, [r7, #104]	; 0x68
 800378c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29a      	uxth	r2, r3
 8003792:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003794:	b29b      	uxth	r3, r3
 8003796:	029b      	lsls	r3, r3, #10
 8003798:	b29b      	uxth	r3, r3
 800379a:	4313      	orrs	r3, r2
 800379c:	b29a      	uxth	r2, r3
 800379e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037a0:	801a      	strh	r2, [r3, #0]
 80037a2:	e019      	b.n	80037d8 <HAL_PCD_EP_DB_Transmit+0x784>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d115      	bne.n	80037d8 <HAL_PCD_EP_DB_Transmit+0x784>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	461a      	mov	r2, r3
 80037b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ba:	4413      	add	r3, r2
 80037bc:	657b      	str	r3, [r7, #84]	; 0x54
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	011a      	lsls	r2, r3, #4
 80037c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c6:	4413      	add	r3, r2
 80037c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80037cc:	653b      	str	r3, [r7, #80]	; 0x50
 80037ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	6959      	ldr	r1, [r3, #20]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	895a      	ldrh	r2, [r3, #10]
 80037e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	f003 f8de 	bl	80069aa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003808:	82bb      	strh	r3, [r7, #20]
 800380a:	8abb      	ldrh	r3, [r7, #20]
 800380c:	f083 0310 	eor.w	r3, r3, #16
 8003810:	82bb      	strh	r3, [r7, #20]
 8003812:	8abb      	ldrh	r3, [r7, #20]
 8003814:	f083 0320 	eor.w	r3, r3, #32
 8003818:	82bb      	strh	r3, [r7, #20]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	441a      	add	r2, r3
 8003828:	8abb      	ldrh	r3, [r7, #20]
 800382a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800382e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383a:	b29b      	uxth	r3, r3
 800383c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3790      	adds	r7, #144	; 0x90
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	460b      	mov	r3, r1
 8003854:	817b      	strh	r3, [r7, #10]
 8003856:	4613      	mov	r3, r2
 8003858:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800385a:	897b      	ldrh	r3, [r7, #10]
 800385c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00b      	beq.n	800387e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003866:	897b      	ldrh	r3, [r7, #10]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4413      	add	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e009      	b.n	8003892 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800387e:	897a      	ldrh	r2, [r7, #10]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003892:	893b      	ldrh	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d107      	bne.n	80038a8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2200      	movs	r2, #0
 800389c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	80da      	strh	r2, [r3, #6]
 80038a6:	e00b      	b.n	80038c0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2201      	movs	r2, #1
 80038ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e272      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8087 	beq.w	80039fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038ec:	4b92      	ldr	r3, [pc, #584]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 030c 	and.w	r3, r3, #12
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d00c      	beq.n	8003912 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038f8:	4b8f      	ldr	r3, [pc, #572]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 030c 	and.w	r3, r3, #12
 8003900:	2b08      	cmp	r3, #8
 8003902:	d112      	bne.n	800392a <HAL_RCC_OscConfig+0x5e>
 8003904:	4b8c      	ldr	r3, [pc, #560]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003910:	d10b      	bne.n	800392a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003912:	4b89      	ldr	r3, [pc, #548]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d06c      	beq.n	80039f8 <HAL_RCC_OscConfig+0x12c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d168      	bne.n	80039f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e24c      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003932:	d106      	bne.n	8003942 <HAL_RCC_OscConfig+0x76>
 8003934:	4b80      	ldr	r3, [pc, #512]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a7f      	ldr	r2, [pc, #508]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 800393a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	e02e      	b.n	80039a0 <HAL_RCC_OscConfig+0xd4>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10c      	bne.n	8003964 <HAL_RCC_OscConfig+0x98>
 800394a:	4b7b      	ldr	r3, [pc, #492]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a7a      	ldr	r2, [pc, #488]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b78      	ldr	r3, [pc, #480]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a77      	ldr	r2, [pc, #476]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 800395c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	e01d      	b.n	80039a0 <HAL_RCC_OscConfig+0xd4>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0xbc>
 800396e:	4b72      	ldr	r3, [pc, #456]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a71      	ldr	r2, [pc, #452]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	4b6f      	ldr	r3, [pc, #444]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a6e      	ldr	r2, [pc, #440]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	e00b      	b.n	80039a0 <HAL_RCC_OscConfig+0xd4>
 8003988:	4b6b      	ldr	r3, [pc, #428]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a6a      	ldr	r2, [pc, #424]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 800398e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	4b68      	ldr	r3, [pc, #416]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a67      	ldr	r2, [pc, #412]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 800399a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800399e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d013      	beq.n	80039d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fd fb36 	bl	8001018 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fd fb32 	bl	8001018 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e200      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c2:	4b5d      	ldr	r3, [pc, #372]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0xe4>
 80039ce:	e014      	b.n	80039fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7fd fb22 	bl	8001018 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d8:	f7fd fb1e 	bl	8001018 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e1ec      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ea:	4b53      	ldr	r3, [pc, #332]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x10c>
 80039f6:	e000      	b.n	80039fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d063      	beq.n	8003ace <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a06:	4b4c      	ldr	r3, [pc, #304]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a12:	4b49      	ldr	r3, [pc, #292]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d11c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x18c>
 8003a1e:	4b46      	ldr	r3, [pc, #280]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d116      	bne.n	8003a58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2a:	4b43      	ldr	r3, [pc, #268]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_RCC_OscConfig+0x176>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d001      	beq.n	8003a42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e1c0      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a42:	4b3d      	ldr	r3, [pc, #244]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4939      	ldr	r1, [pc, #228]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a56:	e03a      	b.n	8003ace <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d020      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a60:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a66:	f7fd fad7 	bl	8001018 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a6e:	f7fd fad3 	bl	8001018 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e1a1      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a80:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8c:	4b2a      	ldr	r3, [pc, #168]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4927      	ldr	r1, [pc, #156]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	600b      	str	r3, [r1, #0]
 8003aa0:	e015      	b.n	8003ace <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa2:	4b26      	ldr	r3, [pc, #152]	; (8003b3c <HAL_RCC_OscConfig+0x270>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa8:	f7fd fab6 	bl	8001018 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab0:	f7fd fab2 	bl	8001018 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e180      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d03a      	beq.n	8003b50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d019      	beq.n	8003b16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae8:	f7fd fa96 	bl	8001018 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af0:	f7fd fa92 	bl	8001018 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e160      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b02:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b0e:	2001      	movs	r0, #1
 8003b10:	f000 faba 	bl	8004088 <RCC_Delay>
 8003b14:	e01c      	b.n	8003b50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <HAL_RCC_OscConfig+0x274>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1c:	f7fd fa7c 	bl	8001018 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b22:	e00f      	b.n	8003b44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b24:	f7fd fa78 	bl	8001018 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d908      	bls.n	8003b44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e146      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	42420000 	.word	0x42420000
 8003b40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b44:	4b92      	ldr	r3, [pc, #584]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e9      	bne.n	8003b24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80a6 	beq.w	8003caa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b62:	4b8b      	ldr	r3, [pc, #556]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10d      	bne.n	8003b8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6e:	4b88      	ldr	r3, [pc, #544]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	4a87      	ldr	r2, [pc, #540]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b78:	61d3      	str	r3, [r2, #28]
 8003b7a:	4b85      	ldr	r3, [pc, #532]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8a:	4b82      	ldr	r3, [pc, #520]	; (8003d94 <HAL_RCC_OscConfig+0x4c8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d118      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b96:	4b7f      	ldr	r3, [pc, #508]	; (8003d94 <HAL_RCC_OscConfig+0x4c8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a7e      	ldr	r2, [pc, #504]	; (8003d94 <HAL_RCC_OscConfig+0x4c8>)
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba2:	f7fd fa39 	bl	8001018 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003baa:	f7fd fa35 	bl	8001018 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b64      	cmp	r3, #100	; 0x64
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e103      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	4b75      	ldr	r3, [pc, #468]	; (8003d94 <HAL_RCC_OscConfig+0x4c8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d106      	bne.n	8003bde <HAL_RCC_OscConfig+0x312>
 8003bd0:	4b6f      	ldr	r3, [pc, #444]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	4a6e      	ldr	r2, [pc, #440]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6213      	str	r3, [r2, #32]
 8003bdc:	e02d      	b.n	8003c3a <HAL_RCC_OscConfig+0x36e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x334>
 8003be6:	4b6a      	ldr	r3, [pc, #424]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	4a69      	ldr	r2, [pc, #420]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	6213      	str	r3, [r2, #32]
 8003bf2:	4b67      	ldr	r3, [pc, #412]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	4a66      	ldr	r2, [pc, #408]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	f023 0304 	bic.w	r3, r3, #4
 8003bfc:	6213      	str	r3, [r2, #32]
 8003bfe:	e01c      	b.n	8003c3a <HAL_RCC_OscConfig+0x36e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b05      	cmp	r3, #5
 8003c06:	d10c      	bne.n	8003c22 <HAL_RCC_OscConfig+0x356>
 8003c08:	4b61      	ldr	r3, [pc, #388]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	4a60      	ldr	r2, [pc, #384]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003c0e:	f043 0304 	orr.w	r3, r3, #4
 8003c12:	6213      	str	r3, [r2, #32]
 8003c14:	4b5e      	ldr	r3, [pc, #376]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	4a5d      	ldr	r2, [pc, #372]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	6213      	str	r3, [r2, #32]
 8003c20:	e00b      	b.n	8003c3a <HAL_RCC_OscConfig+0x36e>
 8003c22:	4b5b      	ldr	r3, [pc, #364]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	4a5a      	ldr	r2, [pc, #360]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	6213      	str	r3, [r2, #32]
 8003c2e:	4b58      	ldr	r3, [pc, #352]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	4a57      	ldr	r2, [pc, #348]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003c34:	f023 0304 	bic.w	r3, r3, #4
 8003c38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d015      	beq.n	8003c6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c42:	f7fd f9e9 	bl	8001018 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c48:	e00a      	b.n	8003c60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4a:	f7fd f9e5 	bl	8001018 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e0b1      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c60:	4b4b      	ldr	r3, [pc, #300]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0ee      	beq.n	8003c4a <HAL_RCC_OscConfig+0x37e>
 8003c6c:	e014      	b.n	8003c98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6e:	f7fd f9d3 	bl	8001018 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c74:	e00a      	b.n	8003c8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c76:	f7fd f9cf 	bl	8001018 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e09b      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8c:	4b40      	ldr	r3, [pc, #256]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1ee      	bne.n	8003c76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d105      	bne.n	8003caa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c9e:	4b3c      	ldr	r3, [pc, #240]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	4a3b      	ldr	r2, [pc, #236]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 8087 	beq.w	8003dc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cb4:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 030c 	and.w	r3, r3, #12
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d061      	beq.n	8003d84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d146      	bne.n	8003d56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc8:	4b33      	ldr	r3, [pc, #204]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cce:	f7fd f9a3 	bl	8001018 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd6:	f7fd f99f 	bl	8001018 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e06d      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce8:	4b29      	ldr	r3, [pc, #164]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f0      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfc:	d108      	bne.n	8003d10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cfe:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	4921      	ldr	r1, [pc, #132]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d10:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a19      	ldr	r1, [r3, #32]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	430b      	orrs	r3, r1
 8003d22:	491b      	ldr	r1, [pc, #108]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2e:	f7fd f973 	bl	8001018 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d36:	f7fd f96f 	bl	8001018 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e03d      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d48:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x46a>
 8003d54:	e035      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <HAL_RCC_OscConfig+0x4cc>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fd f95c 	bl	8001018 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fd f958 	bl	8001018 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e026      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_RCC_OscConfig+0x4c4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x498>
 8003d82:	e01e      	b.n	8003dc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d107      	bne.n	8003d9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e019      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40007000 	.word	0x40007000
 8003d98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_RCC_OscConfig+0x500>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d106      	bne.n	8003dbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000

08003dd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e0d0      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de4:	4b6a      	ldr	r3, [pc, #424]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d910      	bls.n	8003e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	4b67      	ldr	r3, [pc, #412]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 0207 	bic.w	r2, r3, #7
 8003dfa:	4965      	ldr	r1, [pc, #404]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e02:	4b63      	ldr	r3, [pc, #396]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d001      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0b8      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d020      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e2c:	4b59      	ldr	r3, [pc, #356]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4a58      	ldr	r2, [pc, #352]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e44:	4b53      	ldr	r3, [pc, #332]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4a52      	ldr	r2, [pc, #328]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e50:	4b50      	ldr	r3, [pc, #320]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	494d      	ldr	r1, [pc, #308]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d040      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	4b47      	ldr	r3, [pc, #284]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d115      	bne.n	8003eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e07f      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d107      	bne.n	8003e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8e:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e073      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9e:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e06b      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eae:	4b39      	ldr	r3, [pc, #228]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f023 0203 	bic.w	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4936      	ldr	r1, [pc, #216]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec0:	f7fd f8aa 	bl	8001018 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec8:	f7fd f8a6 	bl	8001018 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e053      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 020c 	and.w	r2, r3, #12
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d1eb      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d210      	bcs.n	8003f20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b24      	ldr	r3, [pc, #144]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 0207 	bic.w	r2, r3, #7
 8003f06:	4922      	ldr	r1, [pc, #136]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0e:	4b20      	ldr	r3, [pc, #128]	; (8003f90 <HAL_RCC_ClockConfig+0x1c0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e032      	b.n	8003f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f2c:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4916      	ldr	r1, [pc, #88]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f4a:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	490e      	ldr	r1, [pc, #56]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f5e:	f000 f821 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8003f62:	4602      	mov	r2, r0
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_RCC_ClockConfig+0x1c4>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	490a      	ldr	r1, [pc, #40]	; (8003f98 <HAL_RCC_ClockConfig+0x1c8>)
 8003f70:	5ccb      	ldrb	r3, [r1, r3]
 8003f72:	fa22 f303 	lsr.w	r3, r2, r3
 8003f76:	4a09      	ldr	r2, [pc, #36]	; (8003f9c <HAL_RCC_ClockConfig+0x1cc>)
 8003f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f7a:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <HAL_RCC_ClockConfig+0x1d0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fd f808 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40022000 	.word	0x40022000
 8003f94:	40021000 	.word	0x40021000
 8003f98:	080096b8 	.word	0x080096b8
 8003f9c:	20000000 	.word	0x20000000
 8003fa0:	20000004 	.word	0x20000004

08003fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fbe:	4b1e      	ldr	r3, [pc, #120]	; (8004038 <HAL_RCC_GetSysClockFreq+0x94>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d002      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x30>
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d003      	beq.n	8003fda <HAL_RCC_GetSysClockFreq+0x36>
 8003fd2:	e027      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fd4:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_RCC_GetSysClockFreq+0x98>)
 8003fd6:	613b      	str	r3, [r7, #16]
      break;
 8003fd8:	e027      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	0c9b      	lsrs	r3, r3, #18
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	4a17      	ldr	r2, [pc, #92]	; (8004040 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fe4:	5cd3      	ldrb	r3, [r2, r3]
 8003fe6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d010      	beq.n	8004014 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ff2:	4b11      	ldr	r3, [pc, #68]	; (8004038 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	0c5b      	lsrs	r3, r3, #17
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	4a11      	ldr	r2, [pc, #68]	; (8004044 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ffe:	5cd3      	ldrb	r3, [r2, r3]
 8004000:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a0d      	ldr	r2, [pc, #52]	; (800403c <HAL_RCC_GetSysClockFreq+0x98>)
 8004006:	fb03 f202 	mul.w	r2, r3, r2
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	e004      	b.n	800401e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a0c      	ldr	r2, [pc, #48]	; (8004048 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004018:	fb02 f303 	mul.w	r3, r2, r3
 800401c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	613b      	str	r3, [r7, #16]
      break;
 8004022:	e002      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <HAL_RCC_GetSysClockFreq+0x98>)
 8004026:	613b      	str	r3, [r7, #16]
      break;
 8004028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402a:	693b      	ldr	r3, [r7, #16]
}
 800402c:	4618      	mov	r0, r3
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	40021000 	.word	0x40021000
 800403c:	007a1200 	.word	0x007a1200
 8004040:	080096d0 	.word	0x080096d0
 8004044:	080096e0 	.word	0x080096e0
 8004048:	003d0900 	.word	0x003d0900

0800404c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004050:	4b02      	ldr	r3, [pc, #8]	; (800405c <HAL_RCC_GetHCLKFreq+0x10>)
 8004052:	681b      	ldr	r3, [r3, #0]
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	20000000 	.word	0x20000000

08004060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004064:	f7ff fff2 	bl	800404c <HAL_RCC_GetHCLKFreq>
 8004068:	4602      	mov	r2, r0
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	0adb      	lsrs	r3, r3, #11
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	4903      	ldr	r1, [pc, #12]	; (8004084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40021000 	.word	0x40021000
 8004084:	080096c8 	.word	0x080096c8

08004088 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004090:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <RCC_Delay+0x34>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <RCC_Delay+0x38>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	0a5b      	lsrs	r3, r3, #9
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	fb02 f303 	mul.w	r3, r2, r3
 80040a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040a4:	bf00      	nop
  }
  while (Delay --);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1e5a      	subs	r2, r3, #1
 80040aa:	60fa      	str	r2, [r7, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f9      	bne.n	80040a4 <RCC_Delay+0x1c>
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr
 80040bc:	20000000 	.word	0x20000000
 80040c0:	10624dd3 	.word	0x10624dd3

080040c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d07d      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80040e0:	2300      	movs	r3, #0
 80040e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040e4:	4b4f      	ldr	r3, [pc, #316]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10d      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f0:	4b4c      	ldr	r3, [pc, #304]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	4a4b      	ldr	r2, [pc, #300]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fa:	61d3      	str	r3, [r2, #28]
 80040fc:	4b49      	ldr	r3, [pc, #292]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004108:	2301      	movs	r3, #1
 800410a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410c:	4b46      	ldr	r3, [pc, #280]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d118      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004118:	4b43      	ldr	r3, [pc, #268]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a42      	ldr	r2, [pc, #264]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800411e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004122:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004124:	f7fc ff78 	bl	8001018 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412a:	e008      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800412c:	f7fc ff74 	bl	8001018 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	; 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e06d      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413e:	4b3a      	ldr	r3, [pc, #232]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800414a:	4b36      	ldr	r3, [pc, #216]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004152:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d02e      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	429a      	cmp	r2, r3
 8004166:	d027      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004168:	4b2e      	ldr	r3, [pc, #184]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004170:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004172:	4b2e      	ldr	r3, [pc, #184]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004178:	4b2c      	ldr	r3, [pc, #176]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800417e:	4a29      	ldr	r2, [pc, #164]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d014      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418e:	f7fc ff43 	bl	8001018 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004194:	e00a      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004196:	f7fc ff3f 	bl	8001018 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d901      	bls.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e036      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ac:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ee      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041b8:	4b1a      	ldr	r3, [pc, #104]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4917      	ldr	r1, [pc, #92]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d105      	bne.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d0:	4b14      	ldr	r3, [pc, #80]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	4a13      	ldr	r2, [pc, #76]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d008      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041e8:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	490b      	ldr	r1, [pc, #44]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004206:	4b07      	ldr	r3, [pc, #28]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	4904      	ldr	r1, [pc, #16]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004214:	4313      	orrs	r3, r2
 8004216:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40021000 	.word	0x40021000
 8004228:	40007000 	.word	0x40007000
 800422c:	42420440 	.word	0x42420440

08004230 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	2300      	movs	r3, #0
 8004242:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	2300      	movs	r3, #0
 800424a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b10      	cmp	r3, #16
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b10      	cmp	r3, #16
 8004256:	f200 808a 	bhi.w	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d045      	beq.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d075      	beq.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004266:	e082      	b.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004268:	4b46      	ldr	r3, [pc, #280]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800426e:	4b45      	ldr	r3, [pc, #276]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d07b      	beq.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	0c9b      	lsrs	r3, r3, #18
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	4a41      	ldr	r2, [pc, #260]	; (8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004284:	5cd3      	ldrb	r3, [r2, r3]
 8004286:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d015      	beq.n	80042be <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004292:	4b3c      	ldr	r3, [pc, #240]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	0c5b      	lsrs	r3, r3, #17
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	4a3b      	ldr	r2, [pc, #236]	; (800438c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800429e:	5cd3      	ldrb	r3, [r2, r3]
 80042a0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00d      	beq.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80042ac:	4a38      	ldr	r2, [pc, #224]	; (8004390 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	61fb      	str	r3, [r7, #28]
 80042bc:	e004      	b.n	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4a34      	ldr	r2, [pc, #208]	; (8004394 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80042c8:	4b2e      	ldr	r3, [pc, #184]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d4:	d102      	bne.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	61bb      	str	r3, [r7, #24]
      break;
 80042da:	e04a      	b.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	4a2d      	ldr	r2, [pc, #180]	; (8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80042e2:	fba2 2303 	umull	r2, r3, r2, r3
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	61bb      	str	r3, [r7, #24]
      break;
 80042ea:	e042      	b.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80042ec:	4b25      	ldr	r3, [pc, #148]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042fc:	d108      	bne.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	e01f      	b.n	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800431a:	d109      	bne.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800431c:	4b19      	ldr	r3, [pc, #100]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004328:	f649 4340 	movw	r3, #40000	; 0x9c40
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	e00f      	b.n	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800433a:	d11c      	bne.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800433c:	4b11      	ldr	r3, [pc, #68]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d016      	beq.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004348:	f24f 4324 	movw	r3, #62500	; 0xf424
 800434c:	61bb      	str	r3, [r7, #24]
      break;
 800434e:	e012      	b.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004350:	e011      	b.n	8004376 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004352:	f7ff fe85 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 8004356:	4602      	mov	r2, r0
 8004358:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	0b9b      	lsrs	r3, r3, #14
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	3301      	adds	r3, #1
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	fbb2 f3f3 	udiv	r3, r2, r3
 800436a:	61bb      	str	r3, [r7, #24]
      break;
 800436c:	e004      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800436e:	bf00      	nop
 8004370:	e002      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004372:	bf00      	nop
 8004374:	e000      	b.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004376:	bf00      	nop
    }
  }
  return (frequency);
 8004378:	69bb      	ldr	r3, [r7, #24]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	080096e4 	.word	0x080096e4
 800438c:	080096f4 	.word	0x080096f4
 8004390:	007a1200 	.word	0x007a1200
 8004394:	003d0900 	.word	0x003d0900
 8004398:	aaaaaaab 	.word	0xaaaaaaab

0800439c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800439c:	b084      	sub	sp, #16
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	f107 0014 	add.w	r0, r7, #20
 80043aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	b004      	add	sp, #16
 80043ba:	4770      	bx	lr

080043bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80043d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr

080043e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80043f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	b29b      	uxth	r3, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	b29b      	uxth	r3, r3
 8004406:	4013      	ands	r3, r2
 8004408:	b29a      	uxth	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004434:	b084      	sub	sp, #16
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	f107 0014 	add.w	r0, r7, #20
 8004442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	b004      	add	sp, #16
 8004472:	4770      	bx	lr

08004474 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004474:	b480      	push	{r7}
 8004476:	b09d      	sub	sp, #116	; 0x74
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	b29b      	uxth	r3, r3
 8004492:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	78db      	ldrb	r3, [r3, #3]
 80044a2:	2b03      	cmp	r3, #3
 80044a4:	d81f      	bhi.n	80044e6 <USB_ActivateEndpoint+0x72>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <USB_ActivateEndpoint+0x38>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044bd 	.word	0x080044bd
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044ef 	.word	0x080044ef
 80044b8:	080044cb 	.word	0x080044cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80044bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80044c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80044c8:	e012      	b.n	80044f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80044ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80044ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80044d2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80044d6:	e00b      	b.n	80044f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80044d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80044dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80044e4:	e004      	b.n	80044f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80044ec:	e000      	b.n	80044f0 <USB_ActivateEndpoint+0x7c>
      break;
 80044ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	441a      	add	r2, r3
 80044fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80044fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800450a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450e:	b29b      	uxth	r3, r3
 8004510:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004528:	b29a      	uxth	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b29b      	uxth	r3, r3
 8004530:	4313      	orrs	r3, r2
 8004532:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004554:	b29b      	uxth	r3, r3
 8004556:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	7b1b      	ldrb	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f040 8178 	bne.w	8004852 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	785b      	ldrb	r3, [r3, #1]
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8084 	beq.w	8004674 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004576:	b29b      	uxth	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	4413      	add	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	011a      	lsls	r2, r3, #4
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	88db      	ldrh	r3, [r3, #6]
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	b29b      	uxth	r3, r3
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	827b      	strh	r3, [r7, #18]
 80045ae:	8a7b      	ldrh	r3, [r7, #18]
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01b      	beq.n	80045f0 <USB_ActivateEndpoint+0x17c>
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	823b      	strh	r3, [r7, #16]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	441a      	add	r2, r3
 80045da:	8a3b      	ldrh	r3, [r7, #16]
 80045dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	78db      	ldrb	r3, [r3, #3]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d020      	beq.n	800463a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	b29b      	uxth	r3, r3
 8004606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800460a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800460e:	81bb      	strh	r3, [r7, #12]
 8004610:	89bb      	ldrh	r3, [r7, #12]
 8004612:	f083 0320 	eor.w	r3, r3, #32
 8004616:	81bb      	strh	r3, [r7, #12]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	441a      	add	r2, r3
 8004622:	89bb      	ldrh	r3, [r7, #12]
 8004624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800462c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004634:	b29b      	uxth	r3, r3
 8004636:	8013      	strh	r3, [r2, #0]
 8004638:	e2d5      	b.n	8004be6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004650:	81fb      	strh	r3, [r7, #14]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	89fb      	ldrh	r3, [r7, #14]
 800465e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466e:	b29b      	uxth	r3, r3
 8004670:	8013      	strh	r3, [r2, #0]
 8004672:	e2b8      	b.n	8004be6 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	633b      	str	r3, [r7, #48]	; 0x30
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800467e:	b29b      	uxth	r3, r3
 8004680:	461a      	mov	r2, r3
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	4413      	add	r3, r2
 8004686:	633b      	str	r3, [r7, #48]	; 0x30
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	011a      	lsls	r2, r3, #4
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	4413      	add	r3, r2
 8004692:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	88db      	ldrh	r3, [r3, #6]
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	b29b      	uxth	r3, r3
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	461a      	mov	r2, r3
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	4413      	add	r3, r2
 80046ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	011a      	lsls	r2, r3, #4
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	4413      	add	r3, r2
 80046c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	801a      	strh	r2, [r3, #0]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b3e      	cmp	r3, #62	; 0x3e
 80046e2:	d91d      	bls.n	8004720 <USB_ActivateEndpoint+0x2ac>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <USB_ActivateEndpoint+0x28a>
 80046f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046fa:	3b01      	subs	r3, #1
 80046fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29a      	uxth	r2, r3
 8004704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004706:	b29b      	uxth	r3, r3
 8004708:	029b      	lsls	r3, r3, #10
 800470a:	b29b      	uxth	r3, r3
 800470c:	4313      	orrs	r3, r2
 800470e:	b29b      	uxth	r3, r3
 8004710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004718:	b29a      	uxth	r2, r3
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	801a      	strh	r2, [r3, #0]
 800471e:	e026      	b.n	800476e <USB_ActivateEndpoint+0x2fa>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10a      	bne.n	800473e <USB_ActivateEndpoint+0x2ca>
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29b      	uxth	r3, r3
 800472e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004736:	b29a      	uxth	r2, r3
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	801a      	strh	r2, [r3, #0]
 800473c:	e017      	b.n	800476e <USB_ActivateEndpoint+0x2fa>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	085b      	lsrs	r3, r3, #1
 8004744:	66bb      	str	r3, [r7, #104]	; 0x68
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <USB_ActivateEndpoint+0x2e4>
 8004752:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004754:	3301      	adds	r3, #1
 8004756:	66bb      	str	r3, [r7, #104]	; 0x68
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29a      	uxth	r2, r3
 800475e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004760:	b29b      	uxth	r3, r3
 8004762:	029b      	lsls	r3, r3, #10
 8004764:	b29b      	uxth	r3, r3
 8004766:	4313      	orrs	r3, r2
 8004768:	b29a      	uxth	r2, r3
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	847b      	strh	r3, [r7, #34]	; 0x22
 800477c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800477e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01b      	beq.n	80047be <USB_ActivateEndpoint+0x34a>
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479c:	843b      	strh	r3, [r7, #32]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	441a      	add	r2, r3
 80047a8:	8c3b      	ldrh	r3, [r7, #32]
 80047aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d124      	bne.n	8004810 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047dc:	83bb      	strh	r3, [r7, #28]
 80047de:	8bbb      	ldrh	r3, [r7, #28]
 80047e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047e4:	83bb      	strh	r3, [r7, #28]
 80047e6:	8bbb      	ldrh	r3, [r7, #28]
 80047e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047ec:	83bb      	strh	r3, [r7, #28]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	441a      	add	r2, r3
 80047f8:	8bbb      	ldrh	r3, [r7, #28]
 80047fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480a:	b29b      	uxth	r3, r3
 800480c:	8013      	strh	r3, [r2, #0]
 800480e:	e1ea      	b.n	8004be6 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004826:	83fb      	strh	r3, [r7, #30]
 8004828:	8bfb      	ldrh	r3, [r7, #30]
 800482a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800482e:	83fb      	strh	r3, [r7, #30]
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	441a      	add	r2, r3
 800483a:	8bfb      	ldrh	r3, [r7, #30]
 800483c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484c:	b29b      	uxth	r3, r3
 800484e:	8013      	strh	r3, [r2, #0]
 8004850:	e1c9      	b.n	8004be6 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	78db      	ldrb	r3, [r3, #3]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d11e      	bne.n	8004898 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	b29b      	uxth	r3, r3
 8004868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004870:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	441a      	add	r2, r3
 800487e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800488a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800488e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004892:	b29b      	uxth	r3, r3
 8004894:	8013      	strh	r3, [r2, #0]
 8004896:	e01d      	b.n	80048d4 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	441a      	add	r2, r3
 80048bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80048c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048de:	b29b      	uxth	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048e4:	4413      	add	r3, r2
 80048e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	011a      	lsls	r2, r3, #4
 80048ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	891b      	ldrh	r3, [r3, #8]
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	b29b      	uxth	r3, r3
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004906:	801a      	strh	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	657b      	str	r3, [r7, #84]	; 0x54
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004912:	b29b      	uxth	r3, r3
 8004914:	461a      	mov	r2, r3
 8004916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004918:	4413      	add	r3, r2
 800491a:	657b      	str	r3, [r7, #84]	; 0x54
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	011a      	lsls	r2, r3, #4
 8004922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004924:	4413      	add	r3, r2
 8004926:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800492a:	653b      	str	r3, [r7, #80]	; 0x50
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	895b      	ldrh	r3, [r3, #10]
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	b29b      	uxth	r3, r3
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800493a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	785b      	ldrb	r3, [r3, #1]
 8004940:	2b00      	cmp	r3, #0
 8004942:	f040 8093 	bne.w	8004a6c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004956:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800495a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d01b      	beq.n	800499a <USB_ActivateEndpoint+0x526>
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004978:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	441a      	add	r2, r3
 8004984:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800498e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004996:	b29b      	uxth	r3, r3
 8004998:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80049a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80049aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01b      	beq.n	80049ea <USB_ActivateEndpoint+0x576>
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	441a      	add	r2, r3
 80049d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80049d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a00:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a02:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a08:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a0a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a10:	873b      	strh	r3, [r7, #56]	; 0x38
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	441a      	add	r2, r3
 8004a1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a48:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	441a      	add	r2, r3
 8004a54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	8013      	strh	r3, [r2, #0]
 8004a6a:	e0bc      	b.n	8004be6 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004a7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01d      	beq.n	8004ac4 <USB_ActivateEndpoint+0x650>
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4413      	add	r3, r2
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	441a      	add	r2, r3
 8004aac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004ad4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01d      	beq.n	8004b1c <USB_ActivateEndpoint+0x6a8>
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	441a      	add	r2, r3
 8004b04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	78db      	ldrb	r3, [r3, #3]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d024      	beq.n	8004b6e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004b3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b42:	f083 0320 	eor.w	r3, r3, #32
 8004b46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	441a      	add	r2, r3
 8004b54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	8013      	strh	r3, [r2, #0]
 8004b6c:	e01d      	b.n	8004baa <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	441a      	add	r2, r3
 8004b92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	441a      	add	r2, r3
 8004bce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004be6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3774      	adds	r7, #116	; 0x74
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr

08004bf4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b08d      	sub	sp, #52	; 0x34
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	7b1b      	ldrb	r3, [r3, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f040 808e 	bne.w	8004d24 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d044      	beq.n	8004c9a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	81bb      	strh	r3, [r7, #12]
 8004c1e:	89bb      	ldrh	r3, [r7, #12]
 8004c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01b      	beq.n	8004c60 <USB_DeactivateEndpoint+0x6c>
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3e:	817b      	strh	r3, [r7, #10]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	441a      	add	r2, r3
 8004c4a:	897b      	ldrh	r3, [r7, #10]
 8004c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c76:	813b      	strh	r3, [r7, #8]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	893b      	ldrh	r3, [r7, #8]
 8004c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8013      	strh	r3, [r2, #0]
 8004c98:	e192      	b.n	8004fc0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	827b      	strh	r3, [r7, #18]
 8004ca8:	8a7b      	ldrh	r3, [r7, #18]
 8004caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01b      	beq.n	8004cea <USB_DeactivateEndpoint+0xf6>
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc8:	823b      	strh	r3, [r7, #16]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	441a      	add	r2, r3
 8004cd4:	8a3b      	ldrh	r3, [r7, #16]
 8004cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d00:	81fb      	strh	r3, [r7, #14]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	441a      	add	r2, r3
 8004d0c:	89fb      	ldrh	r3, [r7, #14]
 8004d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	8013      	strh	r3, [r2, #0]
 8004d22:	e14d      	b.n	8004fc0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	785b      	ldrb	r3, [r3, #1]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f040 80a5 	bne.w	8004e78 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	843b      	strh	r3, [r7, #32]
 8004d3c:	8c3b      	ldrh	r3, [r7, #32]
 8004d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d01b      	beq.n	8004d7e <USB_DeactivateEndpoint+0x18a>
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5c:	83fb      	strh	r3, [r7, #30]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	441a      	add	r2, r3
 8004d68:	8bfb      	ldrh	r3, [r7, #30]
 8004d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	83bb      	strh	r3, [r7, #28]
 8004d8c:	8bbb      	ldrh	r3, [r7, #28]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01b      	beq.n	8004dce <USB_DeactivateEndpoint+0x1da>
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dac:	837b      	strh	r3, [r7, #26]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	441a      	add	r2, r3
 8004db8:	8b7b      	ldrh	r3, [r7, #26]
 8004dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de4:	833b      	strh	r3, [r7, #24]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	441a      	add	r2, r3
 8004df0:	8b3b      	ldrh	r3, [r7, #24]
 8004df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1c:	82fb      	strh	r3, [r7, #22]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	441a      	add	r2, r3
 8004e28:	8afb      	ldrh	r3, [r7, #22]
 8004e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e54:	82bb      	strh	r3, [r7, #20]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	441a      	add	r2, r3
 8004e60:	8abb      	ldrh	r3, [r7, #20]
 8004e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	8013      	strh	r3, [r2, #0]
 8004e76:	e0a3      	b.n	8004fc0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004e86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01b      	beq.n	8004ec8 <USB_DeactivateEndpoint+0x2d4>
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	441a      	add	r2, r3
 8004eb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ed6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01b      	beq.n	8004f18 <USB_DeactivateEndpoint+0x324>
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	441a      	add	r2, r3
 8004f02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	441a      	add	r2, r3
 8004f3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f66:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	441a      	add	r2, r3
 8004f72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	441a      	add	r2, r3
 8004faa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3734      	adds	r7, #52	; 0x34
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b0c2      	sub	sp, #264	; 0x108
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fda:	6018      	str	r0, [r3, #0]
 8004fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fe4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	f040 86b7 	bne.w	8005d66 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	429a      	cmp	r2, r3
 8005012:	d908      	bls.n	8005026 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005024:	e007      	b.n	8005036 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800502a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800503a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	7b1b      	ldrb	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d13a      	bne.n	80050bc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800504a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6959      	ldr	r1, [r3, #20]
 8005052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	88da      	ldrh	r2, [r3, #6]
 800505e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005062:	b29b      	uxth	r3, r3
 8005064:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005068:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800506c:	6800      	ldr	r0, [r0, #0]
 800506e:	f001 fc9c 	bl	80069aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508c:	b29b      	uxth	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	4413      	add	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800509a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	011a      	lsls	r2, r3, #4
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	4413      	add	r3, r2
 80050a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	f000 be1f 	b.w	8005cfa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80050bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	78db      	ldrb	r3, [r3, #3]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	f040 8462 	bne.w	8005992 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80050ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6a1a      	ldr	r2, [r3, #32]
 80050da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	f240 83df 	bls.w	80058aa <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80050ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	441a      	add	r2, r3
 8005130:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800513c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005144:	b29b      	uxth	r3, r3
 8005146:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6a1a      	ldr	r2, [r3, #32]
 8005154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005158:	1ad2      	subs	r2, r2, r3
 800515a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800515e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800516a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	b29b      	uxth	r3, r3
 8005184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 81c7 	beq.w	800551c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800518e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	633b      	str	r3, [r7, #48]	; 0x30
 800519a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d177      	bne.n	800529a <USB_EPStartXfer+0x2ce>
 80051aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	4413      	add	r3, r2
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	011a      	lsls	r2, r3, #4
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	4413      	add	r3, r2
 80051e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051fa:	2b3e      	cmp	r3, #62	; 0x3e
 80051fc:	d921      	bls.n	8005242 <USB_EPStartXfer+0x276>
 80051fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	2b00      	cmp	r3, #0
 8005212:	d104      	bne.n	800521e <USB_EPStartXfer+0x252>
 8005214:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005218:	3b01      	subs	r3, #1
 800521a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b29a      	uxth	r2, r3
 8005224:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005228:	b29b      	uxth	r3, r3
 800522a:	029b      	lsls	r3, r3, #10
 800522c:	b29b      	uxth	r3, r3
 800522e:	4313      	orrs	r3, r2
 8005230:	b29b      	uxth	r3, r3
 8005232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800523a:	b29a      	uxth	r2, r3
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	e050      	b.n	80052e4 <USB_EPStartXfer+0x318>
 8005242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10a      	bne.n	8005260 <USB_EPStartXfer+0x294>
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	b29b      	uxth	r3, r3
 8005250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005258:	b29a      	uxth	r2, r3
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	801a      	strh	r2, [r3, #0]
 800525e:	e041      	b.n	80052e4 <USB_EPStartXfer+0x318>
 8005260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005264:	085b      	lsrs	r3, r3, #1
 8005266:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800526a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <USB_EPStartXfer+0x2b4>
 8005276:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800527a:	3301      	adds	r3, #1
 800527c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29a      	uxth	r2, r3
 8005286:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800528a:	b29b      	uxth	r3, r3
 800528c:	029b      	lsls	r3, r3, #10
 800528e:	b29b      	uxth	r3, r3
 8005290:	4313      	orrs	r3, r2
 8005292:	b29a      	uxth	r2, r3
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	e024      	b.n	80052e4 <USB_EPStartXfer+0x318>
 800529a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800529e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	785b      	ldrb	r3, [r3, #1]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d11c      	bne.n	80052e4 <USB_EPStartXfer+0x318>
 80052aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052be:	4413      	add	r3, r2
 80052c0:	633b      	str	r3, [r7, #48]	; 0x30
 80052c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	011a      	lsls	r2, r3, #4
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	4413      	add	r3, r2
 80052d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052de:	b29a      	uxth	r2, r3
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80052e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	895b      	ldrh	r3, [r3, #10]
 80052f0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6959      	ldr	r1, [r3, #20]
 8005300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005304:	b29b      	uxth	r3, r3
 8005306:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800530a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800530e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005312:	6800      	ldr	r0, [r0, #0]
 8005314:	f001 fb49 	bl	80069aa <USB_WritePMA>
            ep->xfer_buff += len;
 8005318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695a      	ldr	r2, [r3, #20]
 8005324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005328:	441a      	add	r2, r3
 800532a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800532e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800533a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6a1a      	ldr	r2, [r3, #32]
 8005342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	429a      	cmp	r2, r3
 8005350:	d90f      	bls.n	8005372 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6a1a      	ldr	r2, [r3, #32]
 800535e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005362:	1ad2      	subs	r2, r2, r3
 8005364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	621a      	str	r2, [r3, #32]
 8005370:	e00e      	b.n	8005390 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2200      	movs	r2, #0
 800538e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	785b      	ldrb	r3, [r3, #1]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d177      	bne.n	8005490 <USB_EPStartXfer+0x4c4>
 80053a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	61bb      	str	r3, [r7, #24]
 80053ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	4413      	add	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	011a      	lsls	r2, r3, #4
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	4413      	add	r3, r2
 80053d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f0:	2b3e      	cmp	r3, #62	; 0x3e
 80053f2:	d921      	bls.n	8005438 <USB_EPStartXfer+0x46c>
 80053f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	2b00      	cmp	r3, #0
 8005408:	d104      	bne.n	8005414 <USB_EPStartXfer+0x448>
 800540a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800540e:	3b01      	subs	r3, #1
 8005410:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	b29a      	uxth	r2, r3
 800541a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800541e:	b29b      	uxth	r3, r3
 8005420:	029b      	lsls	r3, r3, #10
 8005422:	b29b      	uxth	r3, r3
 8005424:	4313      	orrs	r3, r2
 8005426:	b29b      	uxth	r3, r3
 8005428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005430:	b29a      	uxth	r2, r3
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	801a      	strh	r2, [r3, #0]
 8005436:	e056      	b.n	80054e6 <USB_EPStartXfer+0x51a>
 8005438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <USB_EPStartXfer+0x48a>
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	b29b      	uxth	r3, r3
 8005446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800544a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800544e:	b29a      	uxth	r2, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	801a      	strh	r2, [r3, #0]
 8005454:	e047      	b.n	80054e6 <USB_EPStartXfer+0x51a>
 8005456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545a:	085b      	lsrs	r3, r3, #1
 800545c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d004      	beq.n	8005476 <USB_EPStartXfer+0x4aa>
 800546c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005470:	3301      	adds	r3, #1
 8005472:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	b29a      	uxth	r2, r3
 800547c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005480:	b29b      	uxth	r3, r3
 8005482:	029b      	lsls	r3, r3, #10
 8005484:	b29b      	uxth	r3, r3
 8005486:	4313      	orrs	r3, r2
 8005488:	b29a      	uxth	r2, r3
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	801a      	strh	r2, [r3, #0]
 800548e:	e02a      	b.n	80054e6 <USB_EPStartXfer+0x51a>
 8005490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d122      	bne.n	80054e6 <USB_EPStartXfer+0x51a>
 80054a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	623b      	str	r3, [r7, #32]
 80054ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	4413      	add	r3, r2
 80054c2:	623b      	str	r3, [r7, #32]
 80054c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	011a      	lsls	r2, r3, #4
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	4413      	add	r3, r2
 80054d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80054e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	891b      	ldrh	r3, [r3, #8]
 80054f2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6959      	ldr	r1, [r3, #20]
 8005502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005506:	b29b      	uxth	r3, r3
 8005508:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800550c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005510:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005514:	6800      	ldr	r0, [r0, #0]
 8005516:	f001 fa48 	bl	80069aa <USB_WritePMA>
 800551a:	e3ee      	b.n	8005cfa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800551c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d177      	bne.n	800561c <USB_EPStartXfer+0x650>
 800552c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005530:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	64bb      	str	r3, [r7, #72]	; 0x48
 8005538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005546:	b29b      	uxth	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800554c:	4413      	add	r3, r2
 800554e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	011a      	lsls	r2, r3, #4
 800555e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005560:	4413      	add	r3, r2
 8005562:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005566:	647b      	str	r3, [r7, #68]	; 0x44
 8005568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005572:	b29a      	uxth	r2, r3
 8005574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005576:	801a      	strh	r2, [r3, #0]
 8005578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800557c:	2b3e      	cmp	r3, #62	; 0x3e
 800557e:	d921      	bls.n	80055c4 <USB_EPStartXfer+0x5f8>
 8005580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800558a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800558e:	f003 031f 	and.w	r3, r3, #31
 8005592:	2b00      	cmp	r3, #0
 8005594:	d104      	bne.n	80055a0 <USB_EPStartXfer+0x5d4>
 8005596:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800559a:	3b01      	subs	r3, #1
 800559c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	029b      	lsls	r3, r3, #10
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	4313      	orrs	r3, r2
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	e056      	b.n	8005672 <USB_EPStartXfer+0x6a6>
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <USB_EPStartXfer+0x616>
 80055cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055da:	b29a      	uxth	r2, r3
 80055dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055de:	801a      	strh	r2, [r3, #0]
 80055e0:	e047      	b.n	8005672 <USB_EPStartXfer+0x6a6>
 80055e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055e6:	085b      	lsrs	r3, r3, #1
 80055e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80055ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d004      	beq.n	8005602 <USB_EPStartXfer+0x636>
 80055f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055fc:	3301      	adds	r3, #1
 80055fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	b29a      	uxth	r2, r3
 8005608:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800560c:	b29b      	uxth	r3, r3
 800560e:	029b      	lsls	r3, r3, #10
 8005610:	b29b      	uxth	r3, r3
 8005612:	4313      	orrs	r3, r2
 8005614:	b29a      	uxth	r2, r3
 8005616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005618:	801a      	strh	r2, [r3, #0]
 800561a:	e02a      	b.n	8005672 <USB_EPStartXfer+0x6a6>
 800561c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d122      	bne.n	8005672 <USB_EPStartXfer+0x6a6>
 800562c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	653b      	str	r3, [r7, #80]	; 0x50
 8005638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005646:	b29b      	uxth	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800564c:	4413      	add	r3, r2
 800564e:	653b      	str	r3, [r7, #80]	; 0x50
 8005650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	011a      	lsls	r2, r3, #4
 800565e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005660:	4413      	add	r3, r2
 8005662:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566c:	b29a      	uxth	r2, r3
 800566e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005670:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	891b      	ldrh	r3, [r3, #8]
 800567e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6959      	ldr	r1, [r3, #20]
 800568e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005692:	b29b      	uxth	r3, r3
 8005694:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005698:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800569c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80056a0:	6800      	ldr	r0, [r0, #0]
 80056a2:	f001 f982 	bl	80069aa <USB_WritePMA>
            ep->xfer_buff += len;
 80056a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b6:	441a      	add	r2, r3
 80056b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80056c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6a1a      	ldr	r2, [r3, #32]
 80056d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d90f      	bls.n	8005700 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80056e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6a1a      	ldr	r2, [r3, #32]
 80056ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f0:	1ad2      	subs	r2, r2, r3
 80056f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	621a      	str	r2, [r3, #32]
 80056fe:	e00e      	b.n	800571e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2200      	movs	r2, #0
 800571c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800571e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	643b      	str	r3, [r7, #64]	; 0x40
 800572a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800572e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d177      	bne.n	800582a <USB_EPStartXfer+0x85e>
 800573a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	63bb      	str	r3, [r7, #56]	; 0x38
 8005746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005754:	b29b      	uxth	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575a:	4413      	add	r3, r2
 800575c:	63bb      	str	r3, [r7, #56]	; 0x38
 800575e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	011a      	lsls	r2, r3, #4
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	4413      	add	r3, r2
 8005770:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005774:	637b      	str	r3, [r7, #52]	; 0x34
 8005776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29b      	uxth	r3, r3
 800577c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005780:	b29a      	uxth	r2, r3
 8005782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005784:	801a      	strh	r2, [r3, #0]
 8005786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800578a:	2b3e      	cmp	r3, #62	; 0x3e
 800578c:	d921      	bls.n	80057d2 <USB_EPStartXfer+0x806>
 800578e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d104      	bne.n	80057ae <USB_EPStartXfer+0x7e2>
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a8:	3b01      	subs	r3, #1
 80057aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	029b      	lsls	r3, r3, #10
 80057bc:	b29b      	uxth	r3, r3
 80057be:	4313      	orrs	r3, r2
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	801a      	strh	r2, [r3, #0]
 80057d0:	e050      	b.n	8005874 <USB_EPStartXfer+0x8a8>
 80057d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <USB_EPStartXfer+0x824>
 80057da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	e041      	b.n	8005874 <USB_EPStartXfer+0x8a8>
 80057f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f4:	085b      	lsrs	r3, r3, #1
 80057f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80057fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d004      	beq.n	8005810 <USB_EPStartXfer+0x844>
 8005806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580a:	3301      	adds	r3, #1
 800580c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29a      	uxth	r2, r3
 8005816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581a:	b29b      	uxth	r3, r3
 800581c:	029b      	lsls	r3, r3, #10
 800581e:	b29b      	uxth	r3, r3
 8005820:	4313      	orrs	r3, r2
 8005822:	b29a      	uxth	r2, r3
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	801a      	strh	r2, [r3, #0]
 8005828:	e024      	b.n	8005874 <USB_EPStartXfer+0x8a8>
 800582a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d11c      	bne.n	8005874 <USB_EPStartXfer+0x8a8>
 800583a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005848:	b29b      	uxth	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800584e:	4413      	add	r3, r2
 8005850:	643b      	str	r3, [r7, #64]	; 0x40
 8005852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	011a      	lsls	r2, r3, #4
 8005860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005862:	4413      	add	r3, r2
 8005864:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800586a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800586e:	b29a      	uxth	r2, r3
 8005870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005872:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	895b      	ldrh	r3, [r3, #10]
 8005880:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6959      	ldr	r1, [r3, #20]
 8005890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005894:	b29b      	uxth	r3, r3
 8005896:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800589a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800589e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058a2:	6800      	ldr	r0, [r0, #0]
 80058a4:	f001 f881 	bl	80069aa <USB_WritePMA>
 80058a8:	e227      	b.n	8005cfa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80058aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80058ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80058dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80058e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	441a      	add	r2, r3
 80058fe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800590a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005912:	b29b      	uxth	r3, r3
 8005914:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005930:	b29b      	uxth	r3, r3
 8005932:	461a      	mov	r2, r3
 8005934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005936:	4413      	add	r3, r2
 8005938:	65fb      	str	r3, [r7, #92]	; 0x5c
 800593a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	011a      	lsls	r2, r3, #4
 8005948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800594a:	4413      	add	r3, r2
 800594c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005950:	65bb      	str	r3, [r7, #88]	; 0x58
 8005952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005956:	b29a      	uxth	r2, r3
 8005958:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800595a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800595c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	891b      	ldrh	r3, [r3, #8]
 8005968:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800596c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6959      	ldr	r1, [r3, #20]
 8005978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800597c:	b29b      	uxth	r3, r3
 800597e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005982:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005986:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800598a:	6800      	ldr	r0, [r0, #0]
 800598c:	f001 f80d 	bl	80069aa <USB_WritePMA>
 8005990:	e1b3      	b.n	8005cfa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6a1a      	ldr	r2, [r3, #32]
 800599e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a2:	1ad2      	subs	r2, r2, r3
 80059a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80059b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80c6 	beq.w	8005b64 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	673b      	str	r3, [r7, #112]	; 0x70
 80059e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	785b      	ldrb	r3, [r3, #1]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d177      	bne.n	8005ae4 <USB_EPStartXfer+0xb18>
 80059f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a14:	4413      	add	r3, r2
 8005a16:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	011a      	lsls	r2, r3, #4
 8005a26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a28:	4413      	add	r3, r2
 8005a2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a2e:	667b      	str	r3, [r7, #100]	; 0x64
 8005a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a44:	2b3e      	cmp	r3, #62	; 0x3e
 8005a46:	d921      	bls.n	8005a8c <USB_EPStartXfer+0xac0>
 8005a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <USB_EPStartXfer+0xa9c>
 8005a5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a62:	3b01      	subs	r3, #1
 8005a64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	029b      	lsls	r3, r3, #10
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a88:	801a      	strh	r2, [r3, #0]
 8005a8a:	e050      	b.n	8005b2e <USB_EPStartXfer+0xb62>
 8005a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <USB_EPStartXfer+0xade>
 8005a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aa6:	801a      	strh	r2, [r3, #0]
 8005aa8:	e041      	b.n	8005b2e <USB_EPStartXfer+0xb62>
 8005aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <USB_EPStartXfer+0xafe>
 8005ac0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005aca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	029b      	lsls	r3, r3, #10
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	4313      	orrs	r3, r2
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ae0:	801a      	strh	r2, [r3, #0]
 8005ae2:	e024      	b.n	8005b2e <USB_EPStartXfer+0xb62>
 8005ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d11c      	bne.n	8005b2e <USB_EPStartXfer+0xb62>
 8005af4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b08:	4413      	add	r3, r2
 8005b0a:	673b      	str	r3, [r7, #112]	; 0x70
 8005b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	011a      	lsls	r2, r3, #4
 8005b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	895b      	ldrh	r3, [r3, #10]
 8005b3a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6959      	ldr	r1, [r3, #20]
 8005b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b54:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b58:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b5c:	6800      	ldr	r0, [r0, #0]
 8005b5e:	f000 ff24 	bl	80069aa <USB_WritePMA>
 8005b62:	e0ca      	b.n	8005cfa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d177      	bne.n	8005c64 <USB_EPStartXfer+0xc98>
 8005b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b94:	4413      	add	r3, r2
 8005b96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	011a      	lsls	r2, r3, #4
 8005ba6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ba8:	4413      	add	r3, r2
 8005baa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bae:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bbe:	801a      	strh	r2, [r3, #0]
 8005bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc4:	2b3e      	cmp	r3, #62	; 0x3e
 8005bc6:	d921      	bls.n	8005c0c <USB_EPStartXfer+0xc40>
 8005bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd6:	f003 031f 	and.w	r3, r3, #31
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d104      	bne.n	8005be8 <USB_EPStartXfer+0xc1c>
 8005bde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005be2:	3b01      	subs	r3, #1
 8005be4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	029b      	lsls	r3, r3, #10
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c08:	801a      	strh	r2, [r3, #0]
 8005c0a:	e05c      	b.n	8005cc6 <USB_EPStartXfer+0xcfa>
 8005c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <USB_EPStartXfer+0xc5e>
 8005c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c26:	801a      	strh	r2, [r3, #0]
 8005c28:	e04d      	b.n	8005cc6 <USB_EPStartXfer+0xcfa>
 8005c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2e:	085b      	lsrs	r3, r3, #1
 8005c30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d004      	beq.n	8005c4a <USB_EPStartXfer+0xc7e>
 8005c40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c44:	3301      	adds	r3, #1
 8005c46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	029b      	lsls	r3, r3, #10
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	e030      	b.n	8005cc6 <USB_EPStartXfer+0xcfa>
 8005c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d128      	bne.n	8005cc6 <USB_EPStartXfer+0xcfa>
 8005c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	461a      	mov	r2, r3
 8005c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c98:	4413      	add	r3, r2
 8005c9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	011a      	lsls	r2, r3, #4
 8005cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cc4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	891b      	ldrh	r3, [r3, #8]
 8005cd2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6959      	ldr	r1, [r3, #20]
 8005ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005cec:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005cf0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005cf4:	6800      	ldr	r0, [r0, #0]
 8005cf6:	f000 fe58 	bl	80069aa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d20:	817b      	strh	r3, [r7, #10]
 8005d22:	897b      	ldrh	r3, [r7, #10]
 8005d24:	f083 0310 	eor.w	r3, r3, #16
 8005d28:	817b      	strh	r3, [r7, #10]
 8005d2a:	897b      	ldrh	r3, [r7, #10]
 8005d2c:	f083 0320 	eor.w	r3, r3, #32
 8005d30:	817b      	strh	r3, [r7, #10]
 8005d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	441a      	add	r2, r3
 8005d4c:	897b      	ldrh	r3, [r7, #10]
 8005d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	8013      	strh	r3, [r2, #0]
 8005d62:	f000 bcde 	b.w	8006722 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	7b1b      	ldrb	r3, [r3, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f040 80bb 	bne.w	8005eee <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	699a      	ldr	r2, [r3, #24]
 8005d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d917      	bls.n	8005dc4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db4:	1ad2      	subs	r2, r2, r3
 8005db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	619a      	str	r2, [r3, #24]
 8005dc2:	e00e      	b.n	8005de2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2200      	movs	r2, #0
 8005de0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005df0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e06:	4413      	add	r3, r2
 8005e08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	011a      	lsls	r2, r3, #4
 8005e1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e1e:	4413      	add	r3, r2
 8005e20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e40:	2b3e      	cmp	r3, #62	; 0x3e
 8005e42:	d924      	bls.n	8005e8e <USB_EPStartXfer+0xec2>
 8005e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d104      	bne.n	8005e64 <USB_EPStartXfer+0xe98>
 8005e5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	029b      	lsls	r3, r3, #10
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	4313      	orrs	r3, r2
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e88:	801a      	strh	r2, [r3, #0]
 8005e8a:	f000 bc10 	b.w	80066ae <USB_EPStartXfer+0x16e2>
 8005e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10c      	bne.n	8005eb0 <USB_EPStartXfer+0xee4>
 8005e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eac:	801a      	strh	r2, [r3, #0]
 8005eae:	e3fe      	b.n	80066ae <USB_EPStartXfer+0x16e2>
 8005eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eb4:	085b      	lsrs	r3, r3, #1
 8005eb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d004      	beq.n	8005ed0 <USB_EPStartXfer+0xf04>
 8005ec6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005eca:	3301      	adds	r3, #1
 8005ecc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	029b      	lsls	r3, r3, #10
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eea:	801a      	strh	r2, [r3, #0]
 8005eec:	e3df      	b.n	80066ae <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	78db      	ldrb	r3, [r3, #3]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	f040 8218 	bne.w	8006330 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 809d 	bne.w	800604c <USB_EPStartXfer+0x1080>
 8005f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f36:	4413      	add	r3, r2
 8005f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	011a      	lsls	r2, r3, #4
 8005f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f4e:	4413      	add	r3, r2
 8005f50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f6a:	801a      	strh	r2, [r3, #0]
 8005f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	2b3e      	cmp	r3, #62	; 0x3e
 8005f7a:	d92b      	bls.n	8005fd4 <USB_EPStartXfer+0x1008>
 8005f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d104      	bne.n	8005fac <USB_EPStartXfer+0xfe0>
 8005fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	029b      	lsls	r3, r3, #10
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fd0:	801a      	strh	r2, [r3, #0]
 8005fd2:	e070      	b.n	80060b6 <USB_EPStartXfer+0x10ea>
 8005fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10c      	bne.n	8005ffe <USB_EPStartXfer+0x1032>
 8005fe4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	e05b      	b.n	80060b6 <USB_EPStartXfer+0x10ea>
 8005ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006014:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <USB_EPStartXfer+0x1062>
 8006024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006028:	3301      	adds	r3, #1
 800602a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800602e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29a      	uxth	r2, r3
 8006036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603a:	b29b      	uxth	r3, r3
 800603c:	029b      	lsls	r3, r3, #10
 800603e:	b29b      	uxth	r3, r3
 8006040:	4313      	orrs	r3, r2
 8006042:	b29a      	uxth	r2, r3
 8006044:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006048:	801a      	strh	r2, [r3, #0]
 800604a:	e034      	b.n	80060b6 <USB_EPStartXfer+0x10ea>
 800604c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	785b      	ldrb	r3, [r3, #1]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d12c      	bne.n	80060b6 <USB_EPStartXfer+0x10ea>
 800605c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006060:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800606a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800606e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006078:	b29b      	uxth	r3, r3
 800607a:	461a      	mov	r2, r3
 800607c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006080:	4413      	add	r3, r2
 8006082:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800608a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	011a      	lsls	r2, r3, #4
 8006094:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006098:	4413      	add	r3, r2
 800609a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800609e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80060b4:	801a      	strh	r2, [r3, #0]
 80060b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f040 809d 	bne.w	8006210 <USB_EPStartXfer+0x1244>
 80060d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060fa:	4413      	add	r3, r2
 80060fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	011a      	lsls	r2, r3, #4
 800610e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006112:	4413      	add	r3, r2
 8006114:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800611c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006128:	b29a      	uxth	r2, r3
 800612a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800612e:	801a      	strh	r2, [r3, #0]
 8006130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b3e      	cmp	r3, #62	; 0x3e
 800613e:	d92b      	bls.n	8006198 <USB_EPStartXfer+0x11cc>
 8006140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <USB_EPStartXfer+0x11a4>
 8006166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616a:	3b01      	subs	r3, #1
 800616c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	b29a      	uxth	r2, r3
 8006178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800617c:	b29b      	uxth	r3, r3
 800617e:	029b      	lsls	r3, r3, #10
 8006180:	b29b      	uxth	r3, r3
 8006182:	4313      	orrs	r3, r2
 8006184:	b29b      	uxth	r3, r3
 8006186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800618e:	b29a      	uxth	r2, r3
 8006190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	e069      	b.n	800626c <USB_EPStartXfer+0x12a0>
 8006198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10c      	bne.n	80061c2 <USB_EPStartXfer+0x11f6>
 80061a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	e054      	b.n	800626c <USB_EPStartXfer+0x12a0>
 80061c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <USB_EPStartXfer+0x1226>
 80061e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ec:	3301      	adds	r3, #1
 80061ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061fe:	b29b      	uxth	r3, r3
 8006200:	029b      	lsls	r3, r3, #10
 8006202:	b29b      	uxth	r3, r3
 8006204:	4313      	orrs	r3, r2
 8006206:	b29a      	uxth	r2, r3
 8006208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	e02d      	b.n	800626c <USB_EPStartXfer+0x12a0>
 8006210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	785b      	ldrb	r3, [r3, #1]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d125      	bne.n	800626c <USB_EPStartXfer+0x12a0>
 8006220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800622e:	b29b      	uxth	r3, r3
 8006230:	461a      	mov	r2, r3
 8006232:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006236:	4413      	add	r3, r2
 8006238:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800623c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	011a      	lsls	r2, r3, #4
 800624a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800624e:	4413      	add	r3, r2
 8006250:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006254:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	b29a      	uxth	r2, r3
 8006266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800626a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800626c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 8218 	beq.w	80066ae <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800627e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800628c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800629e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80062a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <USB_EPStartXfer+0x12ea>
 80062aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80062ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10d      	bne.n	80062d2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80062ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f040 81f5 	bne.w	80066ae <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80062c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80062c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f040 81ee 	bne.w	80066ae <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80062d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80062fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	441a      	add	r2, r3
 8006316:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800631a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800631e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006326:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800632a:	b29b      	uxth	r3, r3
 800632c:	8013      	strh	r3, [r2, #0]
 800632e:	e1be      	b.n	80066ae <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	78db      	ldrb	r3, [r3, #3]
 800633c:	2b01      	cmp	r3, #1
 800633e:	f040 81b4 	bne.w	80066aa <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	429a      	cmp	r2, r3
 800635c:	d917      	bls.n	800638e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800635e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800636e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637e:	1ad2      	subs	r2, r2, r3
 8006380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	619a      	str	r2, [r3, #24]
 800638c:	e00e      	b.n	80063ac <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800638e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800639e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2200      	movs	r2, #0
 80063aa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80063ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f040 8085 	bne.w	80064c8 <USB_EPStartXfer+0x14fc>
 80063be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063da:	b29b      	uxth	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063e2:	4413      	add	r3, r2
 80063e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	011a      	lsls	r2, r3, #4
 80063f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063fa:	4413      	add	r3, r2
 80063fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006400:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006404:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	b29b      	uxth	r3, r3
 800640c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006410:	b29a      	uxth	r2, r3
 8006412:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006416:	801a      	strh	r2, [r3, #0]
 8006418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800641c:	2b3e      	cmp	r3, #62	; 0x3e
 800641e:	d923      	bls.n	8006468 <USB_EPStartXfer+0x149c>
 8006420:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006424:	095b      	lsrs	r3, r3, #5
 8006426:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800642a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800642e:	f003 031f 	and.w	r3, r3, #31
 8006432:	2b00      	cmp	r3, #0
 8006434:	d104      	bne.n	8006440 <USB_EPStartXfer+0x1474>
 8006436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800643a:	3b01      	subs	r3, #1
 800643c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006440:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29a      	uxth	r2, r3
 8006448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800644c:	b29b      	uxth	r3, r3
 800644e:	029b      	lsls	r3, r3, #10
 8006450:	b29b      	uxth	r3, r3
 8006452:	4313      	orrs	r3, r2
 8006454:	b29b      	uxth	r3, r3
 8006456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800645e:	b29a      	uxth	r2, r3
 8006460:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006464:	801a      	strh	r2, [r3, #0]
 8006466:	e060      	b.n	800652a <USB_EPStartXfer+0x155e>
 8006468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10c      	bne.n	800648a <USB_EPStartXfer+0x14be>
 8006470:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006480:	b29a      	uxth	r2, r3
 8006482:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	e04f      	b.n	800652a <USB_EPStartXfer+0x155e>
 800648a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006494:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d004      	beq.n	80064aa <USB_EPStartXfer+0x14de>
 80064a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064a4:	3301      	adds	r3, #1
 80064a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80064aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	029b      	lsls	r3, r3, #10
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	4313      	orrs	r3, r2
 80064be:	b29a      	uxth	r2, r3
 80064c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064c4:	801a      	strh	r2, [r3, #0]
 80064c6:	e030      	b.n	800652a <USB_EPStartXfer+0x155e>
 80064c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	785b      	ldrb	r3, [r3, #1]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d128      	bne.n	800652a <USB_EPStartXfer+0x155e>
 80064d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80064e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	461a      	mov	r2, r3
 80064f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064fc:	4413      	add	r3, r2
 80064fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	011a      	lsls	r2, r3, #4
 8006510:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006514:	4413      	add	r3, r2
 8006516:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800651a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800651e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006522:	b29a      	uxth	r2, r3
 8006524:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006528:	801a      	strh	r2, [r3, #0]
 800652a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f040 8085 	bne.w	8006654 <USB_EPStartXfer+0x1688>
 800654a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006566:	b29b      	uxth	r3, r3
 8006568:	461a      	mov	r2, r3
 800656a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800656e:	4413      	add	r3, r2
 8006570:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	011a      	lsls	r2, r3, #4
 8006582:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006586:	4413      	add	r3, r2
 8006588:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800658c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006590:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	b29b      	uxth	r3, r3
 8006598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800659c:	b29a      	uxth	r2, r3
 800659e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a8:	2b3e      	cmp	r3, #62	; 0x3e
 80065aa:	d923      	bls.n	80065f4 <USB_EPStartXfer+0x1628>
 80065ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b0:	095b      	lsrs	r3, r3, #5
 80065b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ba:	f003 031f 	and.w	r3, r3, #31
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d104      	bne.n	80065cc <USB_EPStartXfer+0x1600>
 80065c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065c6:	3b01      	subs	r3, #1
 80065c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065d8:	b29b      	uxth	r3, r3
 80065da:	029b      	lsls	r3, r3, #10
 80065dc:	b29b      	uxth	r3, r3
 80065de:	4313      	orrs	r3, r2
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065f0:	801a      	strh	r2, [r3, #0]
 80065f2:	e05c      	b.n	80066ae <USB_EPStartXfer+0x16e2>
 80065f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10c      	bne.n	8006616 <USB_EPStartXfer+0x164a>
 80065fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660c:	b29a      	uxth	r2, r3
 800660e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006612:	801a      	strh	r2, [r3, #0]
 8006614:	e04b      	b.n	80066ae <USB_EPStartXfer+0x16e2>
 8006616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800661a:	085b      	lsrs	r3, r3, #1
 800661c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d004      	beq.n	8006636 <USB_EPStartXfer+0x166a>
 800662c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006630:	3301      	adds	r3, #1
 8006632:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006636:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29a      	uxth	r2, r3
 800663e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006642:	b29b      	uxth	r3, r3
 8006644:	029b      	lsls	r3, r3, #10
 8006646:	b29b      	uxth	r3, r3
 8006648:	4313      	orrs	r3, r2
 800664a:	b29a      	uxth	r2, r3
 800664c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006650:	801a      	strh	r2, [r3, #0]
 8006652:	e02c      	b.n	80066ae <USB_EPStartXfer+0x16e2>
 8006654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d124      	bne.n	80066ae <USB_EPStartXfer+0x16e2>
 8006664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006668:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006672:	b29b      	uxth	r3, r3
 8006674:	461a      	mov	r2, r3
 8006676:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800667a:	4413      	add	r3, r2
 800667c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	011a      	lsls	r2, r3, #4
 800668e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006692:	4413      	add	r3, r2
 8006694:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006698:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800669c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066a6:	801a      	strh	r2, [r3, #0]
 80066a8:	e001      	b.n	80066ae <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e03a      	b.n	8006724 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80066d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80066dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80066e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80066e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80066f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	441a      	add	r2, r3
 800670a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800670e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800671a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671e:	b29b      	uxth	r3, r3
 8006720:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800672e:	b480      	push	{r7}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	785b      	ldrb	r3, [r3, #1]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d020      	beq.n	8006782 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006756:	81bb      	strh	r3, [r7, #12]
 8006758:	89bb      	ldrh	r3, [r7, #12]
 800675a:	f083 0310 	eor.w	r3, r3, #16
 800675e:	81bb      	strh	r3, [r7, #12]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	441a      	add	r2, r3
 800676a:	89bb      	ldrh	r3, [r7, #12]
 800676c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800677c:	b29b      	uxth	r3, r3
 800677e:	8013      	strh	r3, [r2, #0]
 8006780:	e01f      	b.n	80067c2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29b      	uxth	r3, r3
 8006790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006798:	81fb      	strh	r3, [r7, #14]
 800679a:	89fb      	ldrh	r3, [r7, #14]
 800679c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067a0:	81fb      	strh	r3, [r7, #14]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	441a      	add	r2, r3
 80067ac:	89fb      	ldrh	r3, [r7, #14]
 80067ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067be:	b29b      	uxth	r3, r3
 80067c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr

080067ce <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b087      	sub	sp, #28
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	7b1b      	ldrb	r3, [r3, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f040 809d 	bne.w	800691c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	785b      	ldrb	r3, [r3, #1]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d04c      	beq.n	8006884 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	823b      	strh	r3, [r7, #16]
 80067f8:	8a3b      	ldrh	r3, [r7, #16]
 80067fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01b      	beq.n	800683a <USB_EPClearStall+0x6c>
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006818:	81fb      	strh	r3, [r7, #14]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	441a      	add	r2, r3
 8006824:	89fb      	ldrh	r3, [r7, #14]
 8006826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800682a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006832:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006836:	b29b      	uxth	r3, r3
 8006838:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	78db      	ldrb	r3, [r3, #3]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d06c      	beq.n	800691c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006858:	81bb      	strh	r3, [r7, #12]
 800685a:	89bb      	ldrh	r3, [r7, #12]
 800685c:	f083 0320 	eor.w	r3, r3, #32
 8006860:	81bb      	strh	r3, [r7, #12]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	441a      	add	r2, r3
 800686c:	89bb      	ldrh	r3, [r7, #12]
 800686e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687e:	b29b      	uxth	r3, r3
 8006880:	8013      	strh	r3, [r2, #0]
 8006882:	e04b      	b.n	800691c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	82fb      	strh	r3, [r7, #22]
 8006892:	8afb      	ldrh	r3, [r7, #22]
 8006894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d01b      	beq.n	80068d4 <USB_EPClearStall+0x106>
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b2:	82bb      	strh	r3, [r7, #20]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	441a      	add	r2, r3
 80068be:	8abb      	ldrh	r3, [r7, #20]
 80068c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ea:	827b      	strh	r3, [r7, #18]
 80068ec:	8a7b      	ldrh	r3, [r7, #18]
 80068ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068f2:	827b      	strh	r3, [r7, #18]
 80068f4:	8a7b      	ldrh	r3, [r7, #18]
 80068f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068fa:	827b      	strh	r3, [r7, #18]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	8a7b      	ldrh	r3, [r7, #18]
 8006908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006918:	b29b      	uxth	r3, r3
 800691a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr

08006928 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d103      	bne.n	8006942 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2280      	movs	r2, #128	; 0x80
 800693e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr

0800694e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr

08006962 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	bc80      	pop	{r7}
 8006974:	4770      	bx	lr

08006976 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006976:	b480      	push	{r7}
 8006978:	b085      	sub	sp, #20
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006984:	b29b      	uxth	r3, r3
 8006986:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006988:	68fb      	ldr	r3, [r7, #12]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr

08006994 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bc80      	pop	{r7}
 80069a8:	4770      	bx	lr

080069aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80069aa:	b480      	push	{r7}
 80069ac:	b08b      	sub	sp, #44	; 0x2c
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	4611      	mov	r1, r2
 80069b6:	461a      	mov	r2, r3
 80069b8:	460b      	mov	r3, r1
 80069ba:	80fb      	strh	r3, [r7, #6]
 80069bc:	4613      	mov	r3, r2
 80069be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80069c0:	88bb      	ldrh	r3, [r7, #4]
 80069c2:	3301      	adds	r3, #1
 80069c4:	085b      	lsrs	r3, r3, #1
 80069c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80069d0:	88fb      	ldrh	r3, [r7, #6]
 80069d2:	005a      	lsls	r2, r3, #1
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069dc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	627b      	str	r3, [r7, #36]	; 0x24
 80069e2:	e01e      	b.n	8006a22 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	3301      	adds	r3, #1
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	021b      	lsls	r3, r3, #8
 80069f2:	b21a      	sxth	r2, r3
 80069f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	b21b      	sxth	r3, r3
 80069fc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	8a7a      	ldrh	r2, [r7, #18]
 8006a02:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	3302      	adds	r3, #2
 8006a08:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	3302      	adds	r3, #2
 8006a0e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	3301      	adds	r3, #1
 8006a14:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1dd      	bne.n	80069e4 <USB_WritePMA+0x3a>
  }
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	372c      	adds	r7, #44	; 0x2c
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr

08006a34 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b08b      	sub	sp, #44	; 0x2c
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4611      	mov	r1, r2
 8006a40:	461a      	mov	r2, r3
 8006a42:	460b      	mov	r3, r1
 8006a44:	80fb      	strh	r3, [r7, #6]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006a4a:	88bb      	ldrh	r3, [r7, #4]
 8006a4c:	085b      	lsrs	r3, r3, #1
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a5a:	88fb      	ldrh	r3, [r7, #6]
 8006a5c:	005a      	lsls	r2, r3, #1
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a66:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6c:	e01b      	b.n	8006aa6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	3302      	adds	r3, #2
 8006a7a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	3301      	adds	r3, #1
 8006a88:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	0a1b      	lsrs	r3, r3, #8
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	3301      	adds	r3, #1
 8006a98:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e0      	bne.n	8006a6e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006aac:	88bb      	ldrh	r3, [r7, #4]
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	701a      	strb	r2, [r3, #0]
  }
}
 8006ac8:	bf00      	nop
 8006aca:	372c      	adds	r7, #44	; 0x2c
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr

08006ad2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	7c1b      	ldrb	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d115      	bne.n	8006b16 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aee:	2202      	movs	r2, #2
 8006af0:	2181      	movs	r1, #129	; 0x81
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 fe87 	bl	8008806 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b02:	2202      	movs	r2, #2
 8006b04:	2101      	movs	r1, #1
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 fe7d 	bl	8008806 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006b14:	e012      	b.n	8006b3c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006b16:	2340      	movs	r3, #64	; 0x40
 8006b18:	2202      	movs	r2, #2
 8006b1a:	2181      	movs	r1, #129	; 0x81
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f001 fe72 	bl	8008806 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006b28:	2340      	movs	r3, #64	; 0x40
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 fe69 	bl	8008806 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b3c:	2308      	movs	r3, #8
 8006b3e:	2203      	movs	r2, #3
 8006b40:	2182      	movs	r1, #130	; 0x82
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 fe5f 	bl	8008806 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b4e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006b52:	f001 ff7f 	bl	8008a54 <USBD_static_malloc>
 8006b56:	4602      	mov	r2, r0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	73fb      	strb	r3, [r7, #15]
 8006b6c:	e026      	b.n	8006bbc <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b74:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	7c1b      	ldrb	r3, [r3, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d109      	bne.n	8006bac <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 ff1f 	bl	80089e8 <USBD_LL_PrepareReceive>
 8006baa:	e007      	b.n	8006bbc <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bb2:	2340      	movs	r3, #64	; 0x40
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f001 ff16 	bl	80089e8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006bd6:	2181      	movs	r1, #129	; 0x81
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 fe3a 	bl	8008852 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006be4:	2101      	movs	r1, #1
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 fe33 	bl	8008852 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006bf4:	2182      	movs	r1, #130	; 0x82
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 fe2b 	bl	8008852 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00e      	beq.n	8006c2a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f001 ff25 	bl	8008a6c <USBD_static_free>
    pdev->pClassData = NULL;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c44:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d039      	beq.n	8006cd2 <USBD_CDC_Setup+0x9e>
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d17f      	bne.n	8006d62 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	88db      	ldrh	r3, [r3, #6]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d029      	beq.n	8006cbe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	b25b      	sxtb	r3, r3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	da11      	bge.n	8006c98 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006c80:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	88d2      	ldrh	r2, [r2, #6]
 8006c86:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c88:	6939      	ldr	r1, [r7, #16]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	88db      	ldrh	r3, [r3, #6]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 fa0a 	bl	80080aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006c96:	e06b      	b.n	8006d70 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	785a      	ldrb	r2, [r3, #1]
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	88db      	ldrh	r3, [r3, #6]
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006cae:	6939      	ldr	r1, [r7, #16]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	88db      	ldrh	r3, [r3, #6]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 fa25 	bl	8008106 <USBD_CtlPrepareRx>
      break;
 8006cbc:	e058      	b.n	8006d70 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	7850      	ldrb	r0, [r2, #1]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	4798      	blx	r3
      break;
 8006cd0:	e04e      	b.n	8006d70 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	785b      	ldrb	r3, [r3, #1]
 8006cd6:	2b0b      	cmp	r3, #11
 8006cd8:	d02e      	beq.n	8006d38 <USBD_CDC_Setup+0x104>
 8006cda:	2b0b      	cmp	r3, #11
 8006cdc:	dc38      	bgt.n	8006d50 <USBD_CDC_Setup+0x11c>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <USBD_CDC_Setup+0xb4>
 8006ce2:	2b0a      	cmp	r3, #10
 8006ce4:	d014      	beq.n	8006d10 <USBD_CDC_Setup+0xdc>
 8006ce6:	e033      	b.n	8006d50 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d107      	bne.n	8006d02 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006cf2:	f107 030c 	add.w	r3, r7, #12
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f001 f9d5 	bl	80080aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d00:	e02e      	b.n	8006d60 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 f966 	bl	8007fd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d0e:	e027      	b.n	8006d60 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d107      	bne.n	8006d2a <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006d1a:	f107 030f 	add.w	r3, r7, #15
 8006d1e:	2201      	movs	r2, #1
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f001 f9c1 	bl	80080aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006d28:	e01a      	b.n	8006d60 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f001 f952 	bl	8007fd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d32:	2302      	movs	r3, #2
 8006d34:	75fb      	strb	r3, [r7, #23]
          break;
 8006d36:	e013      	b.n	8006d60 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	d00d      	beq.n	8006d5e <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f001 f946 	bl	8007fd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d4e:	e006      	b.n	8006d5e <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 f93f 	bl	8007fd6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d58:	2302      	movs	r3, #2
 8006d5a:	75fb      	strb	r3, [r7, #23]
          break;
 8006d5c:	e000      	b.n	8006d60 <USBD_CDC_Setup+0x12c>
          break;
 8006d5e:	bf00      	nop
      }
      break;
 8006d60:	e006      	b.n	8006d70 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f001 f936 	bl	8007fd6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d6e:	bf00      	nop
  }

  return ret;
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	460b      	mov	r3, r1
 8006d84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d94:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d03a      	beq.n	8006e16 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006da0:	78fa      	ldrb	r2, [r7, #3]
 8006da2:	6879      	ldr	r1, [r7, #4]
 8006da4:	4613      	mov	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	440b      	add	r3, r1
 8006dae:	331c      	adds	r3, #28
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d029      	beq.n	8006e0a <USBD_CDC_DataIn+0x90>
 8006db6:	78fa      	ldrb	r2, [r7, #3]
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	331c      	adds	r3, #28
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	78f9      	ldrb	r1, [r7, #3]
 8006dca:	68b8      	ldr	r0, [r7, #8]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	4403      	add	r3, r0
 8006dd6:	3338      	adds	r3, #56	; 0x38
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	fbb2 f1f3 	udiv	r1, r2, r3
 8006dde:	fb01 f303 	mul.w	r3, r1, r3
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d110      	bne.n	8006e0a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006de8:	78fa      	ldrb	r2, [r7, #3]
 8006dea:	6879      	ldr	r1, [r7, #4]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	331c      	adds	r3, #28
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dfc:	78f9      	ldrb	r1, [r7, #3]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2200      	movs	r2, #0
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f001 fdcd 	bl	80089a2 <USBD_LL_Transmit>
 8006e08:	e003      	b.n	8006e12 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	e000      	b.n	8006e18 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006e16:	2302      	movs	r3, #2
  }
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e34:	78fb      	ldrb	r3, [r7, #3]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 fdf8 	bl	8008a2e <USBD_LL_GetRxDataSize>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00d      	beq.n	8006e6c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e64:	4611      	mov	r1, r2
 8006e66:	4798      	blx	r3

    return USBD_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e000      	b.n	8006e6e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006e6c:	2302      	movs	r3, #2
  }
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e84:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d015      	beq.n	8006ebc <USBD_CDC_EP0_RxReady+0x46>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e96:	2bff      	cmp	r3, #255	; 0xff
 8006e98:	d010      	beq.n	8006ebc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006ea8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006eb0:	b292      	uxth	r2, r2
 8006eb2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	22ff      	movs	r2, #255	; 0xff
 8006eb8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2243      	movs	r2, #67	; 0x43
 8006ed4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006ed6:	4b03      	ldr	r3, [pc, #12]	; (8006ee4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20000094 	.word	0x20000094

08006ee8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2243      	movs	r2, #67	; 0x43
 8006ef4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006ef6:	4b03      	ldr	r3, [pc, #12]	; (8006f04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bc80      	pop	{r7}
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20000050 	.word	0x20000050

08006f08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2243      	movs	r2, #67	; 0x43
 8006f14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006f16:	4b03      	ldr	r3, [pc, #12]	; (8006f24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	200000d8 	.word	0x200000d8

08006f28 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	220a      	movs	r2, #10
 8006f34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006f36:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bc80      	pop	{r7}
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	2000000c 	.word	0x2000000c

08006f48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006f52:	2302      	movs	r3, #2
 8006f54:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d005      	beq.n	8006f68 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bc80      	pop	{r7}
 8006f72:	4770      	bx	lr

08006f74 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f88:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f92:	88fa      	ldrh	r2, [r7, #6]
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bc80      	pop	{r7}
 8006fa4:	4770      	bx	lr

08006fa6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b085      	sub	sp, #20
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr

08006fcc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d01c      	beq.n	8007020 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d115      	bne.n	800701c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800700e:	b29b      	uxth	r3, r3
 8007010:	2181      	movs	r1, #129	; 0x81
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 fcc5 	bl	80089a2 <USBD_LL_Transmit>

      return USBD_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	e002      	b.n	8007022 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800701c:	2301      	movs	r3, #1
 800701e:	e000      	b.n	8007022 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007020:	2302      	movs	r3, #2
  }
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b084      	sub	sp, #16
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007038:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007040:	2b00      	cmp	r3, #0
 8007042:	d017      	beq.n	8007074 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	7c1b      	ldrb	r3, [r3, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d109      	bne.n	8007060 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007056:	2101      	movs	r1, #1
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 fcc5 	bl	80089e8 <USBD_LL_PrepareReceive>
 800705e:	e007      	b.n	8007070 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007066:	2340      	movs	r3, #64	; 0x40
 8007068:	2101      	movs	r1, #1
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f001 fcbc 	bl	80089e8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	e000      	b.n	8007076 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007074:	2302      	movs	r3, #2
  }
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	4613      	mov	r3, r2
 800708a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007092:	2302      	movs	r3, #2
 8007094:	e01a      	b.n	80070cc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	79fa      	ldrb	r2, [r7, #7]
 80070c2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f001 fb29 	bl	800871c <USBD_LL_Init>

  return USBD_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d006      	beq.n	80070f6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	73fb      	strb	r3, [r7, #15]
 80070f4:	e001      	b.n	80070fa <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80070f6:	2302      	movs	r3, #2
 80070f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr

08007106 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b082      	sub	sp, #8
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f001 fb5e 	bl	80087d0 <USBD_LL_Start>

  return USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800711e:	b480      	push	{r7}
 8007120:	b083      	sub	sp, #12
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	bc80      	pop	{r7}
 8007130:	4770      	bx	lr

08007132 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800713e:	2302      	movs	r3, #2
 8007140:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00c      	beq.n	8007166 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	78fa      	ldrb	r2, [r7, #3]
 8007156:	4611      	mov	r1, r2
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007166:	7bfb      	ldrb	r3, [r7, #15]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	78fa      	ldrb	r2, [r7, #3]
 8007186:	4611      	mov	r1, r2
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	4798      	blx	r3

  return USBD_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fed8 	bl	8007f5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071bc:	461a      	mov	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071ca:	f003 031f 	and.w	r3, r3, #31
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d016      	beq.n	8007200 <USBD_LL_SetupStage+0x6a>
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d81c      	bhi.n	8007210 <USBD_LL_SetupStage+0x7a>
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d002      	beq.n	80071e0 <USBD_LL_SetupStage+0x4a>
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d008      	beq.n	80071f0 <USBD_LL_SetupStage+0x5a>
 80071de:	e017      	b.n	8007210 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f9cb 	bl	8007584 <USBD_StdDevReq>
      break;
 80071ee:	e01a      	b.n	8007226 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fa2d 	bl	8007658 <USBD_StdItfReq>
      break;
 80071fe:	e012      	b.n	8007226 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa6d 	bl	80076e8 <USBD_StdEPReq>
      break;
 800720e:	e00a      	b.n	8007226 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007216:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800721a:	b2db      	uxtb	r3, r3
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 fb36 	bl	8008890 <USBD_LL_StallEP>
      break;
 8007224:	bf00      	nop
  }

  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	460b      	mov	r3, r1
 800723a:	607a      	str	r2, [r7, #4]
 800723c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800723e:	7afb      	ldrb	r3, [r7, #11]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d14b      	bne.n	80072dc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800724a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007252:	2b03      	cmp	r3, #3
 8007254:	d134      	bne.n	80072c0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	429a      	cmp	r2, r3
 8007260:	d919      	bls.n	8007296 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	1ad2      	subs	r2, r2, r3
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007278:	429a      	cmp	r2, r3
 800727a:	d203      	bcs.n	8007284 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007280:	b29b      	uxth	r3, r3
 8007282:	e002      	b.n	800728a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007288:	b29b      	uxth	r3, r3
 800728a:	461a      	mov	r2, r3
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 ff57 	bl	8008142 <USBD_CtlContinueRx>
 8007294:	e038      	b.n	8007308 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d105      	bne.n	80072b8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 ff54 	bl	8008166 <USBD_CtlSendStatus>
 80072be:	e023      	b.n	8007308 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072c6:	2b05      	cmp	r3, #5
 80072c8:	d11e      	bne.n	8007308 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80072d2:	2100      	movs	r1, #0
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f001 fadb 	bl	8008890 <USBD_LL_StallEP>
 80072da:	e015      	b.n	8007308 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00d      	beq.n	8007304 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d108      	bne.n	8007304 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	7afa      	ldrb	r2, [r7, #11]
 80072fc:	4611      	mov	r1, r2
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	4798      	blx	r3
 8007302:	e001      	b.n	8007308 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007304:	2302      	movs	r3, #2
 8007306:	e000      	b.n	800730a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b086      	sub	sp, #24
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	460b      	mov	r3, r1
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007320:	7afb      	ldrb	r3, [r7, #11]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d17f      	bne.n	8007426 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3314      	adds	r3, #20
 800732a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007332:	2b02      	cmp	r3, #2
 8007334:	d15c      	bne.n	80073f0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	68da      	ldr	r2, [r3, #12]
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	429a      	cmp	r2, r3
 8007340:	d915      	bls.n	800736e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	68da      	ldr	r2, [r3, #12]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	1ad2      	subs	r2, r2, r3
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	b29b      	uxth	r3, r3
 8007356:	461a      	mov	r2, r3
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 fec1 	bl	80080e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007360:	2300      	movs	r3, #0
 8007362:	2200      	movs	r2, #0
 8007364:	2100      	movs	r1, #0
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f001 fb3e 	bl	80089e8 <USBD_LL_PrepareReceive>
 800736c:	e04e      	b.n	800740c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	6912      	ldr	r2, [r2, #16]
 8007376:	fbb3 f1f2 	udiv	r1, r3, r2
 800737a:	fb01 f202 	mul.w	r2, r1, r2
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d11c      	bne.n	80073be <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800738c:	429a      	cmp	r2, r3
 800738e:	d316      	bcc.n	80073be <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800739a:	429a      	cmp	r2, r3
 800739c:	d20f      	bcs.n	80073be <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800739e:	2200      	movs	r2, #0
 80073a0:	2100      	movs	r1, #0
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 fe9d 	bl	80080e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073b0:	2300      	movs	r3, #0
 80073b2:	2200      	movs	r2, #0
 80073b4:	2100      	movs	r1, #0
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f001 fb16 	bl	80089e8 <USBD_LL_PrepareReceive>
 80073bc:	e026      	b.n	800740c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d105      	bne.n	80073e0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80073e0:	2180      	movs	r1, #128	; 0x80
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f001 fa54 	bl	8008890 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fecf 	bl	800818c <USBD_CtlReceiveStatus>
 80073ee:	e00d      	b.n	800740c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	d004      	beq.n	8007404 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007400:	2b00      	cmp	r3, #0
 8007402:	d103      	bne.n	800740c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007404:	2180      	movs	r1, #128	; 0x80
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f001 fa42 	bl	8008890 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007412:	2b01      	cmp	r3, #1
 8007414:	d11d      	bne.n	8007452 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f7ff fe81 	bl	800711e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007424:	e015      	b.n	8007452 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00d      	beq.n	800744e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007438:	2b03      	cmp	r3, #3
 800743a:	d108      	bne.n	800744e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	7afa      	ldrb	r2, [r7, #11]
 8007446:	4611      	mov	r1, r2
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	4798      	blx	r3
 800744c:	e001      	b.n	8007452 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800744e:	2302      	movs	r3, #2
 8007450:	e000      	b.n	8007454 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007464:	2340      	movs	r3, #64	; 0x40
 8007466:	2200      	movs	r2, #0
 8007468:	2100      	movs	r1, #0
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f001 f9cb 	bl	8008806 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2240      	movs	r2, #64	; 0x40
 800747c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007480:	2340      	movs	r3, #64	; 0x40
 8007482:	2200      	movs	r2, #0
 8007484:	2180      	movs	r1, #128	; 0x80
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 f9bd 	bl	8008806 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2240      	movs	r2, #64	; 0x40
 8007496:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d009      	beq.n	80074d4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6852      	ldr	r2, [r2, #4]
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	4611      	mov	r1, r2
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	4798      	blx	r3
  }

  return USBD_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	460b      	mov	r3, r1
 80074e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bc80      	pop	{r7}
 80074fa:	4770      	bx	lr

080074fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2204      	movs	r2, #4
 8007514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	bc80      	pop	{r7}
 8007522:	4770      	bx	lr

08007524 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007532:	2b04      	cmp	r3, #4
 8007534:	d105      	bne.n	8007542 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	bc80      	pop	{r7}
 800754c:	4770      	bx	lr

0800754e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800754e:	b580      	push	{r7, lr}
 8007550:	b082      	sub	sp, #8
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800755c:	2b03      	cmp	r3, #3
 800755e:	d10b      	bne.n	8007578 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007572:	69db      	ldr	r3, [r3, #28]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800758e:	2300      	movs	r3, #0
 8007590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800759a:	2b40      	cmp	r3, #64	; 0x40
 800759c:	d005      	beq.n	80075aa <USBD_StdDevReq+0x26>
 800759e:	2b40      	cmp	r3, #64	; 0x40
 80075a0:	d84f      	bhi.n	8007642 <USBD_StdDevReq+0xbe>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <USBD_StdDevReq+0x36>
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d14b      	bne.n	8007642 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
      break;
 80075b8:	e048      	b.n	800764c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	2b09      	cmp	r3, #9
 80075c0:	d839      	bhi.n	8007636 <USBD_StdDevReq+0xb2>
 80075c2:	a201      	add	r2, pc, #4	; (adr r2, 80075c8 <USBD_StdDevReq+0x44>)
 80075c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c8:	08007619 	.word	0x08007619
 80075cc:	0800762d 	.word	0x0800762d
 80075d0:	08007637 	.word	0x08007637
 80075d4:	08007623 	.word	0x08007623
 80075d8:	08007637 	.word	0x08007637
 80075dc:	080075fb 	.word	0x080075fb
 80075e0:	080075f1 	.word	0x080075f1
 80075e4:	08007637 	.word	0x08007637
 80075e8:	0800760f 	.word	0x0800760f
 80075ec:	08007605 	.word	0x08007605
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f9dc 	bl	80079b0 <USBD_GetDescriptor>
          break;
 80075f8:	e022      	b.n	8007640 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fb3f 	bl	8007c80 <USBD_SetAddress>
          break;
 8007602:	e01d      	b.n	8007640 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fb7e 	bl	8007d08 <USBD_SetConfig>
          break;
 800760c:	e018      	b.n	8007640 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fc07 	bl	8007e24 <USBD_GetConfig>
          break;
 8007616:	e013      	b.n	8007640 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fc37 	bl	8007e8e <USBD_GetStatus>
          break;
 8007620:	e00e      	b.n	8007640 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fc65 	bl	8007ef4 <USBD_SetFeature>
          break;
 800762a:	e009      	b.n	8007640 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fc74 	bl	8007f1c <USBD_ClrFeature>
          break;
 8007634:	e004      	b.n	8007640 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fccc 	bl	8007fd6 <USBD_CtlError>
          break;
 800763e:	bf00      	nop
      }
      break;
 8007640:	e004      	b.n	800764c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fcc6 	bl	8007fd6 <USBD_CtlError>
      break;
 800764a:	bf00      	nop
  }

  return ret;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop

08007658 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800766e:	2b40      	cmp	r3, #64	; 0x40
 8007670:	d005      	beq.n	800767e <USBD_StdItfReq+0x26>
 8007672:	2b40      	cmp	r3, #64	; 0x40
 8007674:	d82e      	bhi.n	80076d4 <USBD_StdItfReq+0x7c>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <USBD_StdItfReq+0x26>
 800767a:	2b20      	cmp	r3, #32
 800767c:	d12a      	bne.n	80076d4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007684:	3b01      	subs	r3, #1
 8007686:	2b02      	cmp	r3, #2
 8007688:	d81d      	bhi.n	80076c6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	889b      	ldrh	r3, [r3, #4]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b01      	cmp	r3, #1
 8007692:	d813      	bhi.n	80076bc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	4798      	blx	r3
 80076a2:	4603      	mov	r3, r0
 80076a4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	88db      	ldrh	r3, [r3, #6]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d110      	bne.n	80076d0 <USBD_StdItfReq+0x78>
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10d      	bne.n	80076d0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fd56 	bl	8008166 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076ba:	e009      	b.n	80076d0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fc89 	bl	8007fd6 <USBD_CtlError>
          break;
 80076c4:	e004      	b.n	80076d0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fc84 	bl	8007fd6 <USBD_CtlError>
          break;
 80076ce:	e000      	b.n	80076d2 <USBD_StdItfReq+0x7a>
          break;
 80076d0:	bf00      	nop
      }
      break;
 80076d2:	e004      	b.n	80076de <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fc7d 	bl	8007fd6 <USBD_CtlError>
      break;
 80076dc:	bf00      	nop
  }

  return USBD_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	889b      	ldrh	r3, [r3, #4]
 80076fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007704:	2b40      	cmp	r3, #64	; 0x40
 8007706:	d007      	beq.n	8007718 <USBD_StdEPReq+0x30>
 8007708:	2b40      	cmp	r3, #64	; 0x40
 800770a:	f200 8146 	bhi.w	800799a <USBD_StdEPReq+0x2b2>
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00a      	beq.n	8007728 <USBD_StdEPReq+0x40>
 8007712:	2b20      	cmp	r3, #32
 8007714:	f040 8141 	bne.w	800799a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	4798      	blx	r3
      break;
 8007726:	e13d      	b.n	80079a4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007730:	2b20      	cmp	r3, #32
 8007732:	d10a      	bne.n	800774a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
 8007742:	4603      	mov	r3, r0
 8007744:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	e12d      	b.n	80079a6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	785b      	ldrb	r3, [r3, #1]
 800774e:	2b03      	cmp	r3, #3
 8007750:	d007      	beq.n	8007762 <USBD_StdEPReq+0x7a>
 8007752:	2b03      	cmp	r3, #3
 8007754:	f300 811b 	bgt.w	800798e <USBD_StdEPReq+0x2a6>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d072      	beq.n	8007842 <USBD_StdEPReq+0x15a>
 800775c:	2b01      	cmp	r3, #1
 800775e:	d03a      	beq.n	80077d6 <USBD_StdEPReq+0xee>
 8007760:	e115      	b.n	800798e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007768:	2b02      	cmp	r3, #2
 800776a:	d002      	beq.n	8007772 <USBD_StdEPReq+0x8a>
 800776c:	2b03      	cmp	r3, #3
 800776e:	d015      	beq.n	800779c <USBD_StdEPReq+0xb4>
 8007770:	e02b      	b.n	80077ca <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007772:	7bbb      	ldrb	r3, [r7, #14]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00c      	beq.n	8007792 <USBD_StdEPReq+0xaa>
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	2b80      	cmp	r3, #128	; 0x80
 800777c:	d009      	beq.n	8007792 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800777e:	7bbb      	ldrb	r3, [r7, #14]
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 f884 	bl	8008890 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007788:	2180      	movs	r1, #128	; 0x80
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f001 f880 	bl	8008890 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007790:	e020      	b.n	80077d4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fc1e 	bl	8007fd6 <USBD_CtlError>
              break;
 800779a:	e01b      	b.n	80077d4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	885b      	ldrh	r3, [r3, #2]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10e      	bne.n	80077c2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00b      	beq.n	80077c2 <USBD_StdEPReq+0xda>
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	2b80      	cmp	r3, #128	; 0x80
 80077ae:	d008      	beq.n	80077c2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	88db      	ldrh	r3, [r3, #6]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d104      	bne.n	80077c2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80077b8:	7bbb      	ldrb	r3, [r7, #14]
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 f867 	bl	8008890 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fccf 	bl	8008166 <USBD_CtlSendStatus>

              break;
 80077c8:	e004      	b.n	80077d4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fc02 	bl	8007fd6 <USBD_CtlError>
              break;
 80077d2:	bf00      	nop
          }
          break;
 80077d4:	e0e0      	b.n	8007998 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d002      	beq.n	80077e6 <USBD_StdEPReq+0xfe>
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d015      	beq.n	8007810 <USBD_StdEPReq+0x128>
 80077e4:	e026      	b.n	8007834 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00c      	beq.n	8007806 <USBD_StdEPReq+0x11e>
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	2b80      	cmp	r3, #128	; 0x80
 80077f0:	d009      	beq.n	8007806 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f001 f84a 	bl	8008890 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80077fc:	2180      	movs	r1, #128	; 0x80
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 f846 	bl	8008890 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007804:	e01c      	b.n	8007840 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fbe4 	bl	8007fd6 <USBD_CtlError>
              break;
 800780e:	e017      	b.n	8007840 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	885b      	ldrh	r3, [r3, #2]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d112      	bne.n	800783e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007818:	7bbb      	ldrb	r3, [r7, #14]
 800781a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800781e:	2b00      	cmp	r3, #0
 8007820:	d004      	beq.n	800782c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007822:	7bbb      	ldrb	r3, [r7, #14]
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 f851 	bl	80088ce <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fc9a 	bl	8008166 <USBD_CtlSendStatus>
              }
              break;
 8007832:	e004      	b.n	800783e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fbcd 	bl	8007fd6 <USBD_CtlError>
              break;
 800783c:	e000      	b.n	8007840 <USBD_StdEPReq+0x158>
              break;
 800783e:	bf00      	nop
          }
          break;
 8007840:	e0aa      	b.n	8007998 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007848:	2b02      	cmp	r3, #2
 800784a:	d002      	beq.n	8007852 <USBD_StdEPReq+0x16a>
 800784c:	2b03      	cmp	r3, #3
 800784e:	d032      	beq.n	80078b6 <USBD_StdEPReq+0x1ce>
 8007850:	e097      	b.n	8007982 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d007      	beq.n	8007868 <USBD_StdEPReq+0x180>
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	2b80      	cmp	r3, #128	; 0x80
 800785c:	d004      	beq.n	8007868 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fbb8 	bl	8007fd6 <USBD_CtlError>
                break;
 8007866:	e091      	b.n	800798c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800786c:	2b00      	cmp	r3, #0
 800786e:	da0b      	bge.n	8007888 <USBD_StdEPReq+0x1a0>
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007876:	4613      	mov	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	3310      	adds	r3, #16
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	4413      	add	r3, r2
 8007884:	3304      	adds	r3, #4
 8007886:	e00b      	b.n	80078a0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	4413      	add	r3, r2
 800789e:	3304      	adds	r3, #4
 80078a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2202      	movs	r2, #2
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fbfb 	bl	80080aa <USBD_CtlSendData>
              break;
 80078b4:	e06a      	b.n	800798c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	da11      	bge.n	80078e2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	f003 020f 	and.w	r2, r3, #15
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	440b      	add	r3, r1
 80078d0:	3318      	adds	r3, #24
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d117      	bne.n	8007908 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fb7b 	bl	8007fd6 <USBD_CtlError>
                  break;
 80078e0:	e054      	b.n	800798c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	f003 020f 	and.w	r2, r3, #15
 80078e8:	6879      	ldr	r1, [r7, #4]
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	440b      	add	r3, r1
 80078f4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d104      	bne.n	8007908 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fb68 	bl	8007fd6 <USBD_CtlError>
                  break;
 8007906:	e041      	b.n	800798c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800790c:	2b00      	cmp	r3, #0
 800790e:	da0b      	bge.n	8007928 <USBD_StdEPReq+0x240>
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	3310      	adds	r3, #16
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	4413      	add	r3, r2
 8007924:	3304      	adds	r3, #4
 8007926:	e00b      	b.n	8007940 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800792e:	4613      	mov	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	4413      	add	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	3304      	adds	r3, #4
 8007940:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <USBD_StdEPReq+0x266>
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b80      	cmp	r3, #128	; 0x80
 800794c:	d103      	bne.n	8007956 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	e00e      	b.n	8007974 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 ffd6 	bl	800890c <USBD_LL_IsStallEP>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d003      	beq.n	800796e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2201      	movs	r2, #1
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	e002      	b.n	8007974 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2200      	movs	r2, #0
 8007972:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2202      	movs	r2, #2
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fb95 	bl	80080aa <USBD_CtlSendData>
              break;
 8007980:	e004      	b.n	800798c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fb26 	bl	8007fd6 <USBD_CtlError>
              break;
 800798a:	bf00      	nop
          }
          break;
 800798c:	e004      	b.n	8007998 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fb20 	bl	8007fd6 <USBD_CtlError>
          break;
 8007996:	bf00      	nop
      }
      break;
 8007998:	e004      	b.n	80079a4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fb1a 	bl	8007fd6 <USBD_CtlError>
      break;
 80079a2:	bf00      	nop
  }

  return ret;
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079c2:	2300      	movs	r3, #0
 80079c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	885b      	ldrh	r3, [r3, #2]
 80079ca:	0a1b      	lsrs	r3, r3, #8
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	3b01      	subs	r3, #1
 80079d0:	2b06      	cmp	r3, #6
 80079d2:	f200 8128 	bhi.w	8007c26 <USBD_GetDescriptor+0x276>
 80079d6:	a201      	add	r2, pc, #4	; (adr r2, 80079dc <USBD_GetDescriptor+0x2c>)
 80079d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079dc:	080079f9 	.word	0x080079f9
 80079e0:	08007a11 	.word	0x08007a11
 80079e4:	08007a51 	.word	0x08007a51
 80079e8:	08007c27 	.word	0x08007c27
 80079ec:	08007c27 	.word	0x08007c27
 80079f0:	08007bc7 	.word	0x08007bc7
 80079f4:	08007bf3 	.word	0x08007bf3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	7c12      	ldrb	r2, [r2, #16]
 8007a04:	f107 0108 	add.w	r1, r7, #8
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4798      	blx	r3
 8007a0c:	60f8      	str	r0, [r7, #12]
      break;
 8007a0e:	e112      	b.n	8007c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	7c1b      	ldrb	r3, [r3, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10d      	bne.n	8007a34 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a20:	f107 0208 	add.w	r2, r7, #8
 8007a24:	4610      	mov	r0, r2
 8007a26:	4798      	blx	r3
 8007a28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	2202      	movs	r2, #2
 8007a30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a32:	e100      	b.n	8007c36 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	f107 0208 	add.w	r2, r7, #8
 8007a40:	4610      	mov	r0, r2
 8007a42:	4798      	blx	r3
 8007a44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	701a      	strb	r2, [r3, #0]
      break;
 8007a4e:	e0f2      	b.n	8007c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	885b      	ldrh	r3, [r3, #2]
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b05      	cmp	r3, #5
 8007a58:	f200 80ac 	bhi.w	8007bb4 <USBD_GetDescriptor+0x204>
 8007a5c:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <USBD_GetDescriptor+0xb4>)
 8007a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a62:	bf00      	nop
 8007a64:	08007a7d 	.word	0x08007a7d
 8007a68:	08007ab1 	.word	0x08007ab1
 8007a6c:	08007ae5 	.word	0x08007ae5
 8007a70:	08007b19 	.word	0x08007b19
 8007a74:	08007b4d 	.word	0x08007b4d
 8007a78:	08007b81 	.word	0x08007b81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00b      	beq.n	8007aa0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	7c12      	ldrb	r2, [r2, #16]
 8007a94:	f107 0108 	add.w	r1, r7, #8
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4798      	blx	r3
 8007a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a9e:	e091      	b.n	8007bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fa97 	bl	8007fd6 <USBD_CtlError>
            err++;
 8007aa8:	7afb      	ldrb	r3, [r7, #11]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	72fb      	strb	r3, [r7, #11]
          break;
 8007aae:	e089      	b.n	8007bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00b      	beq.n	8007ad4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	7c12      	ldrb	r2, [r2, #16]
 8007ac8:	f107 0108 	add.w	r1, r7, #8
 8007acc:	4610      	mov	r0, r2
 8007ace:	4798      	blx	r3
 8007ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ad2:	e077      	b.n	8007bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fa7d 	bl	8007fd6 <USBD_CtlError>
            err++;
 8007adc:	7afb      	ldrb	r3, [r7, #11]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ae2:	e06f      	b.n	8007bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	7c12      	ldrb	r2, [r2, #16]
 8007afc:	f107 0108 	add.w	r1, r7, #8
 8007b00:	4610      	mov	r0, r2
 8007b02:	4798      	blx	r3
 8007b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b06:	e05d      	b.n	8007bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fa63 	bl	8007fd6 <USBD_CtlError>
            err++;
 8007b10:	7afb      	ldrb	r3, [r7, #11]
 8007b12:	3301      	adds	r3, #1
 8007b14:	72fb      	strb	r3, [r7, #11]
          break;
 8007b16:	e055      	b.n	8007bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00b      	beq.n	8007b3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	7c12      	ldrb	r2, [r2, #16]
 8007b30:	f107 0108 	add.w	r1, r7, #8
 8007b34:	4610      	mov	r0, r2
 8007b36:	4798      	blx	r3
 8007b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b3a:	e043      	b.n	8007bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fa49 	bl	8007fd6 <USBD_CtlError>
            err++;
 8007b44:	7afb      	ldrb	r3, [r7, #11]
 8007b46:	3301      	adds	r3, #1
 8007b48:	72fb      	strb	r3, [r7, #11]
          break;
 8007b4a:	e03b      	b.n	8007bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00b      	beq.n	8007b70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b5e:	695b      	ldr	r3, [r3, #20]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	7c12      	ldrb	r2, [r2, #16]
 8007b64:	f107 0108 	add.w	r1, r7, #8
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4798      	blx	r3
 8007b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b6e:	e029      	b.n	8007bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa2f 	bl	8007fd6 <USBD_CtlError>
            err++;
 8007b78:	7afb      	ldrb	r3, [r7, #11]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b7e:	e021      	b.n	8007bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	7c12      	ldrb	r2, [r2, #16]
 8007b98:	f107 0108 	add.w	r1, r7, #8
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
 8007ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ba2:	e00f      	b.n	8007bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fa15 	bl	8007fd6 <USBD_CtlError>
            err++;
 8007bac:	7afb      	ldrb	r3, [r7, #11]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bb2:	e007      	b.n	8007bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa0d 	bl	8007fd6 <USBD_CtlError>
          err++;
 8007bbc:	7afb      	ldrb	r3, [r7, #11]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007bc2:	e038      	b.n	8007c36 <USBD_GetDescriptor+0x286>
 8007bc4:	e037      	b.n	8007c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	7c1b      	ldrb	r3, [r3, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d109      	bne.n	8007be2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd6:	f107 0208 	add.w	r2, r7, #8
 8007bda:	4610      	mov	r0, r2
 8007bdc:	4798      	blx	r3
 8007bde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007be0:	e029      	b.n	8007c36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f9f6 	bl	8007fd6 <USBD_CtlError>
        err++;
 8007bea:	7afb      	ldrb	r3, [r7, #11]
 8007bec:	3301      	adds	r3, #1
 8007bee:	72fb      	strb	r3, [r7, #11]
      break;
 8007bf0:	e021      	b.n	8007c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	7c1b      	ldrb	r3, [r3, #16]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10d      	bne.n	8007c16 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c02:	f107 0208 	add.w	r2, r7, #8
 8007c06:	4610      	mov	r0, r2
 8007c08:	4798      	blx	r3
 8007c0a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	2207      	movs	r2, #7
 8007c12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c14:	e00f      	b.n	8007c36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c16:	6839      	ldr	r1, [r7, #0]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f9dc 	bl	8007fd6 <USBD_CtlError>
        err++;
 8007c1e:	7afb      	ldrb	r3, [r7, #11]
 8007c20:	3301      	adds	r3, #1
 8007c22:	72fb      	strb	r3, [r7, #11]
      break;
 8007c24:	e007      	b.n	8007c36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f9d4 	bl	8007fd6 <USBD_CtlError>
      err++;
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	3301      	adds	r3, #1
 8007c32:	72fb      	strb	r3, [r7, #11]
      break;
 8007c34:	bf00      	nop
  }

  if (err != 0U)
 8007c36:	7afb      	ldrb	r3, [r7, #11]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d11c      	bne.n	8007c76 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c3c:	893b      	ldrh	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d011      	beq.n	8007c66 <USBD_GetDescriptor+0x2b6>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	88db      	ldrh	r3, [r3, #6]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00d      	beq.n	8007c66 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	88da      	ldrh	r2, [r3, #6]
 8007c4e:	893b      	ldrh	r3, [r7, #8]
 8007c50:	4293      	cmp	r3, r2
 8007c52:	bf28      	it	cs
 8007c54:	4613      	movcs	r3, r2
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c5a:	893b      	ldrh	r3, [r7, #8]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	68f9      	ldr	r1, [r7, #12]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fa22 	bl	80080aa <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	88db      	ldrh	r3, [r3, #6]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d104      	bne.n	8007c78 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa79 	bl	8008166 <USBD_CtlSendStatus>
 8007c74:	e000      	b.n	8007c78 <USBD_GetDescriptor+0x2c8>
    return;
 8007c76:	bf00      	nop
    }
  }
}
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop

08007c80 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	889b      	ldrh	r3, [r3, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d130      	bne.n	8007cf4 <USBD_SetAddress+0x74>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	88db      	ldrh	r3, [r3, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d12c      	bne.n	8007cf4 <USBD_SetAddress+0x74>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	885b      	ldrh	r3, [r3, #2]
 8007c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8007ca0:	d828      	bhi.n	8007cf4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	885b      	ldrh	r3, [r3, #2]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d104      	bne.n	8007cc2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f98b 	bl	8007fd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc0:	e01d      	b.n	8007cfe <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7bfa      	ldrb	r2, [r7, #15]
 8007cc6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fe48 	bl	8008964 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fa46 	bl	8008166 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d004      	beq.n	8007cea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ce8:	e009      	b.n	8007cfe <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf2:	e004      	b.n	8007cfe <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f96d 	bl	8007fd6 <USBD_CtlError>
  }
}
 8007cfc:	bf00      	nop
 8007cfe:	bf00      	nop
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	885b      	ldrh	r3, [r3, #2]
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	4b41      	ldr	r3, [pc, #260]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d1c:	4b40      	ldr	r3, [pc, #256]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d904      	bls.n	8007d2e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f955 	bl	8007fd6 <USBD_CtlError>
 8007d2c:	e075      	b.n	8007e1a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d002      	beq.n	8007d3e <USBD_SetConfig+0x36>
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d023      	beq.n	8007d84 <USBD_SetConfig+0x7c>
 8007d3c:	e062      	b.n	8007e04 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d3e:	4b38      	ldr	r3, [pc, #224]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d01a      	beq.n	8007d7c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007d46:	4b36      	ldr	r3, [pc, #216]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2203      	movs	r2, #3
 8007d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d58:	4b31      	ldr	r3, [pc, #196]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff f9e7 	bl	8007132 <USBD_SetClassConfig>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d104      	bne.n	8007d74 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f932 	bl	8007fd6 <USBD_CtlError>
            return;
 8007d72:	e052      	b.n	8007e1a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f9f6 	bl	8008166 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d7a:	e04e      	b.n	8007e1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f9f2 	bl	8008166 <USBD_CtlSendStatus>
        break;
 8007d82:	e04a      	b.n	8007e1a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007d84:	4b26      	ldr	r3, [pc, #152]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d112      	bne.n	8007db2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007d94:	4b22      	ldr	r3, [pc, #136]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007d9e:	4b20      	ldr	r3, [pc, #128]	; (8007e20 <USBD_SetConfig+0x118>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff f9e3 	bl	8007170 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f9db 	bl	8008166 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007db0:	e033      	b.n	8007e1a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007db2:	4b1b      	ldr	r3, [pc, #108]	; (8007e20 <USBD_SetConfig+0x118>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d01d      	beq.n	8007dfc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7ff f9d1 	bl	8007170 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007dce:	4b14      	ldr	r3, [pc, #80]	; (8007e20 <USBD_SetConfig+0x118>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007dd8:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <USBD_SetConfig+0x118>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff f9a7 	bl	8007132 <USBD_SetClassConfig>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d104      	bne.n	8007df4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f8f2 	bl	8007fd6 <USBD_CtlError>
            return;
 8007df2:	e012      	b.n	8007e1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f9b6 	bl	8008166 <USBD_CtlSendStatus>
        break;
 8007dfa:	e00e      	b.n	8007e1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f9b2 	bl	8008166 <USBD_CtlSendStatus>
        break;
 8007e02:	e00a      	b.n	8007e1a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f8e5 	bl	8007fd6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e0c:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <USBD_SetConfig+0x118>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff f9ac 	bl	8007170 <USBD_ClrClassConfig>
        break;
 8007e18:	bf00      	nop
    }
  }
}
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20000270 	.word	0x20000270

08007e24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	88db      	ldrh	r3, [r3, #6]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d004      	beq.n	8007e40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f8cc 	bl	8007fd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e3e:	e022      	b.n	8007e86 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	dc02      	bgt.n	8007e50 <USBD_GetConfig+0x2c>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	dc03      	bgt.n	8007e56 <USBD_GetConfig+0x32>
 8007e4e:	e015      	b.n	8007e7c <USBD_GetConfig+0x58>
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d00b      	beq.n	8007e6c <USBD_GetConfig+0x48>
 8007e54:	e012      	b.n	8007e7c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3308      	adds	r3, #8
 8007e60:	2201      	movs	r2, #1
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f920 	bl	80080aa <USBD_CtlSendData>
        break;
 8007e6a:	e00c      	b.n	8007e86 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	2201      	movs	r2, #1
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f918 	bl	80080aa <USBD_CtlSendData>
        break;
 8007e7a:	e004      	b.n	8007e86 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f8a9 	bl	8007fd6 <USBD_CtlError>
        break;
 8007e84:	bf00      	nop
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	2b02      	cmp	r3, #2
 8007ea2:	d81e      	bhi.n	8007ee2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	88db      	ldrh	r3, [r3, #6]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d004      	beq.n	8007eb6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f891 	bl	8007fd6 <USBD_CtlError>
        break;
 8007eb4:	e01a      	b.n	8007eec <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f043 0202 	orr.w	r2, r3, #2
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f8e5 	bl	80080aa <USBD_CtlSendData>
      break;
 8007ee0:	e004      	b.n	8007eec <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f876 	bl	8007fd6 <USBD_CtlError>
      break;
 8007eea:	bf00      	nop
  }
}
 8007eec:	bf00      	nop
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	885b      	ldrh	r3, [r3, #2]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d106      	bne.n	8007f14 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f929 	bl	8008166 <USBD_CtlSendStatus>
  }
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d80b      	bhi.n	8007f4a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	885b      	ldrh	r3, [r3, #2]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d10c      	bne.n	8007f54 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f90f 	bl	8008166 <USBD_CtlSendStatus>
      }
      break;
 8007f48:	e004      	b.n	8007f54 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f842 	bl	8007fd6 <USBD_CtlError>
      break;
 8007f52:	e000      	b.n	8007f56 <USBD_ClrFeature+0x3a>
      break;
 8007f54:	bf00      	nop
  }
}
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781a      	ldrb	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	785a      	ldrb	r2, [r3, #1]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	3302      	adds	r3, #2
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	3303      	adds	r3, #3
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	021b      	lsls	r3, r3, #8
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	3304      	adds	r3, #4
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	3305      	adds	r3, #5
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	021b      	lsls	r3, r3, #8
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	4413      	add	r3, r2
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	3306      	adds	r3, #6
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	3307      	adds	r3, #7
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	021b      	lsls	r3, r3, #8
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	4413      	add	r3, r2
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	80da      	strh	r2, [r3, #6]

}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bc80      	pop	{r7}
 8007fd4:	4770      	bx	lr

08007fd6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b082      	sub	sp, #8
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007fe0:	2180      	movs	r1, #128	; 0x80
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fc54 	bl	8008890 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007fe8:	2100      	movs	r1, #0
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fc50 	bl	8008890 <USBD_LL_StallEP>
}
 8007ff0:	bf00      	nop
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d032      	beq.n	8008074 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 f834 	bl	800807c <USBD_GetLen>
 8008014:	4603      	mov	r3, r0
 8008016:	3301      	adds	r3, #1
 8008018:	b29b      	uxth	r3, r3
 800801a:	005b      	lsls	r3, r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	75fa      	strb	r2, [r7, #23]
 8008028:	461a      	mov	r2, r3
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	4413      	add	r3, r2
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	7812      	ldrb	r2, [r2, #0]
 8008032:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	75fa      	strb	r2, [r7, #23]
 800803a:	461a      	mov	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	4413      	add	r3, r2
 8008040:	2203      	movs	r2, #3
 8008042:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008044:	e012      	b.n	800806c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	60fa      	str	r2, [r7, #12]
 800804c:	7dfa      	ldrb	r2, [r7, #23]
 800804e:	1c51      	adds	r1, r2, #1
 8008050:	75f9      	strb	r1, [r7, #23]
 8008052:	4611      	mov	r1, r2
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	440a      	add	r2, r1
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	75fa      	strb	r2, [r7, #23]
 8008062:	461a      	mov	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4413      	add	r3, r2
 8008068:	2200      	movs	r2, #0
 800806a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e8      	bne.n	8008046 <USBD_GetString+0x4e>
    }
  }
}
 8008074:	bf00      	nop
 8008076:	3718      	adds	r7, #24
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008088:	e005      	b.n	8008096 <USBD_GetLen+0x1a>
  {
    len++;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
 800808c:	3301      	adds	r3, #1
 800808e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3301      	adds	r3, #1
 8008094:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1f5      	bne.n	800808a <USBD_GetLen+0xe>
  }

  return len;
 800809e:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bc80      	pop	{r7}
 80080a8:	4770      	bx	lr

080080aa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	60f8      	str	r0, [r7, #12]
 80080b2:	60b9      	str	r1, [r7, #8]
 80080b4:	4613      	mov	r3, r2
 80080b6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080c0:	88fa      	ldrh	r2, [r7, #6]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80080c6:	88fa      	ldrh	r2, [r7, #6]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080cc:	88fb      	ldrh	r3, [r7, #6]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	2100      	movs	r1, #0
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f000 fc65 	bl	80089a2 <USBD_LL_Transmit>

  return USBD_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	60f8      	str	r0, [r7, #12]
 80080ea:	60b9      	str	r1, [r7, #8]
 80080ec:	4613      	mov	r3, r2
 80080ee:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	2100      	movs	r1, #0
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 fc53 	bl	80089a2 <USBD_LL_Transmit>

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	4613      	mov	r3, r2
 8008112:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2203      	movs	r2, #3
 8008118:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800811c:	88fa      	ldrh	r2, [r7, #6]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008124:	88fa      	ldrh	r2, [r7, #6]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800812c:	88fb      	ldrh	r3, [r7, #6]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	2100      	movs	r1, #0
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 fc58 	bl	80089e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	4613      	mov	r3, r2
 800814e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008150:	88fb      	ldrh	r3, [r7, #6]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	2100      	movs	r1, #0
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 fc46 	bl	80089e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2204      	movs	r2, #4
 8008172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008176:	2300      	movs	r3, #0
 8008178:	2200      	movs	r2, #0
 800817a:	2100      	movs	r1, #0
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fc10 	bl	80089a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2205      	movs	r2, #5
 8008198:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800819c:	2300      	movs	r3, #0
 800819e:	2200      	movs	r2, #0
 80081a0:	2100      	movs	r1, #0
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fc20 	bl	80089e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
	...

080081b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081b8:	2200      	movs	r2, #0
 80081ba:	4912      	ldr	r1, [pc, #72]	; (8008204 <MX_USB_DEVICE_Init+0x50>)
 80081bc:	4812      	ldr	r0, [pc, #72]	; (8008208 <MX_USB_DEVICE_Init+0x54>)
 80081be:	f7fe ff5e 	bl	800707e <USBD_Init>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d001      	beq.n	80081cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081c8:	f7f8 fdc6 	bl	8000d58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081cc:	490f      	ldr	r1, [pc, #60]	; (800820c <MX_USB_DEVICE_Init+0x58>)
 80081ce:	480e      	ldr	r0, [pc, #56]	; (8008208 <MX_USB_DEVICE_Init+0x54>)
 80081d0:	f7fe ff80 	bl	80070d4 <USBD_RegisterClass>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d001      	beq.n	80081de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081da:	f7f8 fdbd 	bl	8000d58 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081de:	490c      	ldr	r1, [pc, #48]	; (8008210 <MX_USB_DEVICE_Init+0x5c>)
 80081e0:	4809      	ldr	r0, [pc, #36]	; (8008208 <MX_USB_DEVICE_Init+0x54>)
 80081e2:	f7fe feb1 	bl	8006f48 <USBD_CDC_RegisterInterface>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081ec:	f7f8 fdb4 	bl	8000d58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081f0:	4805      	ldr	r0, [pc, #20]	; (8008208 <MX_USB_DEVICE_Init+0x54>)
 80081f2:	f7fe ff88 	bl	8007106 <USBD_Start>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081fc:	f7f8 fdac 	bl	8000d58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008200:	bf00      	nop
 8008202:	bd80      	pop	{r7, pc}
 8008204:	2000012c 	.word	0x2000012c
 8008208:	20000274 	.word	0x20000274
 800820c:	20000018 	.word	0x20000018
 8008210:	2000011c 	.word	0x2000011c

08008214 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008218:	2200      	movs	r2, #0
 800821a:	4905      	ldr	r1, [pc, #20]	; (8008230 <CDC_Init_FS+0x1c>)
 800821c:	4805      	ldr	r0, [pc, #20]	; (8008234 <CDC_Init_FS+0x20>)
 800821e:	f7fe fea9 	bl	8006f74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008222:	4905      	ldr	r1, [pc, #20]	; (8008238 <CDC_Init_FS+0x24>)
 8008224:	4803      	ldr	r0, [pc, #12]	; (8008234 <CDC_Init_FS+0x20>)
 8008226:	f7fe febe 	bl	8006fa6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800822a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800822c:	4618      	mov	r0, r3
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20000938 	.word	0x20000938
 8008234:	20000274 	.word	0x20000274
 8008238:	20000538 	.word	0x20000538

0800823c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008240:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008242:	4618      	mov	r0, r3
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr
	...

0800824c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	4603      	mov	r3, r0
 8008254:	6039      	str	r1, [r7, #0]
 8008256:	71fb      	strb	r3, [r7, #7]
 8008258:	4613      	mov	r3, r2
 800825a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	2b23      	cmp	r3, #35	; 0x23
 8008260:	d84a      	bhi.n	80082f8 <CDC_Control_FS+0xac>
 8008262:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <CDC_Control_FS+0x1c>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	080082f9 	.word	0x080082f9
 800826c:	080082f9 	.word	0x080082f9
 8008270:	080082f9 	.word	0x080082f9
 8008274:	080082f9 	.word	0x080082f9
 8008278:	080082f9 	.word	0x080082f9
 800827c:	080082f9 	.word	0x080082f9
 8008280:	080082f9 	.word	0x080082f9
 8008284:	080082f9 	.word	0x080082f9
 8008288:	080082f9 	.word	0x080082f9
 800828c:	080082f9 	.word	0x080082f9
 8008290:	080082f9 	.word	0x080082f9
 8008294:	080082f9 	.word	0x080082f9
 8008298:	080082f9 	.word	0x080082f9
 800829c:	080082f9 	.word	0x080082f9
 80082a0:	080082f9 	.word	0x080082f9
 80082a4:	080082f9 	.word	0x080082f9
 80082a8:	080082f9 	.word	0x080082f9
 80082ac:	080082f9 	.word	0x080082f9
 80082b0:	080082f9 	.word	0x080082f9
 80082b4:	080082f9 	.word	0x080082f9
 80082b8:	080082f9 	.word	0x080082f9
 80082bc:	080082f9 	.word	0x080082f9
 80082c0:	080082f9 	.word	0x080082f9
 80082c4:	080082f9 	.word	0x080082f9
 80082c8:	080082f9 	.word	0x080082f9
 80082cc:	080082f9 	.word	0x080082f9
 80082d0:	080082f9 	.word	0x080082f9
 80082d4:	080082f9 	.word	0x080082f9
 80082d8:	080082f9 	.word	0x080082f9
 80082dc:	080082f9 	.word	0x080082f9
 80082e0:	080082f9 	.word	0x080082f9
 80082e4:	080082f9 	.word	0x080082f9
 80082e8:	080082f9 	.word	0x080082f9
 80082ec:	080082f9 	.word	0x080082f9
 80082f0:	080082f9 	.word	0x080082f9
 80082f4:	080082f9 	.word	0x080082f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80082f8:	bf00      	nop
  }

  return (USBD_OK);
 80082fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	bc80      	pop	{r7}
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop

08008308 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	4805      	ldr	r0, [pc, #20]	; (800832c <CDC_Receive_FS+0x24>)
 8008316:	f7fe fe46 	bl	8006fa6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800831a:	4804      	ldr	r0, [pc, #16]	; (800832c <CDC_Receive_FS+0x24>)
 800831c:	f7fe fe85 	bl	800702a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008320:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008322:	4618      	mov	r0, r3
 8008324:	3708      	adds	r7, #8
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20000274 	.word	0x20000274

08008330 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008340:	4b0d      	ldr	r3, [pc, #52]	; (8008378 <CDC_Transmit_FS+0x48>)
 8008342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008346:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008352:	2301      	movs	r3, #1
 8008354:	e00b      	b.n	800836e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008356:	887b      	ldrh	r3, [r7, #2]
 8008358:	461a      	mov	r2, r3
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	4806      	ldr	r0, [pc, #24]	; (8008378 <CDC_Transmit_FS+0x48>)
 800835e:	f7fe fe09 	bl	8006f74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008362:	4805      	ldr	r0, [pc, #20]	; (8008378 <CDC_Transmit_FS+0x48>)
 8008364:	f7fe fe32 	bl	8006fcc <USBD_CDC_TransmitPacket>
 8008368:	4603      	mov	r3, r0
 800836a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800836c:	7bfb      	ldrb	r3, [r7, #15]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20000274 	.word	0x20000274

0800837c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	6039      	str	r1, [r7, #0]
 8008386:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2212      	movs	r2, #18
 800838c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800838e:	4b03      	ldr	r3, [pc, #12]	; (800839c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	bc80      	pop	{r7}
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	20000148 	.word	0x20000148

080083a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	6039      	str	r1, [r7, #0]
 80083aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	2204      	movs	r2, #4
 80083b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80083b2:	4b03      	ldr	r3, [pc, #12]	; (80083c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	2000015c 	.word	0x2000015c

080083c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	6039      	str	r1, [r7, #0]
 80083ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d105      	bne.n	80083e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	4907      	ldr	r1, [pc, #28]	; (80083f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80083da:	4808      	ldr	r0, [pc, #32]	; (80083fc <USBD_FS_ProductStrDescriptor+0x38>)
 80083dc:	f7ff fe0c 	bl	8007ff8 <USBD_GetString>
 80083e0:	e004      	b.n	80083ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	4904      	ldr	r1, [pc, #16]	; (80083f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80083e6:	4805      	ldr	r0, [pc, #20]	; (80083fc <USBD_FS_ProductStrDescriptor+0x38>)
 80083e8:	f7ff fe06 	bl	8007ff8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083ec:	4b02      	ldr	r3, [pc, #8]	; (80083f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000d38 	.word	0x20000d38
 80083fc:	08009670 	.word	0x08009670

08008400 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	6039      	str	r1, [r7, #0]
 800840a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	4904      	ldr	r1, [pc, #16]	; (8008420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008410:	4804      	ldr	r0, [pc, #16]	; (8008424 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008412:	f7ff fdf1 	bl	8007ff8 <USBD_GetString>
  return USBD_StrDesc;
 8008416:	4b02      	ldr	r3, [pc, #8]	; (8008420 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008418:	4618      	mov	r0, r3
 800841a:	3708      	adds	r7, #8
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20000d38 	.word	0x20000d38
 8008424:	08009688 	.word	0x08009688

08008428 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	4603      	mov	r3, r0
 8008430:	6039      	str	r1, [r7, #0]
 8008432:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	221a      	movs	r2, #26
 8008438:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800843a:	f000 f843 	bl	80084c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800843e:	4b02      	ldr	r3, [pc, #8]	; (8008448 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008440:	4618      	mov	r0, r3
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20000160 	.word	0x20000160

0800844c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	4603      	mov	r3, r0
 8008454:	6039      	str	r1, [r7, #0]
 8008456:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008458:	79fb      	ldrb	r3, [r7, #7]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d105      	bne.n	800846a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	4907      	ldr	r1, [pc, #28]	; (8008480 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008462:	4808      	ldr	r0, [pc, #32]	; (8008484 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008464:	f7ff fdc8 	bl	8007ff8 <USBD_GetString>
 8008468:	e004      	b.n	8008474 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	4904      	ldr	r1, [pc, #16]	; (8008480 <USBD_FS_ConfigStrDescriptor+0x34>)
 800846e:	4805      	ldr	r0, [pc, #20]	; (8008484 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008470:	f7ff fdc2 	bl	8007ff8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008474:	4b02      	ldr	r3, [pc, #8]	; (8008480 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20000d38 	.word	0x20000d38
 8008484:	0800969c 	.word	0x0800969c

08008488 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	6039      	str	r1, [r7, #0]
 8008492:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d105      	bne.n	80084a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800849a:	683a      	ldr	r2, [r7, #0]
 800849c:	4907      	ldr	r1, [pc, #28]	; (80084bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800849e:	4808      	ldr	r0, [pc, #32]	; (80084c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084a0:	f7ff fdaa 	bl	8007ff8 <USBD_GetString>
 80084a4:	e004      	b.n	80084b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	4904      	ldr	r1, [pc, #16]	; (80084bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084aa:	4805      	ldr	r0, [pc, #20]	; (80084c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80084ac:	f7ff fda4 	bl	8007ff8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084b0:	4b02      	ldr	r3, [pc, #8]	; (80084bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20000d38 	.word	0x20000d38
 80084c0:	080096a8 	.word	0x080096a8

080084c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084ca:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <Get_SerialNum+0x44>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084d0:	4b0e      	ldr	r3, [pc, #56]	; (800850c <Get_SerialNum+0x48>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084d6:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <Get_SerialNum+0x4c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4413      	add	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d009      	beq.n	80084fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084ea:	2208      	movs	r2, #8
 80084ec:	4909      	ldr	r1, [pc, #36]	; (8008514 <Get_SerialNum+0x50>)
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 f814 	bl	800851c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084f4:	2204      	movs	r2, #4
 80084f6:	4908      	ldr	r1, [pc, #32]	; (8008518 <Get_SerialNum+0x54>)
 80084f8:	68b8      	ldr	r0, [r7, #8]
 80084fa:	f000 f80f 	bl	800851c <IntToUnicode>
  }
}
 80084fe:	bf00      	nop
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	1ffff7e8 	.word	0x1ffff7e8
 800850c:	1ffff7ec 	.word	0x1ffff7ec
 8008510:	1ffff7f0 	.word	0x1ffff7f0
 8008514:	20000162 	.word	0x20000162
 8008518:	20000172 	.word	0x20000172

0800851c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800851c:	b480      	push	{r7}
 800851e:	b087      	sub	sp, #28
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	4613      	mov	r3, r2
 8008528:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800852e:	2300      	movs	r3, #0
 8008530:	75fb      	strb	r3, [r7, #23]
 8008532:	e027      	b.n	8008584 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	0f1b      	lsrs	r3, r3, #28
 8008538:	2b09      	cmp	r3, #9
 800853a:	d80b      	bhi.n	8008554 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	0f1b      	lsrs	r3, r3, #28
 8008540:	b2da      	uxtb	r2, r3
 8008542:	7dfb      	ldrb	r3, [r7, #23]
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	4619      	mov	r1, r3
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	440b      	add	r3, r1
 800854c:	3230      	adds	r2, #48	; 0x30
 800854e:	b2d2      	uxtb	r2, r2
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	e00a      	b.n	800856a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	0f1b      	lsrs	r3, r3, #28
 8008558:	b2da      	uxtb	r2, r3
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	005b      	lsls	r3, r3, #1
 800855e:	4619      	mov	r1, r3
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	440b      	add	r3, r1
 8008564:	3237      	adds	r2, #55	; 0x37
 8008566:	b2d2      	uxtb	r2, r2
 8008568:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	011b      	lsls	r3, r3, #4
 800856e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008570:	7dfb      	ldrb	r3, [r7, #23]
 8008572:	005b      	lsls	r3, r3, #1
 8008574:	3301      	adds	r3, #1
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	4413      	add	r3, r2
 800857a:	2200      	movs	r2, #0
 800857c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800857e:	7dfb      	ldrb	r3, [r7, #23]
 8008580:	3301      	adds	r3, #1
 8008582:	75fb      	strb	r3, [r7, #23]
 8008584:	7dfa      	ldrb	r2, [r7, #23]
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	429a      	cmp	r2, r3
 800858a:	d3d3      	bcc.n	8008534 <IntToUnicode+0x18>
  }
}
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	371c      	adds	r7, #28
 8008592:	46bd      	mov	sp, r7
 8008594:	bc80      	pop	{r7}
 8008596:	4770      	bx	lr

08008598 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a0d      	ldr	r2, [pc, #52]	; (80085dc <HAL_PCD_MspInit+0x44>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d113      	bne.n	80085d2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80085aa:	4b0d      	ldr	r3, [pc, #52]	; (80085e0 <HAL_PCD_MspInit+0x48>)
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	4a0c      	ldr	r2, [pc, #48]	; (80085e0 <HAL_PCD_MspInit+0x48>)
 80085b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80085b4:	61d3      	str	r3, [r2, #28]
 80085b6:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <HAL_PCD_MspInit+0x48>)
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80085c2:	2200      	movs	r2, #0
 80085c4:	2100      	movs	r1, #0
 80085c6:	2014      	movs	r0, #20
 80085c8:	f7f9 fa57 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80085cc:	2014      	movs	r0, #20
 80085ce:	f7f9 fa70 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80085d2:	bf00      	nop
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	40005c00 	.word	0x40005c00
 80085e0:	40021000 	.word	0x40021000

080085e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80085f8:	4619      	mov	r1, r3
 80085fa:	4610      	mov	r0, r2
 80085fc:	f7fe fdcb 	bl	8007196 <USBD_LL_SetupStage>
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800861a:	78fa      	ldrb	r2, [r7, #3]
 800861c:	6879      	ldr	r1, [r7, #4]
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	440b      	add	r3, r1
 8008628:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	78fb      	ldrb	r3, [r7, #3]
 8008630:	4619      	mov	r1, r3
 8008632:	f7fe fdfd 	bl	8007230 <USBD_LL_DataOutStage>
}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008650:	78fa      	ldrb	r2, [r7, #3]
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	4613      	mov	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	00db      	lsls	r3, r3, #3
 800865c:	440b      	add	r3, r1
 800865e:	333c      	adds	r3, #60	; 0x3c
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	78fb      	ldrb	r3, [r7, #3]
 8008664:	4619      	mov	r1, r3
 8008666:	f7fe fe54 	bl	8007312 <USBD_LL_DataInStage>
}
 800866a:	bf00      	nop
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008680:	4618      	mov	r0, r3
 8008682:	f7fe ff64 	bl	800754e <USBD_LL_SOF>
}
 8008686:	bf00      	nop
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b084      	sub	sp, #16
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008696:	2301      	movs	r3, #1
 8008698:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d001      	beq.n	80086a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80086a2:	f7f8 fb59 	bl	8000d58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80086ac:	7bfa      	ldrb	r2, [r7, #15]
 80086ae:	4611      	mov	r1, r2
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fe ff14 	bl	80074de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fe fecd 	bl	800745c <USBD_LL_Reset>
}
 80086c2:	bf00      	nop
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe ff0e 	bl	80074fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086e8:	4b04      	ldr	r3, [pc, #16]	; (80086fc <HAL_PCD_SuspendCallback+0x30>)
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	4a03      	ldr	r2, [pc, #12]	; (80086fc <HAL_PCD_SuspendCallback+0x30>)
 80086ee:	f043 0306 	orr.w	r3, r3, #6
 80086f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086f4:	bf00      	nop
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	e000ed00 	.word	0xe000ed00

08008700 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800870e:	4618      	mov	r0, r3
 8008710:	f7fe ff08 	bl	8007524 <USBD_LL_Resume>
}
 8008714:	bf00      	nop
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008724:	4a28      	ldr	r2, [pc, #160]	; (80087c8 <USBD_LL_Init+0xac>)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a26      	ldr	r2, [pc, #152]	; (80087c8 <USBD_LL_Init+0xac>)
 8008730:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008734:	4b24      	ldr	r3, [pc, #144]	; (80087c8 <USBD_LL_Init+0xac>)
 8008736:	4a25      	ldr	r2, [pc, #148]	; (80087cc <USBD_LL_Init+0xb0>)
 8008738:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800873a:	4b23      	ldr	r3, [pc, #140]	; (80087c8 <USBD_LL_Init+0xac>)
 800873c:	2208      	movs	r2, #8
 800873e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008740:	4b21      	ldr	r3, [pc, #132]	; (80087c8 <USBD_LL_Init+0xac>)
 8008742:	2202      	movs	r2, #2
 8008744:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008746:	4b20      	ldr	r3, [pc, #128]	; (80087c8 <USBD_LL_Init+0xac>)
 8008748:	2200      	movs	r2, #0
 800874a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800874c:	4b1e      	ldr	r3, [pc, #120]	; (80087c8 <USBD_LL_Init+0xac>)
 800874e:	2200      	movs	r2, #0
 8008750:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008752:	4b1d      	ldr	r3, [pc, #116]	; (80087c8 <USBD_LL_Init+0xac>)
 8008754:	2200      	movs	r2, #0
 8008756:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008758:	481b      	ldr	r0, [pc, #108]	; (80087c8 <USBD_LL_Init+0xac>)
 800875a:	f7f9 fb49 	bl	8001df0 <HAL_PCD_Init>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008764:	f7f8 faf8 	bl	8000d58 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800876e:	2318      	movs	r3, #24
 8008770:	2200      	movs	r2, #0
 8008772:	2100      	movs	r1, #0
 8008774:	f7fb f868 	bl	8003848 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800877e:	2358      	movs	r3, #88	; 0x58
 8008780:	2200      	movs	r2, #0
 8008782:	2180      	movs	r1, #128	; 0x80
 8008784:	f7fb f860 	bl	8003848 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800878e:	23c0      	movs	r3, #192	; 0xc0
 8008790:	2200      	movs	r2, #0
 8008792:	2181      	movs	r1, #129	; 0x81
 8008794:	f7fb f858 	bl	8003848 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800879e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80087a2:	2200      	movs	r2, #0
 80087a4:	2101      	movs	r1, #1
 80087a6:	f7fb f84f 	bl	8003848 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087b4:	2200      	movs	r2, #0
 80087b6:	2182      	movs	r1, #130	; 0x82
 80087b8:	f7fb f846 	bl	8003848 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20000f38 	.word	0x20000f38
 80087cc:	40005c00 	.word	0x40005c00

080087d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7f9 fc01 	bl	8001fee <HAL_PCD_Start>
 80087ec:	4603      	mov	r3, r0
 80087ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 f94e 	bl	8008a94 <USBD_Get_USB_Status>
 80087f8:	4603      	mov	r3, r0
 80087fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	4608      	mov	r0, r1
 8008810:	4611      	mov	r1, r2
 8008812:	461a      	mov	r2, r3
 8008814:	4603      	mov	r3, r0
 8008816:	70fb      	strb	r3, [r7, #3]
 8008818:	460b      	mov	r3, r1
 800881a:	70bb      	strb	r3, [r7, #2]
 800881c:	4613      	mov	r3, r2
 800881e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800882e:	78bb      	ldrb	r3, [r7, #2]
 8008830:	883a      	ldrh	r2, [r7, #0]
 8008832:	78f9      	ldrb	r1, [r7, #3]
 8008834:	f7f9 fd56 	bl	80022e4 <HAL_PCD_EP_Open>
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 f928 	bl	8008a94 <USBD_Get_USB_Status>
 8008844:	4603      	mov	r3, r0
 8008846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008848:	7bbb      	ldrb	r3, [r7, #14]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	460b      	mov	r3, r1
 800885c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	4611      	mov	r1, r2
 8008870:	4618      	mov	r0, r3
 8008872:	f7f9 fd94 	bl	800239e <HAL_PCD_EP_Close>
 8008876:	4603      	mov	r3, r0
 8008878:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	4618      	mov	r0, r3
 800887e:	f000 f909 	bl	8008a94 <USBD_Get_USB_Status>
 8008882:	4603      	mov	r3, r0
 8008884:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008886:	7bbb      	ldrb	r3, [r7, #14]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800889c:	2300      	movs	r3, #0
 800889e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088aa:	78fa      	ldrb	r2, [r7, #3]
 80088ac:	4611      	mov	r1, r2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7f9 fe3c 	bl	800252c <HAL_PCD_EP_SetStall>
 80088b4:	4603      	mov	r3, r0
 80088b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 f8ea 	bl	8008a94 <USBD_Get_USB_Status>
 80088c0:	4603      	mov	r3, r0
 80088c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b084      	sub	sp, #16
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	460b      	mov	r3, r1
 80088d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088e8:	78fa      	ldrb	r2, [r7, #3]
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7f9 fe7d 	bl	80025ec <HAL_PCD_EP_ClrStall>
 80088f2:	4603      	mov	r3, r0
 80088f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f000 f8cb 	bl	8008a94 <USBD_Get_USB_Status>
 80088fe:	4603      	mov	r3, r0
 8008900:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008902:	7bbb      	ldrb	r3, [r7, #14]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800891e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008920:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008924:	2b00      	cmp	r3, #0
 8008926:	da0c      	bge.n	8008942 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008928:	78fb      	ldrb	r3, [r7, #3]
 800892a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800892e:	68f9      	ldr	r1, [r7, #12]
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	4613      	mov	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	00db      	lsls	r3, r3, #3
 800893a:	440b      	add	r3, r1
 800893c:	3302      	adds	r3, #2
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	e00b      	b.n	800895a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008942:	78fb      	ldrb	r3, [r7, #3]
 8008944:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008948:	68f9      	ldr	r1, [r7, #12]
 800894a:	4613      	mov	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	00db      	lsls	r3, r3, #3
 8008952:	440b      	add	r3, r1
 8008954:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008958:	781b      	ldrb	r3, [r3, #0]
  }
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	bc80      	pop	{r7}
 8008962:	4770      	bx	lr

08008964 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800897e:	78fa      	ldrb	r2, [r7, #3]
 8008980:	4611      	mov	r1, r2
 8008982:	4618      	mov	r0, r3
 8008984:	f7f9 fc89 	bl	800229a <HAL_PCD_SetAddress>
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 f880 	bl	8008a94 <USBD_Get_USB_Status>
 8008994:	4603      	mov	r3, r0
 8008996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008998:	7bbb      	ldrb	r3, [r7, #14]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b086      	sub	sp, #24
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	607a      	str	r2, [r7, #4]
 80089ac:	461a      	mov	r2, r3
 80089ae:	460b      	mov	r3, r1
 80089b0:	72fb      	strb	r3, [r7, #11]
 80089b2:	4613      	mov	r3, r2
 80089b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b6:	2300      	movs	r3, #0
 80089b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089c4:	893b      	ldrh	r3, [r7, #8]
 80089c6:	7af9      	ldrb	r1, [r7, #11]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	f7f9 fd78 	bl	80024be <HAL_PCD_EP_Transmit>
 80089ce:	4603      	mov	r3, r0
 80089d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 f85d 	bl	8008a94 <USBD_Get_USB_Status>
 80089da:	4603      	mov	r3, r0
 80089dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80089de:	7dbb      	ldrb	r3, [r7, #22]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3718      	adds	r7, #24
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	607a      	str	r2, [r7, #4]
 80089f2:	461a      	mov	r2, r3
 80089f4:	460b      	mov	r3, r1
 80089f6:	72fb      	strb	r3, [r7, #11]
 80089f8:	4613      	mov	r3, r2
 80089fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a0a:	893b      	ldrh	r3, [r7, #8]
 8008a0c:	7af9      	ldrb	r1, [r7, #11]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	f7f9 fd0d 	bl	800242e <HAL_PCD_EP_Receive>
 8008a14:	4603      	mov	r3, r0
 8008a16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a18:	7dfb      	ldrb	r3, [r7, #23]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 f83a 	bl	8008a94 <USBD_Get_USB_Status>
 8008a20:	4603      	mov	r3, r0
 8008a22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a24:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	460b      	mov	r3, r1
 8008a38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a40:	78fa      	ldrb	r2, [r7, #3]
 8008a42:	4611      	mov	r1, r2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7f9 fd23 	bl	8002490 <HAL_PCD_EP_GetRxCount>
 8008a4a:	4603      	mov	r3, r0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a5c:	4b02      	ldr	r3, [pc, #8]	; (8008a68 <USBD_static_malloc+0x14>)
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bc80      	pop	{r7}
 8008a66:	4770      	bx	lr
 8008a68:	20001228 	.word	0x20001228

08008a6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]

}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bc80      	pop	{r7}
 8008a7c:	4770      	bx	lr

08008a7e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b083      	sub	sp, #12
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008a8a:	bf00      	nop
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bc80      	pop	{r7}
 8008a92:	4770      	bx	lr

08008a94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d817      	bhi.n	8008ad8 <USBD_Get_USB_Status+0x44>
 8008aa8:	a201      	add	r2, pc, #4	; (adr r2, 8008ab0 <USBD_Get_USB_Status+0x1c>)
 8008aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aae:	bf00      	nop
 8008ab0:	08008ac1 	.word	0x08008ac1
 8008ab4:	08008ac7 	.word	0x08008ac7
 8008ab8:	08008acd 	.word	0x08008acd
 8008abc:	08008ad3 	.word	0x08008ad3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac4:	e00b      	b.n	8008ade <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ac6:	2302      	movs	r3, #2
 8008ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8008aca:	e008      	b.n	8008ade <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008acc:	2301      	movs	r3, #1
 8008ace:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad0:	e005      	b.n	8008ade <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad6:	e002      	b.n	8008ade <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ad8:	2302      	movs	r3, #2
 8008ada:	73fb      	strb	r3, [r7, #15]
    break;
 8008adc:	bf00      	nop
  }
  return usb_status;
 8008ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bc80      	pop	{r7}
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop

08008aec <siprintf>:
 8008aec:	b40e      	push	{r1, r2, r3}
 8008aee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008af2:	b500      	push	{lr}
 8008af4:	b09c      	sub	sp, #112	; 0x70
 8008af6:	ab1d      	add	r3, sp, #116	; 0x74
 8008af8:	9002      	str	r0, [sp, #8]
 8008afa:	9006      	str	r0, [sp, #24]
 8008afc:	9107      	str	r1, [sp, #28]
 8008afe:	9104      	str	r1, [sp, #16]
 8008b00:	4808      	ldr	r0, [pc, #32]	; (8008b24 <siprintf+0x38>)
 8008b02:	4909      	ldr	r1, [pc, #36]	; (8008b28 <siprintf+0x3c>)
 8008b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b08:	9105      	str	r1, [sp, #20]
 8008b0a:	6800      	ldr	r0, [r0, #0]
 8008b0c:	a902      	add	r1, sp, #8
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	f000 f98e 	bl	8008e30 <_svfiprintf_r>
 8008b14:	2200      	movs	r2, #0
 8008b16:	9b02      	ldr	r3, [sp, #8]
 8008b18:	701a      	strb	r2, [r3, #0]
 8008b1a:	b01c      	add	sp, #112	; 0x70
 8008b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b20:	b003      	add	sp, #12
 8008b22:	4770      	bx	lr
 8008b24:	200001c8 	.word	0x200001c8
 8008b28:	ffff0208 	.word	0xffff0208

08008b2c <memset>:
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	4402      	add	r2, r0
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d100      	bne.n	8008b36 <memset+0xa>
 8008b34:	4770      	bx	lr
 8008b36:	f803 1b01 	strb.w	r1, [r3], #1
 8008b3a:	e7f9      	b.n	8008b30 <memset+0x4>

08008b3c <__errno>:
 8008b3c:	4b01      	ldr	r3, [pc, #4]	; (8008b44 <__errno+0x8>)
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	200001c8 	.word	0x200001c8

08008b48 <__libc_init_array>:
 8008b48:	b570      	push	{r4, r5, r6, lr}
 8008b4a:	2600      	movs	r6, #0
 8008b4c:	4d0c      	ldr	r5, [pc, #48]	; (8008b80 <__libc_init_array+0x38>)
 8008b4e:	4c0d      	ldr	r4, [pc, #52]	; (8008b84 <__libc_init_array+0x3c>)
 8008b50:	1b64      	subs	r4, r4, r5
 8008b52:	10a4      	asrs	r4, r4, #2
 8008b54:	42a6      	cmp	r6, r4
 8008b56:	d109      	bne.n	8008b6c <__libc_init_array+0x24>
 8008b58:	f000 fd76 	bl	8009648 <_init>
 8008b5c:	2600      	movs	r6, #0
 8008b5e:	4d0a      	ldr	r5, [pc, #40]	; (8008b88 <__libc_init_array+0x40>)
 8008b60:	4c0a      	ldr	r4, [pc, #40]	; (8008b8c <__libc_init_array+0x44>)
 8008b62:	1b64      	subs	r4, r4, r5
 8008b64:	10a4      	asrs	r4, r4, #2
 8008b66:	42a6      	cmp	r6, r4
 8008b68:	d105      	bne.n	8008b76 <__libc_init_array+0x2e>
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}
 8008b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b70:	4798      	blx	r3
 8008b72:	3601      	adds	r6, #1
 8008b74:	e7ee      	b.n	8008b54 <__libc_init_array+0xc>
 8008b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b7a:	4798      	blx	r3
 8008b7c:	3601      	adds	r6, #1
 8008b7e:	e7f2      	b.n	8008b66 <__libc_init_array+0x1e>
 8008b80:	0800972c 	.word	0x0800972c
 8008b84:	0800972c 	.word	0x0800972c
 8008b88:	0800972c 	.word	0x0800972c
 8008b8c:	08009730 	.word	0x08009730

08008b90 <__retarget_lock_acquire_recursive>:
 8008b90:	4770      	bx	lr

08008b92 <__retarget_lock_release_recursive>:
 8008b92:	4770      	bx	lr

08008b94 <_free_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4605      	mov	r5, r0
 8008b98:	2900      	cmp	r1, #0
 8008b9a:	d040      	beq.n	8008c1e <_free_r+0x8a>
 8008b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba0:	1f0c      	subs	r4, r1, #4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	bfb8      	it	lt
 8008ba6:	18e4      	addlt	r4, r4, r3
 8008ba8:	f000 f8dc 	bl	8008d64 <__malloc_lock>
 8008bac:	4a1c      	ldr	r2, [pc, #112]	; (8008c20 <_free_r+0x8c>)
 8008bae:	6813      	ldr	r3, [r2, #0]
 8008bb0:	b933      	cbnz	r3, 8008bc0 <_free_r+0x2c>
 8008bb2:	6063      	str	r3, [r4, #4]
 8008bb4:	6014      	str	r4, [r2, #0]
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bbc:	f000 b8d8 	b.w	8008d70 <__malloc_unlock>
 8008bc0:	42a3      	cmp	r3, r4
 8008bc2:	d908      	bls.n	8008bd6 <_free_r+0x42>
 8008bc4:	6820      	ldr	r0, [r4, #0]
 8008bc6:	1821      	adds	r1, r4, r0
 8008bc8:	428b      	cmp	r3, r1
 8008bca:	bf01      	itttt	eq
 8008bcc:	6819      	ldreq	r1, [r3, #0]
 8008bce:	685b      	ldreq	r3, [r3, #4]
 8008bd0:	1809      	addeq	r1, r1, r0
 8008bd2:	6021      	streq	r1, [r4, #0]
 8008bd4:	e7ed      	b.n	8008bb2 <_free_r+0x1e>
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	b10b      	cbz	r3, 8008be0 <_free_r+0x4c>
 8008bdc:	42a3      	cmp	r3, r4
 8008bde:	d9fa      	bls.n	8008bd6 <_free_r+0x42>
 8008be0:	6811      	ldr	r1, [r2, #0]
 8008be2:	1850      	adds	r0, r2, r1
 8008be4:	42a0      	cmp	r0, r4
 8008be6:	d10b      	bne.n	8008c00 <_free_r+0x6c>
 8008be8:	6820      	ldr	r0, [r4, #0]
 8008bea:	4401      	add	r1, r0
 8008bec:	1850      	adds	r0, r2, r1
 8008bee:	4283      	cmp	r3, r0
 8008bf0:	6011      	str	r1, [r2, #0]
 8008bf2:	d1e0      	bne.n	8008bb6 <_free_r+0x22>
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	4408      	add	r0, r1
 8008bfa:	6010      	str	r0, [r2, #0]
 8008bfc:	6053      	str	r3, [r2, #4]
 8008bfe:	e7da      	b.n	8008bb6 <_free_r+0x22>
 8008c00:	d902      	bls.n	8008c08 <_free_r+0x74>
 8008c02:	230c      	movs	r3, #12
 8008c04:	602b      	str	r3, [r5, #0]
 8008c06:	e7d6      	b.n	8008bb6 <_free_r+0x22>
 8008c08:	6820      	ldr	r0, [r4, #0]
 8008c0a:	1821      	adds	r1, r4, r0
 8008c0c:	428b      	cmp	r3, r1
 8008c0e:	bf01      	itttt	eq
 8008c10:	6819      	ldreq	r1, [r3, #0]
 8008c12:	685b      	ldreq	r3, [r3, #4]
 8008c14:	1809      	addeq	r1, r1, r0
 8008c16:	6021      	streq	r1, [r4, #0]
 8008c18:	6063      	str	r3, [r4, #4]
 8008c1a:	6054      	str	r4, [r2, #4]
 8008c1c:	e7cb      	b.n	8008bb6 <_free_r+0x22>
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	20001588 	.word	0x20001588

08008c24 <sbrk_aligned>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	4e0e      	ldr	r6, [pc, #56]	; (8008c60 <sbrk_aligned+0x3c>)
 8008c28:	460c      	mov	r4, r1
 8008c2a:	6831      	ldr	r1, [r6, #0]
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	b911      	cbnz	r1, 8008c36 <sbrk_aligned+0x12>
 8008c30:	f000 fbaa 	bl	8009388 <_sbrk_r>
 8008c34:	6030      	str	r0, [r6, #0]
 8008c36:	4621      	mov	r1, r4
 8008c38:	4628      	mov	r0, r5
 8008c3a:	f000 fba5 	bl	8009388 <_sbrk_r>
 8008c3e:	1c43      	adds	r3, r0, #1
 8008c40:	d00a      	beq.n	8008c58 <sbrk_aligned+0x34>
 8008c42:	1cc4      	adds	r4, r0, #3
 8008c44:	f024 0403 	bic.w	r4, r4, #3
 8008c48:	42a0      	cmp	r0, r4
 8008c4a:	d007      	beq.n	8008c5c <sbrk_aligned+0x38>
 8008c4c:	1a21      	subs	r1, r4, r0
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f000 fb9a 	bl	8009388 <_sbrk_r>
 8008c54:	3001      	adds	r0, #1
 8008c56:	d101      	bne.n	8008c5c <sbrk_aligned+0x38>
 8008c58:	f04f 34ff 	mov.w	r4, #4294967295
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	bd70      	pop	{r4, r5, r6, pc}
 8008c60:	2000158c 	.word	0x2000158c

08008c64 <_malloc_r>:
 8008c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c68:	1ccd      	adds	r5, r1, #3
 8008c6a:	f025 0503 	bic.w	r5, r5, #3
 8008c6e:	3508      	adds	r5, #8
 8008c70:	2d0c      	cmp	r5, #12
 8008c72:	bf38      	it	cc
 8008c74:	250c      	movcc	r5, #12
 8008c76:	2d00      	cmp	r5, #0
 8008c78:	4607      	mov	r7, r0
 8008c7a:	db01      	blt.n	8008c80 <_malloc_r+0x1c>
 8008c7c:	42a9      	cmp	r1, r5
 8008c7e:	d905      	bls.n	8008c8c <_malloc_r+0x28>
 8008c80:	230c      	movs	r3, #12
 8008c82:	2600      	movs	r6, #0
 8008c84:	603b      	str	r3, [r7, #0]
 8008c86:	4630      	mov	r0, r6
 8008c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d60 <_malloc_r+0xfc>
 8008c90:	f000 f868 	bl	8008d64 <__malloc_lock>
 8008c94:	f8d8 3000 	ldr.w	r3, [r8]
 8008c98:	461c      	mov	r4, r3
 8008c9a:	bb5c      	cbnz	r4, 8008cf4 <_malloc_r+0x90>
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	f7ff ffc0 	bl	8008c24 <sbrk_aligned>
 8008ca4:	1c43      	adds	r3, r0, #1
 8008ca6:	4604      	mov	r4, r0
 8008ca8:	d155      	bne.n	8008d56 <_malloc_r+0xf2>
 8008caa:	f8d8 4000 	ldr.w	r4, [r8]
 8008cae:	4626      	mov	r6, r4
 8008cb0:	2e00      	cmp	r6, #0
 8008cb2:	d145      	bne.n	8008d40 <_malloc_r+0xdc>
 8008cb4:	2c00      	cmp	r4, #0
 8008cb6:	d048      	beq.n	8008d4a <_malloc_r+0xe6>
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	4631      	mov	r1, r6
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	eb04 0903 	add.w	r9, r4, r3
 8008cc2:	f000 fb61 	bl	8009388 <_sbrk_r>
 8008cc6:	4581      	cmp	r9, r0
 8008cc8:	d13f      	bne.n	8008d4a <_malloc_r+0xe6>
 8008cca:	6821      	ldr	r1, [r4, #0]
 8008ccc:	4638      	mov	r0, r7
 8008cce:	1a6d      	subs	r5, r5, r1
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	f7ff ffa7 	bl	8008c24 <sbrk_aligned>
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	d037      	beq.n	8008d4a <_malloc_r+0xe6>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	442b      	add	r3, r5
 8008cde:	6023      	str	r3, [r4, #0]
 8008ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d038      	beq.n	8008d5a <_malloc_r+0xf6>
 8008ce8:	685a      	ldr	r2, [r3, #4]
 8008cea:	42a2      	cmp	r2, r4
 8008cec:	d12b      	bne.n	8008d46 <_malloc_r+0xe2>
 8008cee:	2200      	movs	r2, #0
 8008cf0:	605a      	str	r2, [r3, #4]
 8008cf2:	e00f      	b.n	8008d14 <_malloc_r+0xb0>
 8008cf4:	6822      	ldr	r2, [r4, #0]
 8008cf6:	1b52      	subs	r2, r2, r5
 8008cf8:	d41f      	bmi.n	8008d3a <_malloc_r+0xd6>
 8008cfa:	2a0b      	cmp	r2, #11
 8008cfc:	d917      	bls.n	8008d2e <_malloc_r+0xca>
 8008cfe:	1961      	adds	r1, r4, r5
 8008d00:	42a3      	cmp	r3, r4
 8008d02:	6025      	str	r5, [r4, #0]
 8008d04:	bf18      	it	ne
 8008d06:	6059      	strne	r1, [r3, #4]
 8008d08:	6863      	ldr	r3, [r4, #4]
 8008d0a:	bf08      	it	eq
 8008d0c:	f8c8 1000 	streq.w	r1, [r8]
 8008d10:	5162      	str	r2, [r4, r5]
 8008d12:	604b      	str	r3, [r1, #4]
 8008d14:	4638      	mov	r0, r7
 8008d16:	f104 060b 	add.w	r6, r4, #11
 8008d1a:	f000 f829 	bl	8008d70 <__malloc_unlock>
 8008d1e:	f026 0607 	bic.w	r6, r6, #7
 8008d22:	1d23      	adds	r3, r4, #4
 8008d24:	1af2      	subs	r2, r6, r3
 8008d26:	d0ae      	beq.n	8008c86 <_malloc_r+0x22>
 8008d28:	1b9b      	subs	r3, r3, r6
 8008d2a:	50a3      	str	r3, [r4, r2]
 8008d2c:	e7ab      	b.n	8008c86 <_malloc_r+0x22>
 8008d2e:	42a3      	cmp	r3, r4
 8008d30:	6862      	ldr	r2, [r4, #4]
 8008d32:	d1dd      	bne.n	8008cf0 <_malloc_r+0x8c>
 8008d34:	f8c8 2000 	str.w	r2, [r8]
 8008d38:	e7ec      	b.n	8008d14 <_malloc_r+0xb0>
 8008d3a:	4623      	mov	r3, r4
 8008d3c:	6864      	ldr	r4, [r4, #4]
 8008d3e:	e7ac      	b.n	8008c9a <_malloc_r+0x36>
 8008d40:	4634      	mov	r4, r6
 8008d42:	6876      	ldr	r6, [r6, #4]
 8008d44:	e7b4      	b.n	8008cb0 <_malloc_r+0x4c>
 8008d46:	4613      	mov	r3, r2
 8008d48:	e7cc      	b.n	8008ce4 <_malloc_r+0x80>
 8008d4a:	230c      	movs	r3, #12
 8008d4c:	4638      	mov	r0, r7
 8008d4e:	603b      	str	r3, [r7, #0]
 8008d50:	f000 f80e 	bl	8008d70 <__malloc_unlock>
 8008d54:	e797      	b.n	8008c86 <_malloc_r+0x22>
 8008d56:	6025      	str	r5, [r4, #0]
 8008d58:	e7dc      	b.n	8008d14 <_malloc_r+0xb0>
 8008d5a:	605b      	str	r3, [r3, #4]
 8008d5c:	deff      	udf	#255	; 0xff
 8008d5e:	bf00      	nop
 8008d60:	20001588 	.word	0x20001588

08008d64 <__malloc_lock>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__malloc_lock+0x8>)
 8008d66:	f7ff bf13 	b.w	8008b90 <__retarget_lock_acquire_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	20001584 	.word	0x20001584

08008d70 <__malloc_unlock>:
 8008d70:	4801      	ldr	r0, [pc, #4]	; (8008d78 <__malloc_unlock+0x8>)
 8008d72:	f7ff bf0e 	b.w	8008b92 <__retarget_lock_release_recursive>
 8008d76:	bf00      	nop
 8008d78:	20001584 	.word	0x20001584

08008d7c <__ssputs_r>:
 8008d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d80:	461f      	mov	r7, r3
 8008d82:	688e      	ldr	r6, [r1, #8]
 8008d84:	4682      	mov	sl, r0
 8008d86:	42be      	cmp	r6, r7
 8008d88:	460c      	mov	r4, r1
 8008d8a:	4690      	mov	r8, r2
 8008d8c:	680b      	ldr	r3, [r1, #0]
 8008d8e:	d82c      	bhi.n	8008dea <__ssputs_r+0x6e>
 8008d90:	898a      	ldrh	r2, [r1, #12]
 8008d92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d96:	d026      	beq.n	8008de6 <__ssputs_r+0x6a>
 8008d98:	6965      	ldr	r5, [r4, #20]
 8008d9a:	6909      	ldr	r1, [r1, #16]
 8008d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008da0:	eba3 0901 	sub.w	r9, r3, r1
 8008da4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008da8:	1c7b      	adds	r3, r7, #1
 8008daa:	444b      	add	r3, r9
 8008dac:	106d      	asrs	r5, r5, #1
 8008dae:	429d      	cmp	r5, r3
 8008db0:	bf38      	it	cc
 8008db2:	461d      	movcc	r5, r3
 8008db4:	0553      	lsls	r3, r2, #21
 8008db6:	d527      	bpl.n	8008e08 <__ssputs_r+0x8c>
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7ff ff53 	bl	8008c64 <_malloc_r>
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	b360      	cbz	r0, 8008e1c <__ssputs_r+0xa0>
 8008dc2:	464a      	mov	r2, r9
 8008dc4:	6921      	ldr	r1, [r4, #16]
 8008dc6:	f000 fafd 	bl	80093c4 <memcpy>
 8008dca:	89a3      	ldrh	r3, [r4, #12]
 8008dcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd4:	81a3      	strh	r3, [r4, #12]
 8008dd6:	6126      	str	r6, [r4, #16]
 8008dd8:	444e      	add	r6, r9
 8008dda:	6026      	str	r6, [r4, #0]
 8008ddc:	463e      	mov	r6, r7
 8008dde:	6165      	str	r5, [r4, #20]
 8008de0:	eba5 0509 	sub.w	r5, r5, r9
 8008de4:	60a5      	str	r5, [r4, #8]
 8008de6:	42be      	cmp	r6, r7
 8008de8:	d900      	bls.n	8008dec <__ssputs_r+0x70>
 8008dea:	463e      	mov	r6, r7
 8008dec:	4632      	mov	r2, r6
 8008dee:	4641      	mov	r1, r8
 8008df0:	6820      	ldr	r0, [r4, #0]
 8008df2:	f000 faaf 	bl	8009354 <memmove>
 8008df6:	2000      	movs	r0, #0
 8008df8:	68a3      	ldr	r3, [r4, #8]
 8008dfa:	1b9b      	subs	r3, r3, r6
 8008dfc:	60a3      	str	r3, [r4, #8]
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	4433      	add	r3, r6
 8008e02:	6023      	str	r3, [r4, #0]
 8008e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e08:	462a      	mov	r2, r5
 8008e0a:	f000 fae9 	bl	80093e0 <_realloc_r>
 8008e0e:	4606      	mov	r6, r0
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d1e0      	bne.n	8008dd6 <__ssputs_r+0x5a>
 8008e14:	4650      	mov	r0, sl
 8008e16:	6921      	ldr	r1, [r4, #16]
 8008e18:	f7ff febc 	bl	8008b94 <_free_r>
 8008e1c:	230c      	movs	r3, #12
 8008e1e:	f8ca 3000 	str.w	r3, [sl]
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e2c:	81a3      	strh	r3, [r4, #12]
 8008e2e:	e7e9      	b.n	8008e04 <__ssputs_r+0x88>

08008e30 <_svfiprintf_r>:
 8008e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e34:	4698      	mov	r8, r3
 8008e36:	898b      	ldrh	r3, [r1, #12]
 8008e38:	4607      	mov	r7, r0
 8008e3a:	061b      	lsls	r3, r3, #24
 8008e3c:	460d      	mov	r5, r1
 8008e3e:	4614      	mov	r4, r2
 8008e40:	b09d      	sub	sp, #116	; 0x74
 8008e42:	d50e      	bpl.n	8008e62 <_svfiprintf_r+0x32>
 8008e44:	690b      	ldr	r3, [r1, #16]
 8008e46:	b963      	cbnz	r3, 8008e62 <_svfiprintf_r+0x32>
 8008e48:	2140      	movs	r1, #64	; 0x40
 8008e4a:	f7ff ff0b 	bl	8008c64 <_malloc_r>
 8008e4e:	6028      	str	r0, [r5, #0]
 8008e50:	6128      	str	r0, [r5, #16]
 8008e52:	b920      	cbnz	r0, 8008e5e <_svfiprintf_r+0x2e>
 8008e54:	230c      	movs	r3, #12
 8008e56:	603b      	str	r3, [r7, #0]
 8008e58:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5c:	e0d0      	b.n	8009000 <_svfiprintf_r+0x1d0>
 8008e5e:	2340      	movs	r3, #64	; 0x40
 8008e60:	616b      	str	r3, [r5, #20]
 8008e62:	2300      	movs	r3, #0
 8008e64:	9309      	str	r3, [sp, #36]	; 0x24
 8008e66:	2320      	movs	r3, #32
 8008e68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e6c:	2330      	movs	r3, #48	; 0x30
 8008e6e:	f04f 0901 	mov.w	r9, #1
 8008e72:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e76:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8009018 <_svfiprintf_r+0x1e8>
 8008e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e7e:	4623      	mov	r3, r4
 8008e80:	469a      	mov	sl, r3
 8008e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e86:	b10a      	cbz	r2, 8008e8c <_svfiprintf_r+0x5c>
 8008e88:	2a25      	cmp	r2, #37	; 0x25
 8008e8a:	d1f9      	bne.n	8008e80 <_svfiprintf_r+0x50>
 8008e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8008e90:	d00b      	beq.n	8008eaa <_svfiprintf_r+0x7a>
 8008e92:	465b      	mov	r3, fp
 8008e94:	4622      	mov	r2, r4
 8008e96:	4629      	mov	r1, r5
 8008e98:	4638      	mov	r0, r7
 8008e9a:	f7ff ff6f 	bl	8008d7c <__ssputs_r>
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	f000 80a9 	beq.w	8008ff6 <_svfiprintf_r+0x1c6>
 8008ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ea6:	445a      	add	r2, fp
 8008ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8008eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f000 80a1 	beq.w	8008ff6 <_svfiprintf_r+0x1c6>
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8008eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ebe:	f10a 0a01 	add.w	sl, sl, #1
 8008ec2:	9304      	str	r3, [sp, #16]
 8008ec4:	9307      	str	r3, [sp, #28]
 8008ec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008eca:	931a      	str	r3, [sp, #104]	; 0x68
 8008ecc:	4654      	mov	r4, sl
 8008ece:	2205      	movs	r2, #5
 8008ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed4:	4850      	ldr	r0, [pc, #320]	; (8009018 <_svfiprintf_r+0x1e8>)
 8008ed6:	f000 fa67 	bl	80093a8 <memchr>
 8008eda:	9a04      	ldr	r2, [sp, #16]
 8008edc:	b9d8      	cbnz	r0, 8008f16 <_svfiprintf_r+0xe6>
 8008ede:	06d0      	lsls	r0, r2, #27
 8008ee0:	bf44      	itt	mi
 8008ee2:	2320      	movmi	r3, #32
 8008ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ee8:	0711      	lsls	r1, r2, #28
 8008eea:	bf44      	itt	mi
 8008eec:	232b      	movmi	r3, #43	; 0x2b
 8008eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8008ef8:	d015      	beq.n	8008f26 <_svfiprintf_r+0xf6>
 8008efa:	4654      	mov	r4, sl
 8008efc:	2000      	movs	r0, #0
 8008efe:	f04f 0c0a 	mov.w	ip, #10
 8008f02:	9a07      	ldr	r2, [sp, #28]
 8008f04:	4621      	mov	r1, r4
 8008f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f0a:	3b30      	subs	r3, #48	; 0x30
 8008f0c:	2b09      	cmp	r3, #9
 8008f0e:	d94d      	bls.n	8008fac <_svfiprintf_r+0x17c>
 8008f10:	b1b0      	cbz	r0, 8008f40 <_svfiprintf_r+0x110>
 8008f12:	9207      	str	r2, [sp, #28]
 8008f14:	e014      	b.n	8008f40 <_svfiprintf_r+0x110>
 8008f16:	eba0 0308 	sub.w	r3, r0, r8
 8008f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	46a2      	mov	sl, r4
 8008f22:	9304      	str	r3, [sp, #16]
 8008f24:	e7d2      	b.n	8008ecc <_svfiprintf_r+0x9c>
 8008f26:	9b03      	ldr	r3, [sp, #12]
 8008f28:	1d19      	adds	r1, r3, #4
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	9103      	str	r1, [sp, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	bfbb      	ittet	lt
 8008f32:	425b      	neglt	r3, r3
 8008f34:	f042 0202 	orrlt.w	r2, r2, #2
 8008f38:	9307      	strge	r3, [sp, #28]
 8008f3a:	9307      	strlt	r3, [sp, #28]
 8008f3c:	bfb8      	it	lt
 8008f3e:	9204      	strlt	r2, [sp, #16]
 8008f40:	7823      	ldrb	r3, [r4, #0]
 8008f42:	2b2e      	cmp	r3, #46	; 0x2e
 8008f44:	d10c      	bne.n	8008f60 <_svfiprintf_r+0x130>
 8008f46:	7863      	ldrb	r3, [r4, #1]
 8008f48:	2b2a      	cmp	r3, #42	; 0x2a
 8008f4a:	d134      	bne.n	8008fb6 <_svfiprintf_r+0x186>
 8008f4c:	9b03      	ldr	r3, [sp, #12]
 8008f4e:	3402      	adds	r4, #2
 8008f50:	1d1a      	adds	r2, r3, #4
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	9203      	str	r2, [sp, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	bfb8      	it	lt
 8008f5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f5e:	9305      	str	r3, [sp, #20]
 8008f60:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800901c <_svfiprintf_r+0x1ec>
 8008f64:	2203      	movs	r2, #3
 8008f66:	4650      	mov	r0, sl
 8008f68:	7821      	ldrb	r1, [r4, #0]
 8008f6a:	f000 fa1d 	bl	80093a8 <memchr>
 8008f6e:	b138      	cbz	r0, 8008f80 <_svfiprintf_r+0x150>
 8008f70:	2240      	movs	r2, #64	; 0x40
 8008f72:	9b04      	ldr	r3, [sp, #16]
 8008f74:	eba0 000a 	sub.w	r0, r0, sl
 8008f78:	4082      	lsls	r2, r0
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	3401      	adds	r4, #1
 8008f7e:	9304      	str	r3, [sp, #16]
 8008f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f84:	2206      	movs	r2, #6
 8008f86:	4826      	ldr	r0, [pc, #152]	; (8009020 <_svfiprintf_r+0x1f0>)
 8008f88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f8c:	f000 fa0c 	bl	80093a8 <memchr>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	d038      	beq.n	8009006 <_svfiprintf_r+0x1d6>
 8008f94:	4b23      	ldr	r3, [pc, #140]	; (8009024 <_svfiprintf_r+0x1f4>)
 8008f96:	bb1b      	cbnz	r3, 8008fe0 <_svfiprintf_r+0x1b0>
 8008f98:	9b03      	ldr	r3, [sp, #12]
 8008f9a:	3307      	adds	r3, #7
 8008f9c:	f023 0307 	bic.w	r3, r3, #7
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	9303      	str	r3, [sp, #12]
 8008fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa6:	4433      	add	r3, r6
 8008fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8008faa:	e768      	b.n	8008e7e <_svfiprintf_r+0x4e>
 8008fac:	460c      	mov	r4, r1
 8008fae:	2001      	movs	r0, #1
 8008fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fb4:	e7a6      	b.n	8008f04 <_svfiprintf_r+0xd4>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	f04f 0c0a 	mov.w	ip, #10
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	3401      	adds	r4, #1
 8008fc0:	9305      	str	r3, [sp, #20]
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fc8:	3a30      	subs	r2, #48	; 0x30
 8008fca:	2a09      	cmp	r2, #9
 8008fcc:	d903      	bls.n	8008fd6 <_svfiprintf_r+0x1a6>
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0c6      	beq.n	8008f60 <_svfiprintf_r+0x130>
 8008fd2:	9105      	str	r1, [sp, #20]
 8008fd4:	e7c4      	b.n	8008f60 <_svfiprintf_r+0x130>
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	2301      	movs	r3, #1
 8008fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fde:	e7f0      	b.n	8008fc2 <_svfiprintf_r+0x192>
 8008fe0:	ab03      	add	r3, sp, #12
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	462a      	mov	r2, r5
 8008fe6:	4638      	mov	r0, r7
 8008fe8:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <_svfiprintf_r+0x1f8>)
 8008fea:	a904      	add	r1, sp, #16
 8008fec:	f3af 8000 	nop.w
 8008ff0:	1c42      	adds	r2, r0, #1
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	d1d6      	bne.n	8008fa4 <_svfiprintf_r+0x174>
 8008ff6:	89ab      	ldrh	r3, [r5, #12]
 8008ff8:	065b      	lsls	r3, r3, #25
 8008ffa:	f53f af2d 	bmi.w	8008e58 <_svfiprintf_r+0x28>
 8008ffe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009000:	b01d      	add	sp, #116	; 0x74
 8009002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009006:	ab03      	add	r3, sp, #12
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	462a      	mov	r2, r5
 800900c:	4638      	mov	r0, r7
 800900e:	4b06      	ldr	r3, [pc, #24]	; (8009028 <_svfiprintf_r+0x1f8>)
 8009010:	a904      	add	r1, sp, #16
 8009012:	f000 f87d 	bl	8009110 <_printf_i>
 8009016:	e7eb      	b.n	8008ff0 <_svfiprintf_r+0x1c0>
 8009018:	080096f6 	.word	0x080096f6
 800901c:	080096fc 	.word	0x080096fc
 8009020:	08009700 	.word	0x08009700
 8009024:	00000000 	.word	0x00000000
 8009028:	08008d7d 	.word	0x08008d7d

0800902c <_printf_common>:
 800902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009030:	4616      	mov	r6, r2
 8009032:	4699      	mov	r9, r3
 8009034:	688a      	ldr	r2, [r1, #8]
 8009036:	690b      	ldr	r3, [r1, #16]
 8009038:	4607      	mov	r7, r0
 800903a:	4293      	cmp	r3, r2
 800903c:	bfb8      	it	lt
 800903e:	4613      	movlt	r3, r2
 8009040:	6033      	str	r3, [r6, #0]
 8009042:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009046:	460c      	mov	r4, r1
 8009048:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800904c:	b10a      	cbz	r2, 8009052 <_printf_common+0x26>
 800904e:	3301      	adds	r3, #1
 8009050:	6033      	str	r3, [r6, #0]
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	0699      	lsls	r1, r3, #26
 8009056:	bf42      	ittt	mi
 8009058:	6833      	ldrmi	r3, [r6, #0]
 800905a:	3302      	addmi	r3, #2
 800905c:	6033      	strmi	r3, [r6, #0]
 800905e:	6825      	ldr	r5, [r4, #0]
 8009060:	f015 0506 	ands.w	r5, r5, #6
 8009064:	d106      	bne.n	8009074 <_printf_common+0x48>
 8009066:	f104 0a19 	add.w	sl, r4, #25
 800906a:	68e3      	ldr	r3, [r4, #12]
 800906c:	6832      	ldr	r2, [r6, #0]
 800906e:	1a9b      	subs	r3, r3, r2
 8009070:	42ab      	cmp	r3, r5
 8009072:	dc2b      	bgt.n	80090cc <_printf_common+0xa0>
 8009074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009078:	1e13      	subs	r3, r2, #0
 800907a:	6822      	ldr	r2, [r4, #0]
 800907c:	bf18      	it	ne
 800907e:	2301      	movne	r3, #1
 8009080:	0692      	lsls	r2, r2, #26
 8009082:	d430      	bmi.n	80090e6 <_printf_common+0xba>
 8009084:	4649      	mov	r1, r9
 8009086:	4638      	mov	r0, r7
 8009088:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800908c:	47c0      	blx	r8
 800908e:	3001      	adds	r0, #1
 8009090:	d023      	beq.n	80090da <_printf_common+0xae>
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	6922      	ldr	r2, [r4, #16]
 8009096:	f003 0306 	and.w	r3, r3, #6
 800909a:	2b04      	cmp	r3, #4
 800909c:	bf14      	ite	ne
 800909e:	2500      	movne	r5, #0
 80090a0:	6833      	ldreq	r3, [r6, #0]
 80090a2:	f04f 0600 	mov.w	r6, #0
 80090a6:	bf08      	it	eq
 80090a8:	68e5      	ldreq	r5, [r4, #12]
 80090aa:	f104 041a 	add.w	r4, r4, #26
 80090ae:	bf08      	it	eq
 80090b0:	1aed      	subeq	r5, r5, r3
 80090b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80090b6:	bf08      	it	eq
 80090b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090bc:	4293      	cmp	r3, r2
 80090be:	bfc4      	itt	gt
 80090c0:	1a9b      	subgt	r3, r3, r2
 80090c2:	18ed      	addgt	r5, r5, r3
 80090c4:	42b5      	cmp	r5, r6
 80090c6:	d11a      	bne.n	80090fe <_printf_common+0xd2>
 80090c8:	2000      	movs	r0, #0
 80090ca:	e008      	b.n	80090de <_printf_common+0xb2>
 80090cc:	2301      	movs	r3, #1
 80090ce:	4652      	mov	r2, sl
 80090d0:	4649      	mov	r1, r9
 80090d2:	4638      	mov	r0, r7
 80090d4:	47c0      	blx	r8
 80090d6:	3001      	adds	r0, #1
 80090d8:	d103      	bne.n	80090e2 <_printf_common+0xb6>
 80090da:	f04f 30ff 	mov.w	r0, #4294967295
 80090de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e2:	3501      	adds	r5, #1
 80090e4:	e7c1      	b.n	800906a <_printf_common+0x3e>
 80090e6:	2030      	movs	r0, #48	; 0x30
 80090e8:	18e1      	adds	r1, r4, r3
 80090ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090ee:	1c5a      	adds	r2, r3, #1
 80090f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090f4:	4422      	add	r2, r4
 80090f6:	3302      	adds	r3, #2
 80090f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090fc:	e7c2      	b.n	8009084 <_printf_common+0x58>
 80090fe:	2301      	movs	r3, #1
 8009100:	4622      	mov	r2, r4
 8009102:	4649      	mov	r1, r9
 8009104:	4638      	mov	r0, r7
 8009106:	47c0      	blx	r8
 8009108:	3001      	adds	r0, #1
 800910a:	d0e6      	beq.n	80090da <_printf_common+0xae>
 800910c:	3601      	adds	r6, #1
 800910e:	e7d9      	b.n	80090c4 <_printf_common+0x98>

08009110 <_printf_i>:
 8009110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009114:	7e0f      	ldrb	r7, [r1, #24]
 8009116:	4691      	mov	r9, r2
 8009118:	2f78      	cmp	r7, #120	; 0x78
 800911a:	4680      	mov	r8, r0
 800911c:	460c      	mov	r4, r1
 800911e:	469a      	mov	sl, r3
 8009120:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009126:	d807      	bhi.n	8009138 <_printf_i+0x28>
 8009128:	2f62      	cmp	r7, #98	; 0x62
 800912a:	d80a      	bhi.n	8009142 <_printf_i+0x32>
 800912c:	2f00      	cmp	r7, #0
 800912e:	f000 80d5 	beq.w	80092dc <_printf_i+0x1cc>
 8009132:	2f58      	cmp	r7, #88	; 0x58
 8009134:	f000 80c1 	beq.w	80092ba <_printf_i+0x1aa>
 8009138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800913c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009140:	e03a      	b.n	80091b8 <_printf_i+0xa8>
 8009142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009146:	2b15      	cmp	r3, #21
 8009148:	d8f6      	bhi.n	8009138 <_printf_i+0x28>
 800914a:	a101      	add	r1, pc, #4	; (adr r1, 8009150 <_printf_i+0x40>)
 800914c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009150:	080091a9 	.word	0x080091a9
 8009154:	080091bd 	.word	0x080091bd
 8009158:	08009139 	.word	0x08009139
 800915c:	08009139 	.word	0x08009139
 8009160:	08009139 	.word	0x08009139
 8009164:	08009139 	.word	0x08009139
 8009168:	080091bd 	.word	0x080091bd
 800916c:	08009139 	.word	0x08009139
 8009170:	08009139 	.word	0x08009139
 8009174:	08009139 	.word	0x08009139
 8009178:	08009139 	.word	0x08009139
 800917c:	080092c3 	.word	0x080092c3
 8009180:	080091e9 	.word	0x080091e9
 8009184:	0800927d 	.word	0x0800927d
 8009188:	08009139 	.word	0x08009139
 800918c:	08009139 	.word	0x08009139
 8009190:	080092e5 	.word	0x080092e5
 8009194:	08009139 	.word	0x08009139
 8009198:	080091e9 	.word	0x080091e9
 800919c:	08009139 	.word	0x08009139
 80091a0:	08009139 	.word	0x08009139
 80091a4:	08009285 	.word	0x08009285
 80091a8:	682b      	ldr	r3, [r5, #0]
 80091aa:	1d1a      	adds	r2, r3, #4
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	602a      	str	r2, [r5, #0]
 80091b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091b8:	2301      	movs	r3, #1
 80091ba:	e0a0      	b.n	80092fe <_printf_i+0x1ee>
 80091bc:	6820      	ldr	r0, [r4, #0]
 80091be:	682b      	ldr	r3, [r5, #0]
 80091c0:	0607      	lsls	r7, r0, #24
 80091c2:	f103 0104 	add.w	r1, r3, #4
 80091c6:	6029      	str	r1, [r5, #0]
 80091c8:	d501      	bpl.n	80091ce <_printf_i+0xbe>
 80091ca:	681e      	ldr	r6, [r3, #0]
 80091cc:	e003      	b.n	80091d6 <_printf_i+0xc6>
 80091ce:	0646      	lsls	r6, r0, #25
 80091d0:	d5fb      	bpl.n	80091ca <_printf_i+0xba>
 80091d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80091d6:	2e00      	cmp	r6, #0
 80091d8:	da03      	bge.n	80091e2 <_printf_i+0xd2>
 80091da:	232d      	movs	r3, #45	; 0x2d
 80091dc:	4276      	negs	r6, r6
 80091de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091e2:	230a      	movs	r3, #10
 80091e4:	4859      	ldr	r0, [pc, #356]	; (800934c <_printf_i+0x23c>)
 80091e6:	e012      	b.n	800920e <_printf_i+0xfe>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	6820      	ldr	r0, [r4, #0]
 80091ec:	1d19      	adds	r1, r3, #4
 80091ee:	6029      	str	r1, [r5, #0]
 80091f0:	0605      	lsls	r5, r0, #24
 80091f2:	d501      	bpl.n	80091f8 <_printf_i+0xe8>
 80091f4:	681e      	ldr	r6, [r3, #0]
 80091f6:	e002      	b.n	80091fe <_printf_i+0xee>
 80091f8:	0641      	lsls	r1, r0, #25
 80091fa:	d5fb      	bpl.n	80091f4 <_printf_i+0xe4>
 80091fc:	881e      	ldrh	r6, [r3, #0]
 80091fe:	2f6f      	cmp	r7, #111	; 0x6f
 8009200:	bf0c      	ite	eq
 8009202:	2308      	moveq	r3, #8
 8009204:	230a      	movne	r3, #10
 8009206:	4851      	ldr	r0, [pc, #324]	; (800934c <_printf_i+0x23c>)
 8009208:	2100      	movs	r1, #0
 800920a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800920e:	6865      	ldr	r5, [r4, #4]
 8009210:	2d00      	cmp	r5, #0
 8009212:	bfa8      	it	ge
 8009214:	6821      	ldrge	r1, [r4, #0]
 8009216:	60a5      	str	r5, [r4, #8]
 8009218:	bfa4      	itt	ge
 800921a:	f021 0104 	bicge.w	r1, r1, #4
 800921e:	6021      	strge	r1, [r4, #0]
 8009220:	b90e      	cbnz	r6, 8009226 <_printf_i+0x116>
 8009222:	2d00      	cmp	r5, #0
 8009224:	d04b      	beq.n	80092be <_printf_i+0x1ae>
 8009226:	4615      	mov	r5, r2
 8009228:	fbb6 f1f3 	udiv	r1, r6, r3
 800922c:	fb03 6711 	mls	r7, r3, r1, r6
 8009230:	5dc7      	ldrb	r7, [r0, r7]
 8009232:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009236:	4637      	mov	r7, r6
 8009238:	42bb      	cmp	r3, r7
 800923a:	460e      	mov	r6, r1
 800923c:	d9f4      	bls.n	8009228 <_printf_i+0x118>
 800923e:	2b08      	cmp	r3, #8
 8009240:	d10b      	bne.n	800925a <_printf_i+0x14a>
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	07de      	lsls	r6, r3, #31
 8009246:	d508      	bpl.n	800925a <_printf_i+0x14a>
 8009248:	6923      	ldr	r3, [r4, #16]
 800924a:	6861      	ldr	r1, [r4, #4]
 800924c:	4299      	cmp	r1, r3
 800924e:	bfde      	ittt	le
 8009250:	2330      	movle	r3, #48	; 0x30
 8009252:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009256:	f105 35ff 	addle.w	r5, r5, #4294967295
 800925a:	1b52      	subs	r2, r2, r5
 800925c:	6122      	str	r2, [r4, #16]
 800925e:	464b      	mov	r3, r9
 8009260:	4621      	mov	r1, r4
 8009262:	4640      	mov	r0, r8
 8009264:	f8cd a000 	str.w	sl, [sp]
 8009268:	aa03      	add	r2, sp, #12
 800926a:	f7ff fedf 	bl	800902c <_printf_common>
 800926e:	3001      	adds	r0, #1
 8009270:	d14a      	bne.n	8009308 <_printf_i+0x1f8>
 8009272:	f04f 30ff 	mov.w	r0, #4294967295
 8009276:	b004      	add	sp, #16
 8009278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	f043 0320 	orr.w	r3, r3, #32
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	2778      	movs	r7, #120	; 0x78
 8009286:	4832      	ldr	r0, [pc, #200]	; (8009350 <_printf_i+0x240>)
 8009288:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	6829      	ldr	r1, [r5, #0]
 8009290:	061f      	lsls	r7, r3, #24
 8009292:	f851 6b04 	ldr.w	r6, [r1], #4
 8009296:	d402      	bmi.n	800929e <_printf_i+0x18e>
 8009298:	065f      	lsls	r7, r3, #25
 800929a:	bf48      	it	mi
 800929c:	b2b6      	uxthmi	r6, r6
 800929e:	07df      	lsls	r7, r3, #31
 80092a0:	bf48      	it	mi
 80092a2:	f043 0320 	orrmi.w	r3, r3, #32
 80092a6:	6029      	str	r1, [r5, #0]
 80092a8:	bf48      	it	mi
 80092aa:	6023      	strmi	r3, [r4, #0]
 80092ac:	b91e      	cbnz	r6, 80092b6 <_printf_i+0x1a6>
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	f023 0320 	bic.w	r3, r3, #32
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	2310      	movs	r3, #16
 80092b8:	e7a6      	b.n	8009208 <_printf_i+0xf8>
 80092ba:	4824      	ldr	r0, [pc, #144]	; (800934c <_printf_i+0x23c>)
 80092bc:	e7e4      	b.n	8009288 <_printf_i+0x178>
 80092be:	4615      	mov	r5, r2
 80092c0:	e7bd      	b.n	800923e <_printf_i+0x12e>
 80092c2:	682b      	ldr	r3, [r5, #0]
 80092c4:	6826      	ldr	r6, [r4, #0]
 80092c6:	1d18      	adds	r0, r3, #4
 80092c8:	6961      	ldr	r1, [r4, #20]
 80092ca:	6028      	str	r0, [r5, #0]
 80092cc:	0635      	lsls	r5, r6, #24
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	d501      	bpl.n	80092d6 <_printf_i+0x1c6>
 80092d2:	6019      	str	r1, [r3, #0]
 80092d4:	e002      	b.n	80092dc <_printf_i+0x1cc>
 80092d6:	0670      	lsls	r0, r6, #25
 80092d8:	d5fb      	bpl.n	80092d2 <_printf_i+0x1c2>
 80092da:	8019      	strh	r1, [r3, #0]
 80092dc:	2300      	movs	r3, #0
 80092de:	4615      	mov	r5, r2
 80092e0:	6123      	str	r3, [r4, #16]
 80092e2:	e7bc      	b.n	800925e <_printf_i+0x14e>
 80092e4:	682b      	ldr	r3, [r5, #0]
 80092e6:	2100      	movs	r1, #0
 80092e8:	1d1a      	adds	r2, r3, #4
 80092ea:	602a      	str	r2, [r5, #0]
 80092ec:	681d      	ldr	r5, [r3, #0]
 80092ee:	6862      	ldr	r2, [r4, #4]
 80092f0:	4628      	mov	r0, r5
 80092f2:	f000 f859 	bl	80093a8 <memchr>
 80092f6:	b108      	cbz	r0, 80092fc <_printf_i+0x1ec>
 80092f8:	1b40      	subs	r0, r0, r5
 80092fa:	6060      	str	r0, [r4, #4]
 80092fc:	6863      	ldr	r3, [r4, #4]
 80092fe:	6123      	str	r3, [r4, #16]
 8009300:	2300      	movs	r3, #0
 8009302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009306:	e7aa      	b.n	800925e <_printf_i+0x14e>
 8009308:	462a      	mov	r2, r5
 800930a:	4649      	mov	r1, r9
 800930c:	4640      	mov	r0, r8
 800930e:	6923      	ldr	r3, [r4, #16]
 8009310:	47d0      	blx	sl
 8009312:	3001      	adds	r0, #1
 8009314:	d0ad      	beq.n	8009272 <_printf_i+0x162>
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	079b      	lsls	r3, r3, #30
 800931a:	d413      	bmi.n	8009344 <_printf_i+0x234>
 800931c:	68e0      	ldr	r0, [r4, #12]
 800931e:	9b03      	ldr	r3, [sp, #12]
 8009320:	4298      	cmp	r0, r3
 8009322:	bfb8      	it	lt
 8009324:	4618      	movlt	r0, r3
 8009326:	e7a6      	b.n	8009276 <_printf_i+0x166>
 8009328:	2301      	movs	r3, #1
 800932a:	4632      	mov	r2, r6
 800932c:	4649      	mov	r1, r9
 800932e:	4640      	mov	r0, r8
 8009330:	47d0      	blx	sl
 8009332:	3001      	adds	r0, #1
 8009334:	d09d      	beq.n	8009272 <_printf_i+0x162>
 8009336:	3501      	adds	r5, #1
 8009338:	68e3      	ldr	r3, [r4, #12]
 800933a:	9903      	ldr	r1, [sp, #12]
 800933c:	1a5b      	subs	r3, r3, r1
 800933e:	42ab      	cmp	r3, r5
 8009340:	dcf2      	bgt.n	8009328 <_printf_i+0x218>
 8009342:	e7eb      	b.n	800931c <_printf_i+0x20c>
 8009344:	2500      	movs	r5, #0
 8009346:	f104 0619 	add.w	r6, r4, #25
 800934a:	e7f5      	b.n	8009338 <_printf_i+0x228>
 800934c:	08009707 	.word	0x08009707
 8009350:	08009718 	.word	0x08009718

08009354 <memmove>:
 8009354:	4288      	cmp	r0, r1
 8009356:	b510      	push	{r4, lr}
 8009358:	eb01 0402 	add.w	r4, r1, r2
 800935c:	d902      	bls.n	8009364 <memmove+0x10>
 800935e:	4284      	cmp	r4, r0
 8009360:	4623      	mov	r3, r4
 8009362:	d807      	bhi.n	8009374 <memmove+0x20>
 8009364:	1e43      	subs	r3, r0, #1
 8009366:	42a1      	cmp	r1, r4
 8009368:	d008      	beq.n	800937c <memmove+0x28>
 800936a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800936e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009372:	e7f8      	b.n	8009366 <memmove+0x12>
 8009374:	4601      	mov	r1, r0
 8009376:	4402      	add	r2, r0
 8009378:	428a      	cmp	r2, r1
 800937a:	d100      	bne.n	800937e <memmove+0x2a>
 800937c:	bd10      	pop	{r4, pc}
 800937e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009382:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009386:	e7f7      	b.n	8009378 <memmove+0x24>

08009388 <_sbrk_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	2300      	movs	r3, #0
 800938c:	4d05      	ldr	r5, [pc, #20]	; (80093a4 <_sbrk_r+0x1c>)
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	f7f7 fd86 	bl	8000ea4 <_sbrk>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_sbrk_r+0x1a>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_sbrk_r+0x1a>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	20001580 	.word	0x20001580

080093a8 <memchr>:
 80093a8:	4603      	mov	r3, r0
 80093aa:	b510      	push	{r4, lr}
 80093ac:	b2c9      	uxtb	r1, r1
 80093ae:	4402      	add	r2, r0
 80093b0:	4293      	cmp	r3, r2
 80093b2:	4618      	mov	r0, r3
 80093b4:	d101      	bne.n	80093ba <memchr+0x12>
 80093b6:	2000      	movs	r0, #0
 80093b8:	e003      	b.n	80093c2 <memchr+0x1a>
 80093ba:	7804      	ldrb	r4, [r0, #0]
 80093bc:	3301      	adds	r3, #1
 80093be:	428c      	cmp	r4, r1
 80093c0:	d1f6      	bne.n	80093b0 <memchr+0x8>
 80093c2:	bd10      	pop	{r4, pc}

080093c4 <memcpy>:
 80093c4:	440a      	add	r2, r1
 80093c6:	4291      	cmp	r1, r2
 80093c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80093cc:	d100      	bne.n	80093d0 <memcpy+0xc>
 80093ce:	4770      	bx	lr
 80093d0:	b510      	push	{r4, lr}
 80093d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093d6:	4291      	cmp	r1, r2
 80093d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093dc:	d1f9      	bne.n	80093d2 <memcpy+0xe>
 80093de:	bd10      	pop	{r4, pc}

080093e0 <_realloc_r>:
 80093e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e4:	4680      	mov	r8, r0
 80093e6:	4614      	mov	r4, r2
 80093e8:	460e      	mov	r6, r1
 80093ea:	b921      	cbnz	r1, 80093f6 <_realloc_r+0x16>
 80093ec:	4611      	mov	r1, r2
 80093ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093f2:	f7ff bc37 	b.w	8008c64 <_malloc_r>
 80093f6:	b92a      	cbnz	r2, 8009404 <_realloc_r+0x24>
 80093f8:	f7ff fbcc 	bl	8008b94 <_free_r>
 80093fc:	4625      	mov	r5, r4
 80093fe:	4628      	mov	r0, r5
 8009400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009404:	f000 f81b 	bl	800943e <_malloc_usable_size_r>
 8009408:	4284      	cmp	r4, r0
 800940a:	4607      	mov	r7, r0
 800940c:	d802      	bhi.n	8009414 <_realloc_r+0x34>
 800940e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009412:	d812      	bhi.n	800943a <_realloc_r+0x5a>
 8009414:	4621      	mov	r1, r4
 8009416:	4640      	mov	r0, r8
 8009418:	f7ff fc24 	bl	8008c64 <_malloc_r>
 800941c:	4605      	mov	r5, r0
 800941e:	2800      	cmp	r0, #0
 8009420:	d0ed      	beq.n	80093fe <_realloc_r+0x1e>
 8009422:	42bc      	cmp	r4, r7
 8009424:	4622      	mov	r2, r4
 8009426:	4631      	mov	r1, r6
 8009428:	bf28      	it	cs
 800942a:	463a      	movcs	r2, r7
 800942c:	f7ff ffca 	bl	80093c4 <memcpy>
 8009430:	4631      	mov	r1, r6
 8009432:	4640      	mov	r0, r8
 8009434:	f7ff fbae 	bl	8008b94 <_free_r>
 8009438:	e7e1      	b.n	80093fe <_realloc_r+0x1e>
 800943a:	4635      	mov	r5, r6
 800943c:	e7df      	b.n	80093fe <_realloc_r+0x1e>

0800943e <_malloc_usable_size_r>:
 800943e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009442:	1f18      	subs	r0, r3, #4
 8009444:	2b00      	cmp	r3, #0
 8009446:	bfbc      	itt	lt
 8009448:	580b      	ldrlt	r3, [r1, r0]
 800944a:	18c0      	addlt	r0, r0, r3
 800944c:	4770      	bx	lr

0800944e <sqrt>:
 800944e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009450:	4606      	mov	r6, r0
 8009452:	460f      	mov	r7, r1
 8009454:	f000 f820 	bl	8009498 <__ieee754_sqrt>
 8009458:	4632      	mov	r2, r6
 800945a:	4604      	mov	r4, r0
 800945c:	460d      	mov	r5, r1
 800945e:	463b      	mov	r3, r7
 8009460:	4630      	mov	r0, r6
 8009462:	4639      	mov	r1, r7
 8009464:	f7f7 fad2 	bl	8000a0c <__aeabi_dcmpun>
 8009468:	b990      	cbnz	r0, 8009490 <sqrt+0x42>
 800946a:	2200      	movs	r2, #0
 800946c:	2300      	movs	r3, #0
 800946e:	4630      	mov	r0, r6
 8009470:	4639      	mov	r1, r7
 8009472:	f7f7 faa3 	bl	80009bc <__aeabi_dcmplt>
 8009476:	b158      	cbz	r0, 8009490 <sqrt+0x42>
 8009478:	f7ff fb60 	bl	8008b3c <__errno>
 800947c:	2321      	movs	r3, #33	; 0x21
 800947e:	2200      	movs	r2, #0
 8009480:	6003      	str	r3, [r0, #0]
 8009482:	2300      	movs	r3, #0
 8009484:	4610      	mov	r0, r2
 8009486:	4619      	mov	r1, r3
 8009488:	f7f7 f950 	bl	800072c <__aeabi_ddiv>
 800948c:	4604      	mov	r4, r0
 800948e:	460d      	mov	r5, r1
 8009490:	4620      	mov	r0, r4
 8009492:	4629      	mov	r1, r5
 8009494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009498 <__ieee754_sqrt>:
 8009498:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800963c <__ieee754_sqrt+0x1a4>
 800949c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a0:	ea3c 0c01 	bics.w	ip, ip, r1
 80094a4:	460b      	mov	r3, r1
 80094a6:	4606      	mov	r6, r0
 80094a8:	460d      	mov	r5, r1
 80094aa:	460a      	mov	r2, r1
 80094ac:	4604      	mov	r4, r0
 80094ae:	d10e      	bne.n	80094ce <__ieee754_sqrt+0x36>
 80094b0:	4602      	mov	r2, r0
 80094b2:	f7f7 f811 	bl	80004d8 <__aeabi_dmul>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4630      	mov	r0, r6
 80094bc:	4629      	mov	r1, r5
 80094be:	f7f6 fe55 	bl	800016c <__adddf3>
 80094c2:	4606      	mov	r6, r0
 80094c4:	460d      	mov	r5, r1
 80094c6:	4630      	mov	r0, r6
 80094c8:	4629      	mov	r1, r5
 80094ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ce:	2900      	cmp	r1, #0
 80094d0:	dc0d      	bgt.n	80094ee <__ieee754_sqrt+0x56>
 80094d2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80094d6:	ea5c 0c00 	orrs.w	ip, ip, r0
 80094da:	d0f4      	beq.n	80094c6 <__ieee754_sqrt+0x2e>
 80094dc:	b139      	cbz	r1, 80094ee <__ieee754_sqrt+0x56>
 80094de:	4602      	mov	r2, r0
 80094e0:	f7f6 fe42 	bl	8000168 <__aeabi_dsub>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	f7f7 f920 	bl	800072c <__aeabi_ddiv>
 80094ec:	e7e9      	b.n	80094c2 <__ieee754_sqrt+0x2a>
 80094ee:	1512      	asrs	r2, r2, #20
 80094f0:	f000 8089 	beq.w	8009606 <__ieee754_sqrt+0x16e>
 80094f4:	2500      	movs	r5, #0
 80094f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094fa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80094fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009502:	07d2      	lsls	r2, r2, #31
 8009504:	bf5c      	itt	pl
 8009506:	005b      	lslpl	r3, r3, #1
 8009508:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800950c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009510:	bf58      	it	pl
 8009512:	0064      	lslpl	r4, r4, #1
 8009514:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009518:	0062      	lsls	r2, r4, #1
 800951a:	2016      	movs	r0, #22
 800951c:	4629      	mov	r1, r5
 800951e:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8009522:	1076      	asrs	r6, r6, #1
 8009524:	190f      	adds	r7, r1, r4
 8009526:	429f      	cmp	r7, r3
 8009528:	bfde      	ittt	le
 800952a:	1bdb      	suble	r3, r3, r7
 800952c:	1939      	addle	r1, r7, r4
 800952e:	192d      	addle	r5, r5, r4
 8009530:	005b      	lsls	r3, r3, #1
 8009532:	3801      	subs	r0, #1
 8009534:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009538:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800953c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009540:	d1f0      	bne.n	8009524 <__ieee754_sqrt+0x8c>
 8009542:	4604      	mov	r4, r0
 8009544:	2720      	movs	r7, #32
 8009546:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800954a:	428b      	cmp	r3, r1
 800954c:	eb0c 0e00 	add.w	lr, ip, r0
 8009550:	dc02      	bgt.n	8009558 <__ieee754_sqrt+0xc0>
 8009552:	d113      	bne.n	800957c <__ieee754_sqrt+0xe4>
 8009554:	4596      	cmp	lr, r2
 8009556:	d811      	bhi.n	800957c <__ieee754_sqrt+0xe4>
 8009558:	f1be 0f00 	cmp.w	lr, #0
 800955c:	eb0e 000c 	add.w	r0, lr, ip
 8009560:	da56      	bge.n	8009610 <__ieee754_sqrt+0x178>
 8009562:	2800      	cmp	r0, #0
 8009564:	db54      	blt.n	8009610 <__ieee754_sqrt+0x178>
 8009566:	f101 0801 	add.w	r8, r1, #1
 800956a:	1a5b      	subs	r3, r3, r1
 800956c:	4641      	mov	r1, r8
 800956e:	4596      	cmp	lr, r2
 8009570:	bf88      	it	hi
 8009572:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009576:	eba2 020e 	sub.w	r2, r2, lr
 800957a:	4464      	add	r4, ip
 800957c:	005b      	lsls	r3, r3, #1
 800957e:	3f01      	subs	r7, #1
 8009580:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009584:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009588:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800958c:	d1dd      	bne.n	800954a <__ieee754_sqrt+0xb2>
 800958e:	4313      	orrs	r3, r2
 8009590:	d01b      	beq.n	80095ca <__ieee754_sqrt+0x132>
 8009592:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009640 <__ieee754_sqrt+0x1a8>
 8009596:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009644 <__ieee754_sqrt+0x1ac>
 800959a:	e9da 0100 	ldrd	r0, r1, [sl]
 800959e:	e9db 2300 	ldrd	r2, r3, [fp]
 80095a2:	f7f6 fde1 	bl	8000168 <__aeabi_dsub>
 80095a6:	e9da 8900 	ldrd	r8, r9, [sl]
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	4640      	mov	r0, r8
 80095b0:	4649      	mov	r1, r9
 80095b2:	f7f7 fa0d 	bl	80009d0 <__aeabi_dcmple>
 80095b6:	b140      	cbz	r0, 80095ca <__ieee754_sqrt+0x132>
 80095b8:	e9da 0100 	ldrd	r0, r1, [sl]
 80095bc:	e9db 2300 	ldrd	r2, r3, [fp]
 80095c0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80095c4:	d126      	bne.n	8009614 <__ieee754_sqrt+0x17c>
 80095c6:	463c      	mov	r4, r7
 80095c8:	3501      	adds	r5, #1
 80095ca:	106b      	asrs	r3, r5, #1
 80095cc:	0864      	lsrs	r4, r4, #1
 80095ce:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80095d2:	07ea      	lsls	r2, r5, #31
 80095d4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80095d8:	bf48      	it	mi
 80095da:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80095de:	4620      	mov	r0, r4
 80095e0:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80095e4:	e76d      	b.n	80094c2 <__ieee754_sqrt+0x2a>
 80095e6:	0ae3      	lsrs	r3, r4, #11
 80095e8:	3915      	subs	r1, #21
 80095ea:	0564      	lsls	r4, r4, #21
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0fa      	beq.n	80095e6 <__ieee754_sqrt+0x14e>
 80095f0:	02d8      	lsls	r0, r3, #11
 80095f2:	d50a      	bpl.n	800960a <__ieee754_sqrt+0x172>
 80095f4:	f1c2 0020 	rsb	r0, r2, #32
 80095f8:	fa24 f000 	lsr.w	r0, r4, r0
 80095fc:	1e55      	subs	r5, r2, #1
 80095fe:	4094      	lsls	r4, r2
 8009600:	4303      	orrs	r3, r0
 8009602:	1b4a      	subs	r2, r1, r5
 8009604:	e776      	b.n	80094f4 <__ieee754_sqrt+0x5c>
 8009606:	4611      	mov	r1, r2
 8009608:	e7f0      	b.n	80095ec <__ieee754_sqrt+0x154>
 800960a:	005b      	lsls	r3, r3, #1
 800960c:	3201      	adds	r2, #1
 800960e:	e7ef      	b.n	80095f0 <__ieee754_sqrt+0x158>
 8009610:	4688      	mov	r8, r1
 8009612:	e7aa      	b.n	800956a <__ieee754_sqrt+0xd2>
 8009614:	f7f6 fdaa 	bl	800016c <__adddf3>
 8009618:	e9da 8900 	ldrd	r8, r9, [sl]
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	4640      	mov	r0, r8
 8009622:	4649      	mov	r1, r9
 8009624:	f7f7 f9ca 	bl	80009bc <__aeabi_dcmplt>
 8009628:	b120      	cbz	r0, 8009634 <__ieee754_sqrt+0x19c>
 800962a:	1ca1      	adds	r1, r4, #2
 800962c:	bf08      	it	eq
 800962e:	3501      	addeq	r5, #1
 8009630:	3402      	adds	r4, #2
 8009632:	e7ca      	b.n	80095ca <__ieee754_sqrt+0x132>
 8009634:	3401      	adds	r4, #1
 8009636:	f024 0401 	bic.w	r4, r4, #1
 800963a:	e7c6      	b.n	80095ca <__ieee754_sqrt+0x132>
 800963c:	7ff00000 	.word	0x7ff00000
 8009640:	200001d0 	.word	0x200001d0
 8009644:	200001d8 	.word	0x200001d8

08009648 <_init>:
 8009648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964a:	bf00      	nop
 800964c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964e:	bc08      	pop	{r3}
 8009650:	469e      	mov	lr, r3
 8009652:	4770      	bx	lr

08009654 <_fini>:
 8009654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009656:	bf00      	nop
 8009658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800965a:	bc08      	pop	{r3}
 800965c:	469e      	mov	lr, r3
 800965e:	4770      	bx	lr
